/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VotingEscrowInterface extends ethers.utils.Interface {
  functions: {
    "set_reward_pool(address)": FunctionFragment;
    "commit_transfer_ownership(address)": FunctionFragment;
    "apply_transfer_ownership()": FunctionFragment;
    "commit_smart_wallet_checker(address)": FunctionFragment;
    "apply_smart_wallet_checker()": FunctionFragment;
    "set_funds_unlocked(bool)": FunctionFragment;
    "get_last_user_slope(address)": FunctionFragment;
    "user_point_history__ts(address,uint256)": FunctionFragment;
    "locked__end(address)": FunctionFragment;
    "checkpoint()": FunctionFragment;
    "deposit_for(address,uint256)": FunctionFragment;
    "create_lock(uint256,uint256)": FunctionFragment;
    "increase_amount(uint256)": FunctionFragment;
    "increase_unlock_time(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "force_withdraw()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getPriorVotes(address,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "supply()": FunctionFragment;
    "locked(address)": FunctionFragment;
    "epoch()": FunctionFragment;
    "point_history(uint256)": FunctionFragment;
    "user_point_history(address,uint256)": FunctionFragment;
    "user_point_epoch(address)": FunctionFragment;
    "slope_changes(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "symbol()": FunctionFragment;
    "decimals()": FunctionFragment;
    "future_smart_wallet_checker()": FunctionFragment;
    "smart_wallet_checker()": FunctionFragment;
    "admin()": FunctionFragment;
    "future_admin()": FunctionFragment;
    "is_unlocked()": FunctionFragment;
    "reward_pool()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "set_reward_pool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "commit_transfer_ownership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "apply_transfer_ownership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commit_smart_wallet_checker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "apply_smart_wallet_checker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set_funds_unlocked",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "get_last_user_slope",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "user_point_history__ts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "locked__end", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit_for",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create_lock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_amount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_unlock_time",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "force_withdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPriorVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "supply", values?: undefined): string;
  encodeFunctionData(functionFragment: "locked", values: [string]): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "point_history",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_point_history",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_point_epoch",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "slope_changes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "future_smart_wallet_checker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "smart_wallet_checker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "future_admin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "is_unlocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward_pool",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "set_reward_pool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apply_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_smart_wallet_checker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apply_smart_wallet_checker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_funds_unlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_last_user_slope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_point_history__ts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "locked__end",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_unlock_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "force_withdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriorVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "point_history",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_point_history",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_point_epoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slope_changes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_smart_wallet_checker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smart_wallet_checker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "is_unlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_pool",
    data: BytesLike
  ): Result;

  events: {
    "CommitOwnership(address)": EventFragment;
    "ApplyOwnership(address)": EventFragment;
    "FundsUnlocked(bool)": EventFragment;
    "Deposit(address,address,uint256,uint256,int128,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
    "Supply(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommitOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplyOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Supply"): EventFragment;
}

export class VotingEscrow extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VotingEscrowInterface;

  functions: {
    set_reward_pool(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set_reward_pool(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commit_transfer_ownership(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "apply_transfer_ownership()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commit_smart_wallet_checker(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commit_smart_wallet_checker(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    apply_smart_wallet_checker(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "apply_smart_wallet_checker()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    set_funds_unlocked(
      _funds_unlocked: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set_funds_unlocked(bool)"(
      _funds_unlocked: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    get_last_user_slope(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "get_last_user_slope(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    user_point_history__ts(
      _addr: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "user_point_history__ts(address,uint256)"(
      _addr: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    locked__end(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "locked__end(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    checkpoint(overrides?: Overrides): Promise<ContractTransaction>;

    "checkpoint()"(overrides?: Overrides): Promise<ContractTransaction>;

    deposit_for(
      _addr: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit_for(address,uint256)"(
      _addr: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    create_lock(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create_lock(uint256,uint256)"(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increase_amount(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increase_amount(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increase_unlock_time(
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increase_unlock_time(uint256)"(
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

    force_withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "force_withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

    "balanceOf(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address,uint256)"(
      addr: string,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPriorVotes(
      addr: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPriorVotes(address,uint256)"(
      addr: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply(uint256)"(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupplyAt(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    supply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "supply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    locked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { amount: BigNumber; end: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    "locked(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { amount: BigNumber; end: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    epoch(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "epoch()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;

    "point_history(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;

    user_point_history(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;

    "user_point_history(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;

    user_point_epoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "user_point_epoch(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    slope_changes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "slope_changes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    future_smart_wallet_checker(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "future_smart_wallet_checker()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    smart_wallet_checker(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "smart_wallet_checker()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    admin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "admin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    future_admin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "future_admin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    is_unlocked(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "is_unlocked()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    reward_pool(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "reward_pool()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  set_reward_pool(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set_reward_pool(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commit_transfer_ownership(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  apply_transfer_ownership(overrides?: Overrides): Promise<ContractTransaction>;

  "apply_transfer_ownership()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commit_smart_wallet_checker(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commit_smart_wallet_checker(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  apply_smart_wallet_checker(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "apply_smart_wallet_checker()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  set_funds_unlocked(
    _funds_unlocked: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set_funds_unlocked(bool)"(
    _funds_unlocked: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  get_last_user_slope(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "get_last_user_slope(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  user_point_history__ts(
    _addr: string,
    _idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "user_point_history__ts(address,uint256)"(
    _addr: string,
    _idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  locked__end(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  "locked__end(address)"(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkpoint(overrides?: Overrides): Promise<ContractTransaction>;

  "checkpoint()"(overrides?: Overrides): Promise<ContractTransaction>;

  deposit_for(
    _addr: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit_for(address,uint256)"(
    _addr: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  create_lock(
    _value: BigNumberish,
    _unlock_time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create_lock(uint256,uint256)"(
    _value: BigNumberish,
    _unlock_time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increase_amount(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increase_amount(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increase_unlock_time(
    _unlock_time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increase_unlock_time(uint256)"(
    _unlock_time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  force_withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "force_withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  "balanceOf(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    addr: string,
    _t: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriorVotes(
    addr: string,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriorVotes(address,uint256)"(
    addr: string,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply(uint256)"(
    t: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupplyAt(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAt(uint256)"(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  supply(overrides?: CallOverrides): Promise<BigNumber>;

  "supply()"(overrides?: CallOverrides): Promise<BigNumber>;

  locked(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{ amount: BigNumber; end: BigNumber; 0: BigNumber; 1: BigNumber }>;

  "locked(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{ amount: BigNumber; end: BigNumber; 0: BigNumber; 1: BigNumber }>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  point_history(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    bias: BigNumber;
    slope: BigNumber;
    ts: BigNumber;
    blk: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "point_history(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    bias: BigNumber;
    slope: BigNumber;
    ts: BigNumber;
    blk: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  user_point_history(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    bias: BigNumber;
    slope: BigNumber;
    ts: BigNumber;
    blk: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "user_point_history(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    bias: BigNumber;
    slope: BigNumber;
    ts: BigNumber;
    blk: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  user_point_epoch(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "user_point_epoch(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  slope_changes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "slope_changes(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  future_smart_wallet_checker(overrides?: CallOverrides): Promise<string>;

  "future_smart_wallet_checker()"(overrides?: CallOverrides): Promise<string>;

  smart_wallet_checker(overrides?: CallOverrides): Promise<string>;

  "smart_wallet_checker()"(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  "future_admin()"(overrides?: CallOverrides): Promise<string>;

  is_unlocked(overrides?: CallOverrides): Promise<boolean>;

  "is_unlocked()"(overrides?: CallOverrides): Promise<boolean>;

  reward_pool(overrides?: CallOverrides): Promise<string>;

  "reward_pool()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    set_reward_pool(addr: string, overrides?: CallOverrides): Promise<void>;

    "set_reward_pool(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    commit_transfer_ownership(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "commit_transfer_ownership(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    apply_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    "apply_transfer_ownership()"(overrides?: CallOverrides): Promise<void>;

    commit_smart_wallet_checker(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "commit_smart_wallet_checker(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    apply_smart_wallet_checker(overrides?: CallOverrides): Promise<void>;

    "apply_smart_wallet_checker()"(overrides?: CallOverrides): Promise<void>;

    set_funds_unlocked(
      _funds_unlocked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "set_funds_unlocked(bool)"(
      _funds_unlocked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    get_last_user_slope(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get_last_user_slope(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user_point_history__ts(
      _addr: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "user_point_history__ts(address,uint256)"(
      _addr: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked__end(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "locked__end(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoint(overrides?: CallOverrides): Promise<void>;

    "checkpoint()"(overrides?: CallOverrides): Promise<void>;

    deposit_for(
      _addr: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit_for(address,uint256)"(
      _addr: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    create_lock(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "create_lock(uint256,uint256)"(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increase_amount(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increase_amount(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increase_unlock_time(
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increase_unlock_time(uint256)"(
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;

    force_withdraw(overrides?: CallOverrides): Promise<void>;

    "force_withdraw()"(overrides?: CallOverrides): Promise<void>;

    "balanceOf(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      addr: string,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorVotes(
      addr: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriorVotes(address,uint256)"(
      addr: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply(uint256)"(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    "supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "locked(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "point_history(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    user_point_history(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "user_point_history(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    user_point_epoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "user_point_epoch(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slope_changes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "slope_changes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_smart_wallet_checker(overrides?: CallOverrides): Promise<string>;

    "future_smart_wallet_checker()"(overrides?: CallOverrides): Promise<string>;

    smart_wallet_checker(overrides?: CallOverrides): Promise<string>;

    "smart_wallet_checker()"(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    future_admin(overrides?: CallOverrides): Promise<string>;

    "future_admin()"(overrides?: CallOverrides): Promise<string>;

    is_unlocked(overrides?: CallOverrides): Promise<boolean>;

    "is_unlocked()"(overrides?: CallOverrides): Promise<boolean>;

    reward_pool(overrides?: CallOverrides): Promise<string>;

    "reward_pool()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    CommitOwnership(admin: null): EventFilter;

    ApplyOwnership(admin: null): EventFilter;

    FundsUnlocked(funds_unlocked: null): EventFilter;

    Deposit(
      deposit_from: string | null,
      provider: string | null,
      value: null,
      locktime: BigNumberish | null,
      type: null,
      ts: null
    ): EventFilter;

    Withdraw(provider: string | null, value: null, ts: null): EventFilter;

    Supply(prevSupply: null, supply: null): EventFilter;
  };

  estimateGas: {
    set_reward_pool(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "set_reward_pool(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commit_transfer_ownership(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    apply_transfer_ownership(overrides?: Overrides): Promise<BigNumber>;

    "apply_transfer_ownership()"(overrides?: Overrides): Promise<BigNumber>;

    commit_smart_wallet_checker(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commit_smart_wallet_checker(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    apply_smart_wallet_checker(overrides?: Overrides): Promise<BigNumber>;

    "apply_smart_wallet_checker()"(overrides?: Overrides): Promise<BigNumber>;

    set_funds_unlocked(
      _funds_unlocked: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set_funds_unlocked(bool)"(
      _funds_unlocked: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    get_last_user_slope(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get_last_user_slope(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user_point_history__ts(
      _addr: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "user_point_history__ts(address,uint256)"(
      _addr: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked__end(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "locked__end(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoint(overrides?: Overrides): Promise<BigNumber>;

    "checkpoint()"(overrides?: Overrides): Promise<BigNumber>;

    deposit_for(
      _addr: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit_for(address,uint256)"(
      _addr: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    create_lock(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create_lock(uint256,uint256)"(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increase_amount(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increase_amount(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increase_unlock_time(
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increase_unlock_time(uint256)"(
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;

    force_withdraw(overrides?: Overrides): Promise<BigNumber>;

    "force_withdraw()"(overrides?: Overrides): Promise<BigNumber>;

    "balanceOf(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      addr: string,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorVotes(
      addr: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriorVotes(address,uint256)"(
      addr: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply(uint256)"(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    "supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "locked(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "point_history(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user_point_history(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "user_point_history(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user_point_epoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "user_point_epoch(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slope_changes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "slope_changes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_smart_wallet_checker(overrides?: CallOverrides): Promise<BigNumber>;

    "future_smart_wallet_checker()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    smart_wallet_checker(overrides?: CallOverrides): Promise<BigNumber>;

    "smart_wallet_checker()"(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;

    "future_admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    is_unlocked(overrides?: CallOverrides): Promise<BigNumber>;

    "is_unlocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward_pool(overrides?: CallOverrides): Promise<BigNumber>;

    "reward_pool()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    set_reward_pool(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set_reward_pool(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commit_transfer_ownership(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "apply_transfer_ownership()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commit_smart_wallet_checker(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commit_smart_wallet_checker(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    apply_smart_wallet_checker(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "apply_smart_wallet_checker()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    set_funds_unlocked(
      _funds_unlocked: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set_funds_unlocked(bool)"(
      _funds_unlocked: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    get_last_user_slope(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get_last_user_slope(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user_point_history__ts(
      _addr: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "user_point_history__ts(address,uint256)"(
      _addr: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked__end(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locked__end(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpoint(overrides?: Overrides): Promise<PopulatedTransaction>;

    "checkpoint()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    deposit_for(
      _addr: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit_for(address,uint256)"(
      _addr: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    create_lock(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create_lock(uint256,uint256)"(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increase_amount(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increase_amount(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increase_unlock_time(
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increase_unlock_time(uint256)"(
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    force_withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "force_withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      addr: string,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorVotes(
      addr: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorVotes(address,uint256)"(
      addr: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply(uint256)"(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAt(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    locked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locked(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "point_history(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user_point_history(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "user_point_history(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user_point_epoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "user_point_epoch(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slope_changes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "slope_changes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_smart_wallet_checker(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "future_smart_wallet_checker()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    smart_wallet_checker(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "smart_wallet_checker()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "future_admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    is_unlocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "is_unlocked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reward_pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
