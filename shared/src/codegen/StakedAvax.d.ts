/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakedAvaxInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ROLE_ACCRUE_REWARDS()": FunctionFragment;
    "ROLE_DEPOSIT()": FunctionFragment;
    "ROLE_PAUSE()": FunctionFragment;
    "ROLE_PAUSE_MINTING()": FunctionFragment;
    "ROLE_RESUME()": FunctionFragment;
    "ROLE_RESUME_MINTING()": FunctionFragment;
    "ROLE_SET_TOTAL_POOLED_AVAX_CAP()": FunctionFragment;
    "ROLE_WITHDRAW()": FunctionFragment;
    "accrueRewards(uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cancelPendingUnlockRequests()": FunctionFragment;
    "cancelRedeemableUnlockRequests()": FunctionFragment;
    "cancelUnlockRequest(uint256)": FunctionFragment;
    "cooldownPeriod()": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit()": FunctionFragment;
    "getPaginatedUnlockRequests(address,uint256,uint256)": FunctionFragment;
    "getPooledAvaxByShares(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getSharesByPooledAvax(uint256)": FunctionFragment;
    "getUnlockRequestCount(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "historicalExchangeRateTimestamps(uint256)": FunctionFragment;
    "historicalExchangeRatesByTimestamp(uint256)": FunctionFragment;
    "initialize(uint256,uint256)": FunctionFragment;
    "mintingPaused()": FunctionFragment;
    "name()": FunctionFragment;
    "pause()": FunctionFragment;
    "pauseMinting()": FunctionFragment;
    "paused()": FunctionFragment;
    "redeem()": FunctionFragment;
    "redeemOverdueShares()": FunctionFragment;
    "redeemPeriod()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestUnlock(uint256)": FunctionFragment;
    "resume()": FunctionFragment;
    "resumeMinting()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setCooldownPeriod(uint256)": FunctionFragment;
    "setRedeemPeriod(uint256)": FunctionFragment;
    "setTotalPooledAvaxCap(uint256)": FunctionFragment;
    "stakerCount()": FunctionFragment;
    "submit()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalPooledAvax()": FunctionFragment;
    "totalPooledAvaxCap()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "userSharesInCustody(address)": FunctionFragment;
    "userUnlockRequests(address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ACCRUE_REWARDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_PAUSE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_PAUSE_MINTING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_RESUME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_RESUME_MINTING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_SET_TOTAL_POOLED_AVAX_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_WITHDRAW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrueRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelPendingUnlockRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRedeemableUnlockRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUnlockRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPaginatedUnlockRequests",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPooledAvaxByShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSharesByPooledAvax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockRequestCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "historicalExchangeRateTimestamps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "historicalExchangeRatesByTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseMinting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "redeem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemOverdueShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestUnlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resumeMinting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCooldownPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedeemPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalPooledAvaxCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "submit", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalPooledAvax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPooledAvaxCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userSharesInCustody",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userUnlockRequests",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ACCRUE_REWARDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_PAUSE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_PAUSE_MINTING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_RESUME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_RESUME_MINTING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_SET_TOTAL_POOLED_AVAX_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_WITHDRAW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelPendingUnlockRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRedeemableUnlockRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUnlockRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedUnlockRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPooledAvaxByShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharesByPooledAvax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockRequestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "historicalExchangeRateTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "historicalExchangeRatesByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemOverdueShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resumeMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCooldownPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedeemPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalPooledAvaxCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPooledAvax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPooledAvaxCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSharesInCustody",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userUnlockRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AccrueRewards(uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "CooldownPeriodUpdated(uint256,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "MintingPaused(address)": EventFragment;
    "MintingResumed(address)": EventFragment;
    "Paused(address)": EventFragment;
    "Redeem(address,uint256,uint256,uint256)": EventFragment;
    "RedeemOverdueShares(address,uint256)": EventFragment;
    "RedeemPeriodUpdated(uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Submitted(address,uint256,uint256)": EventFragment;
    "TotalPooledAvaxCapUpdated(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnlockCancelled(address,uint256,uint256)": EventFragment;
    "UnlockRequested(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccrueRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CooldownPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemOverdueShares"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Submitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalPooledAvaxCapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class StakedAvax extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakedAvaxInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ROLE_ACCRUE_REWARDS(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ROLE_ACCRUE_REWARDS()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ROLE_DEPOSIT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ROLE_DEPOSIT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ROLE_PAUSE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ROLE_PAUSE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ROLE_PAUSE_MINTING(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ROLE_PAUSE_MINTING()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ROLE_RESUME(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ROLE_RESUME()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ROLE_RESUME_MINTING(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ROLE_RESUME_MINTING()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ROLE_SET_TOTAL_POOLED_AVAX_CAP(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ROLE_SET_TOTAL_POOLED_AVAX_CAP()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ROLE_WITHDRAW(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ROLE_WITHDRAW()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    accrueRewards(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "accrueRewards(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cancelPendingUnlockRequests(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelPendingUnlockRequests()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelRedeemableUnlockRequests(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelRedeemableUnlockRequests()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelUnlockRequest(
      unlockIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelUnlockRequest(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cooldownPeriod(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "cooldownPeriod()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    deposit(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "deposit()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    getPaginatedUnlockRequests(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startedAt: BigNumber;
        shareAmount: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      1: BigNumber[];
    }>;

    "getPaginatedUnlockRequests(address,uint256,uint256)"(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startedAt: BigNumber;
        shareAmount: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      1: BigNumber[];
    }>;

    getPooledAvaxByShares(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPooledAvaxByShares(uint256)"(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSharesByPooledAvax(
      avaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSharesByPooledAvax(uint256)"(
      avaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getUnlockRequestCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUnlockRequestCount(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    historicalExchangeRateTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "historicalExchangeRateTimestamps(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    historicalExchangeRatesByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "historicalExchangeRatesByTimestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    initialize(
      _cooldownPeriod: BigNumberish,
      _redeemPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint256,uint256)"(
      _cooldownPeriod: BigNumberish,
      _redeemPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintingPaused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "mintingPaused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    pauseMinting(overrides?: Overrides): Promise<ContractTransaction>;

    "pauseMinting()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "redeem()"(overrides?: Overrides): Promise<ContractTransaction>;

    "redeem(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemOverdueShares()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemOverdueShares(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemPeriod(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "redeemPeriod()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requestUnlock(
      shareAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "requestUnlock(uint256)"(
      shareAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resume(overrides?: Overrides): Promise<ContractTransaction>;

    "resume()"(overrides?: Overrides): Promise<ContractTransaction>;

    resumeMinting(overrides?: Overrides): Promise<ContractTransaction>;

    "resumeMinting()"(overrides?: Overrides): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCooldownPeriod(
      newCooldownPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCooldownPeriod(uint256)"(
      newCooldownPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRedeemPeriod(
      newRedeemPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRedeemPeriod(uint256)"(
      newRedeemPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTotalPooledAvaxCap(
      newTotalPooledAvaxCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTotalPooledAvaxCap(uint256)"(
      newTotalPooledAvaxCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakerCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "stakerCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    submit(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "submit()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalPooledAvax(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalPooledAvax()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalPooledAvaxCap(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalPooledAvaxCap()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalShares(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalShares()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userSharesInCustody(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userSharesInCustody(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    userUnlockRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startedAt: BigNumber;
      shareAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "userUnlockRequests(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startedAt: BigNumber;
      shareAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  ROLE_ACCRUE_REWARDS(overrides?: CallOverrides): Promise<string>;

  "ROLE_ACCRUE_REWARDS()"(overrides?: CallOverrides): Promise<string>;

  ROLE_DEPOSIT(overrides?: CallOverrides): Promise<string>;

  "ROLE_DEPOSIT()"(overrides?: CallOverrides): Promise<string>;

  ROLE_PAUSE(overrides?: CallOverrides): Promise<string>;

  "ROLE_PAUSE()"(overrides?: CallOverrides): Promise<string>;

  ROLE_PAUSE_MINTING(overrides?: CallOverrides): Promise<string>;

  "ROLE_PAUSE_MINTING()"(overrides?: CallOverrides): Promise<string>;

  ROLE_RESUME(overrides?: CallOverrides): Promise<string>;

  "ROLE_RESUME()"(overrides?: CallOverrides): Promise<string>;

  ROLE_RESUME_MINTING(overrides?: CallOverrides): Promise<string>;

  "ROLE_RESUME_MINTING()"(overrides?: CallOverrides): Promise<string>;

  ROLE_SET_TOTAL_POOLED_AVAX_CAP(overrides?: CallOverrides): Promise<string>;

  "ROLE_SET_TOTAL_POOLED_AVAX_CAP()"(
    overrides?: CallOverrides
  ): Promise<string>;

  ROLE_WITHDRAW(overrides?: CallOverrides): Promise<string>;

  "ROLE_WITHDRAW()"(overrides?: CallOverrides): Promise<string>;

  accrueRewards(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "accrueRewards(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelPendingUnlockRequests(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelPendingUnlockRequests()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelRedeemableUnlockRequests(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelRedeemableUnlockRequests()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelUnlockRequest(
    unlockIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelUnlockRequest(uint256)"(
    unlockIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "cooldownPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  deposit(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "deposit()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  getPaginatedUnlockRequests(
    user: string,
    from: BigNumberish,
    to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: {
      startedAt: BigNumber;
      shareAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
    1: BigNumber[];
  }>;

  "getPaginatedUnlockRequests(address,uint256,uint256)"(
    user: string,
    from: BigNumberish,
    to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: {
      startedAt: BigNumber;
      shareAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
    1: BigNumber[];
  }>;

  getPooledAvaxByShares(
    shareAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPooledAvaxByShares(uint256)"(
    shareAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSharesByPooledAvax(
    avaxAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSharesByPooledAvax(uint256)"(
    avaxAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnlockRequestCount(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUnlockRequestCount(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  historicalExchangeRateTimestamps(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "historicalExchangeRateTimestamps(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  historicalExchangeRatesByTimestamp(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "historicalExchangeRatesByTimestamp(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _cooldownPeriod: BigNumberish,
    _redeemPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint256,uint256)"(
    _cooldownPeriod: BigNumberish,
    _redeemPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintingPaused(overrides?: CallOverrides): Promise<boolean>;

  "mintingPaused()"(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  pauseMinting(overrides?: Overrides): Promise<ContractTransaction>;

  "pauseMinting()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  "redeem()"(overrides?: Overrides): Promise<ContractTransaction>;

  "redeem(uint256)"(
    unlockIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemOverdueShares()"(overrides?: Overrides): Promise<ContractTransaction>;

  "redeemOverdueShares(uint256)"(
    unlockIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "redeemPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requestUnlock(
    shareAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "requestUnlock(uint256)"(
    shareAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resume(overrides?: Overrides): Promise<ContractTransaction>;

  "resume()"(overrides?: Overrides): Promise<ContractTransaction>;

  resumeMinting(overrides?: Overrides): Promise<ContractTransaction>;

  "resumeMinting()"(overrides?: Overrides): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCooldownPeriod(
    newCooldownPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCooldownPeriod(uint256)"(
    newCooldownPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRedeemPeriod(
    newRedeemPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRedeemPeriod(uint256)"(
    newRedeemPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTotalPooledAvaxCap(
    newTotalPooledAvaxCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTotalPooledAvaxCap(uint256)"(
    newTotalPooledAvaxCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakerCount(overrides?: CallOverrides): Promise<BigNumber>;

  "stakerCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  submit(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "submit()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalPooledAvax(overrides?: CallOverrides): Promise<BigNumber>;

  "totalPooledAvax()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalPooledAvaxCap(overrides?: CallOverrides): Promise<BigNumber>;

  "totalPooledAvaxCap()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userSharesInCustody(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userSharesInCustody(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userUnlockRequests(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startedAt: BigNumber;
    shareAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "userUnlockRequests(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startedAt: BigNumber;
    shareAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    ROLE_ACCRUE_REWARDS(overrides?: CallOverrides): Promise<string>;

    "ROLE_ACCRUE_REWARDS()"(overrides?: CallOverrides): Promise<string>;

    ROLE_DEPOSIT(overrides?: CallOverrides): Promise<string>;

    "ROLE_DEPOSIT()"(overrides?: CallOverrides): Promise<string>;

    ROLE_PAUSE(overrides?: CallOverrides): Promise<string>;

    "ROLE_PAUSE()"(overrides?: CallOverrides): Promise<string>;

    ROLE_PAUSE_MINTING(overrides?: CallOverrides): Promise<string>;

    "ROLE_PAUSE_MINTING()"(overrides?: CallOverrides): Promise<string>;

    ROLE_RESUME(overrides?: CallOverrides): Promise<string>;

    "ROLE_RESUME()"(overrides?: CallOverrides): Promise<string>;

    ROLE_RESUME_MINTING(overrides?: CallOverrides): Promise<string>;

    "ROLE_RESUME_MINTING()"(overrides?: CallOverrides): Promise<string>;

    ROLE_SET_TOTAL_POOLED_AVAX_CAP(overrides?: CallOverrides): Promise<string>;

    "ROLE_SET_TOTAL_POOLED_AVAX_CAP()"(
      overrides?: CallOverrides
    ): Promise<string>;

    ROLE_WITHDRAW(overrides?: CallOverrides): Promise<string>;

    "ROLE_WITHDRAW()"(overrides?: CallOverrides): Promise<string>;

    accrueRewards(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "accrueRewards(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelPendingUnlockRequests(overrides?: CallOverrides): Promise<void>;

    "cancelPendingUnlockRequests()"(overrides?: CallOverrides): Promise<void>;

    cancelRedeemableUnlockRequests(overrides?: CallOverrides): Promise<void>;

    "cancelRedeemableUnlockRequests()"(
      overrides?: CallOverrides
    ): Promise<void>;

    cancelUnlockRequest(
      unlockIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelUnlockRequest(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "cooldownPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    deposit(overrides?: CallOverrides): Promise<void>;

    "deposit()"(overrides?: CallOverrides): Promise<void>;

    getPaginatedUnlockRequests(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startedAt: BigNumber;
        shareAmount: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      1: BigNumber[];
    }>;

    "getPaginatedUnlockRequests(address,uint256,uint256)"(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startedAt: BigNumber;
        shareAmount: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      1: BigNumber[];
    }>;

    getPooledAvaxByShares(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPooledAvaxByShares(uint256)"(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSharesByPooledAvax(
      avaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSharesByPooledAvax(uint256)"(
      avaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnlockRequestCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnlockRequestCount(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    historicalExchangeRateTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "historicalExchangeRateTimestamps(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historicalExchangeRatesByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "historicalExchangeRatesByTimestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _cooldownPeriod: BigNumberish,
      _redeemPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,uint256)"(
      _cooldownPeriod: BigNumberish,
      _redeemPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintingPaused(overrides?: CallOverrides): Promise<boolean>;

    "mintingPaused()"(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    pauseMinting(overrides?: CallOverrides): Promise<void>;

    "pauseMinting()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    "redeem()"(overrides?: CallOverrides): Promise<void>;

    "redeem(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeemOverdueShares()"(overrides?: CallOverrides): Promise<void>;

    "redeemOverdueShares(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "redeemPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestUnlock(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestUnlock(uint256)"(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resume(overrides?: CallOverrides): Promise<void>;

    "resume()"(overrides?: CallOverrides): Promise<void>;

    resumeMinting(overrides?: CallOverrides): Promise<void>;

    "resumeMinting()"(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCooldownPeriod(
      newCooldownPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCooldownPeriod(uint256)"(
      newCooldownPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedeemPeriod(
      newRedeemPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRedeemPeriod(uint256)"(
      newRedeemPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalPooledAvaxCap(
      newTotalPooledAvaxCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTotalPooledAvaxCap(uint256)"(
      newTotalPooledAvaxCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakerCount(overrides?: CallOverrides): Promise<BigNumber>;

    "stakerCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    submit(overrides?: CallOverrides): Promise<BigNumber>;

    "submit()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalPooledAvax(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPooledAvax()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPooledAvaxCap(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPooledAvaxCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userSharesInCustody(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userSharesInCustody(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userUnlockRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startedAt: BigNumber;
      shareAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "userUnlockRequests(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startedAt: BigNumber;
      shareAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AccrueRewards(value: null): EventFilter;

    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    CooldownPeriodUpdated(
      oldCooldownPeriod: null,
      newCooldownPeriod: null
    ): EventFilter;

    Deposit(user: string | null, amount: null): EventFilter;

    MintingPaused(user: null): EventFilter;

    MintingResumed(user: null): EventFilter;

    Paused(account: null): EventFilter;

    Redeem(
      user: string | null,
      unlockRequestedAt: null,
      shareAmount: null,
      avaxAmount: null
    ): EventFilter;

    RedeemOverdueShares(user: string | null, shareAmount: null): EventFilter;

    RedeemPeriodUpdated(
      oldRedeemPeriod: null,
      newRedeemPeriod: null
    ): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Submitted(
      user: string | null,
      avaxAmount: null,
      shareAmount: null
    ): EventFilter;

    TotalPooledAvaxCapUpdated(
      oldTotalPooldAvaxCap: null,
      newTotalPooledAvaxCap: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    UnlockCancelled(
      user: string | null,
      unlockRequestedAt: null,
      shareAmount: null
    ): EventFilter;

    UnlockRequested(user: string | null, shareAmount: null): EventFilter;

    Unpaused(account: null): EventFilter;

    Withdraw(user: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_ACCRUE_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_ACCRUE_REWARDS()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_DEPOSIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_PAUSE(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_PAUSE()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_PAUSE_MINTING(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_PAUSE_MINTING()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_RESUME(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_RESUME()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_RESUME_MINTING(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_RESUME_MINTING()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_SET_TOTAL_POOLED_AVAX_CAP(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ROLE_SET_TOTAL_POOLED_AVAX_CAP()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ROLE_WITHDRAW(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_WITHDRAW()"(overrides?: CallOverrides): Promise<BigNumber>;

    accrueRewards(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "accrueRewards(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelPendingUnlockRequests(overrides?: Overrides): Promise<BigNumber>;

    "cancelPendingUnlockRequests()"(overrides?: Overrides): Promise<BigNumber>;

    cancelRedeemableUnlockRequests(overrides?: Overrides): Promise<BigNumber>;

    "cancelRedeemableUnlockRequests()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelUnlockRequest(
      unlockIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelUnlockRequest(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "cooldownPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(overrides?: PayableOverrides): Promise<BigNumber>;

    "deposit()"(overrides?: PayableOverrides): Promise<BigNumber>;

    getPaginatedUnlockRequests(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPaginatedUnlockRequests(address,uint256,uint256)"(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPooledAvaxByShares(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPooledAvaxByShares(uint256)"(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSharesByPooledAvax(
      avaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSharesByPooledAvax(uint256)"(
      avaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnlockRequestCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnlockRequestCount(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historicalExchangeRateTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "historicalExchangeRateTimestamps(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historicalExchangeRatesByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "historicalExchangeRatesByTimestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _cooldownPeriod: BigNumberish,
      _redeemPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint256,uint256)"(
      _cooldownPeriod: BigNumberish,
      _redeemPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "mintingPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    pauseMinting(overrides?: Overrides): Promise<BigNumber>;

    "pauseMinting()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    "redeem()"(overrides?: Overrides): Promise<BigNumber>;

    "redeem(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemOverdueShares()"(overrides?: Overrides): Promise<BigNumber>;

    "redeemOverdueShares(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "redeemPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    requestUnlock(
      shareAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "requestUnlock(uint256)"(
      shareAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    resume(overrides?: Overrides): Promise<BigNumber>;

    "resume()"(overrides?: Overrides): Promise<BigNumber>;

    resumeMinting(overrides?: Overrides): Promise<BigNumber>;

    "resumeMinting()"(overrides?: Overrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCooldownPeriod(
      newCooldownPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCooldownPeriod(uint256)"(
      newCooldownPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRedeemPeriod(
      newRedeemPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRedeemPeriod(uint256)"(
      newRedeemPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTotalPooledAvaxCap(
      newTotalPooledAvaxCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTotalPooledAvaxCap(uint256)"(
      newTotalPooledAvaxCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakerCount(overrides?: CallOverrides): Promise<BigNumber>;

    "stakerCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    submit(overrides?: PayableOverrides): Promise<BigNumber>;

    "submit()"(overrides?: PayableOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPooledAvax(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPooledAvax()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPooledAvaxCap(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPooledAvaxCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userSharesInCustody(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userSharesInCustody(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userUnlockRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userUnlockRequests(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_ACCRUE_REWARDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROLE_ACCRUE_REWARDS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_DEPOSIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROLE_DEPOSIT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_PAUSE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROLE_PAUSE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_PAUSE_MINTING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROLE_PAUSE_MINTING()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_RESUME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROLE_RESUME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_RESUME_MINTING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROLE_RESUME_MINTING()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_SET_TOTAL_POOLED_AVAX_CAP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROLE_SET_TOTAL_POOLED_AVAX_CAP()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_WITHDRAW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROLE_WITHDRAW()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrueRewards(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "accrueRewards(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelPendingUnlockRequests(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelPendingUnlockRequests()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelRedeemableUnlockRequests(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelRedeemableUnlockRequests()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelUnlockRequest(
      unlockIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelUnlockRequest(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cooldownPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cooldownPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "deposit()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    getPaginatedUnlockRequests(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPaginatedUnlockRequests(address,uint256,uint256)"(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPooledAvaxByShares(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPooledAvaxByShares(uint256)"(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSharesByPooledAvax(
      avaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSharesByPooledAvax(uint256)"(
      avaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnlockRequestCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnlockRequestCount(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    historicalExchangeRateTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "historicalExchangeRateTimestamps(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    historicalExchangeRatesByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "historicalExchangeRatesByTimestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _cooldownPeriod: BigNumberish,
      _redeemPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,uint256)"(
      _cooldownPeriod: BigNumberish,
      _redeemPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintingPaused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    pauseMinting(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pauseMinting()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "redeem()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    "redeem(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemOverdueShares()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemOverdueShares(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "redeemPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requestUnlock(
      shareAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "requestUnlock(uint256)"(
      shareAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    resume(overrides?: Overrides): Promise<PopulatedTransaction>;

    "resume()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    resumeMinting(overrides?: Overrides): Promise<PopulatedTransaction>;

    "resumeMinting()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCooldownPeriod(
      newCooldownPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCooldownPeriod(uint256)"(
      newCooldownPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRedeemPeriod(
      newRedeemPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRedeemPeriod(uint256)"(
      newRedeemPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTotalPooledAvaxCap(
      newTotalPooledAvaxCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTotalPooledAvaxCap(uint256)"(
      newTotalPooledAvaxCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakerCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submit(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "submit()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPooledAvax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalPooledAvax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPooledAvaxCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalPooledAvaxCap()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalShares()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userSharesInCustody(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userSharesInCustody(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userUnlockRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userUnlockRequests(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
