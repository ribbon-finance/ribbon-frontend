/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace RibbonEarnVault {
  export type InitParamsStruct = {
    _owner: string;
    _keeper: string;
    _borrowers: string[];
    _borrowerWeights: BigNumberish[];
    _optionSeller: string;
    _feeRecipient: string;
    _managementFee: BigNumberish;
    _performanceFee: BigNumberish;
    _tokenName: string;
    _tokenSymbol: string;
  };

  export type InitParamsStructOutput = [
    string,
    string,
    string[],
    BigNumber[],
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    _owner: string;
    _keeper: string;
    _borrowers: string[];
    _borrowerWeights: BigNumber[];
    _optionSeller: string;
    _feeRecipient: string;
    _managementFee: BigNumber;
    _performanceFee: BigNumber;
    _tokenName: string;
    _tokenSymbol: string;
  };
}

export declare namespace Vault {
  export type VaultParamsStruct = {
    decimals: BigNumberish;
    asset: string;
    minimumSupply: BigNumberish;
    cap: BigNumberish;
  };

  export type VaultParamsStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber
  ] & {
    decimals: number;
    asset: string;
    minimumSupply: BigNumber;
    cap: BigNumber;
  };

  export type AllocationStateStruct = {
    nextLoanTermLength: BigNumberish;
    nextOptionPurchaseFreq: BigNumberish;
    currentLoanTermLength: BigNumberish;
    currentOptionPurchaseFreq: BigNumberish;
    loanAllocationPCT: BigNumberish;
    optionAllocationPCT: BigNumberish;
    loanAllocation: BigNumberish;
    optionAllocation: BigNumberish;
  };

  export type AllocationStateStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    nextLoanTermLength: number;
    nextOptionPurchaseFreq: number;
    currentLoanTermLength: number;
    currentOptionPurchaseFreq: number;
    loanAllocationPCT: number;
    optionAllocationPCT: number;
    loanAllocation: BigNumber;
    optionAllocation: BigNumber;
  };
}

export interface RibbonEarnVaultInterface extends utils.Interface {
  contractName: "RibbonEarnVault";
  functions: {
    "TOTAL_PCT()": FunctionFragment;
    "USDC()": FunctionFragment;
    "WETH()": FunctionFragment;
    "accountVaultBalance(address)": FunctionFragment;
    "allocationState()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrowerWeights(address)": FunctionFragment;
    "borrowers(uint256)": FunctionFragment;
    "buyOption()": FunctionFragment;
    "cap()": FunctionFragment;
    "commitOptionSeller()": FunctionFragment;
    "completeWithdraw()": FunctionFragment;
    "currentQueuedWithdrawShares()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositETH()": FunctionFragment;
    "depositFor(uint256,address)": FunctionFragment;
    "depositReceipts(address)": FunctionFragment;
    "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize((address,address,address[],uint128[],address,address,uint256,uint256,string,string),(uint8,address,uint56,uint104),(uint32,uint32,uint32,uint32,uint16,uint16,uint256,uint256))": FunctionFragment;
    "initiateWithdraw(uint256)": FunctionFragment;
    "keeper()": FunctionFragment;
    "lastBorrowerBasketChange()": FunctionFragment;
    "lastOptionSellerChange()": FunctionFragment;
    "lastQueuedWithdrawAmount()": FunctionFragment;
    "liquidityGauge()": FunctionFragment;
    "managementFee()": FunctionFragment;
    "maxRedeem()": FunctionFragment;
    "name()": FunctionFragment;
    "optionSeller()": FunctionFragment;
    "owner()": FunctionFragment;
    "pausePosition()": FunctionFragment;
    "payOptionYield(uint256)": FunctionFragment;
    "pendingOptionSeller()": FunctionFragment;
    "performanceFee()": FunctionFragment;
    "pricePerShare()": FunctionFragment;
    "recoverTokens(address,address)": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "returnLentFunds(uint256)": FunctionFragment;
    "rollToNextRound()": FunctionFragment;
    "roundPricePerShare(uint256)": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setLiquidityGauge(address)": FunctionFragment;
    "setLoanAllocationPCT(uint16)": FunctionFragment;
    "setLoanTermLength(uint32)": FunctionFragment;
    "setManagementFee(uint256)": FunctionFragment;
    "setNewKeeper(address)": FunctionFragment;
    "setOptionPurchaseFrequency(uint32)": FunctionFragment;
    "setOptionSeller(address)": FunctionFragment;
    "setPerformanceFee(uint256)": FunctionFragment;
    "setVaultPauser(address)": FunctionFragment;
    "shareBalances(address)": FunctionFragment;
    "shares(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalBorrowerWeight()": FunctionFragment;
    "totalPending()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBorrowerBasket(address[],uint128[])": FunctionFragment;
    "vaultParams()": FunctionFragment;
    "vaultPauser()": FunctionFragment;
    "vaultState()": FunctionFragment;
    "withdrawInstantly(uint256)": FunctionFragment;
    "withdrawals(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "TOTAL_PCT", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountVaultBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allocationState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrowerWeights",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buyOption", values?: undefined): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commitOptionSeller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentQueuedWithdrawShares",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositReceipts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      RibbonEarnVault.InitParamsStruct,
      Vault.VaultParamsStruct,
      Vault.AllocationStateStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastBorrowerBasketChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastOptionSellerChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastQueuedWithdrawAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityGauge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managementFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxRedeem", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "optionSeller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pausePosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payOptionYield",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOptionSeller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnLentFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rollToNextRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundPricePerShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityGauge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanAllocationPCT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanTermLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagementFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewKeeper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptionPurchaseFrequency",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptionSeller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultPauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shareBalances",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [string]): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowerWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPending",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBorrowerBasket",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultPauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInstantly",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdrawals", values: [string]): string;

  decodeFunctionResult(functionFragment: "TOTAL_PCT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocationState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowerWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyOption", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitOptionSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentQueuedWithdrawShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastBorrowerBasketChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastOptionSellerChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastQueuedWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optionSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payOptionYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOptionSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnLentFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollToNextRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundPricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoanAllocationPCT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoanTermLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOptionPurchaseFrequency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOptionSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowerWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBorrowerBasket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInstantly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawals",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BorrowerBasketUpdated(address[],uint128[])": EventFragment;
    "CapSet(uint256,uint256)": EventFragment;
    "CloseLoan(uint256,uint256,address)": EventFragment;
    "CollectVaultFees(uint256,uint256,uint256,address)": EventFragment;
    "CommitBorrowerBasket(uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "InitiateWithdraw(address,uint256,uint256)": EventFragment;
    "InstantWithdraw(address,uint256,uint256)": EventFragment;
    "ManagementFeeSet(uint256,uint256)": EventFragment;
    "NewLoanOptionAllocationSet(uint256,uint256,uint256,uint256)": EventFragment;
    "NewLoanTermLength(uint256,uint256)": EventFragment;
    "NewOptionPurchaseFrequency(uint256,uint256)": EventFragment;
    "OpenLoan(uint256,address)": EventFragment;
    "OptionSellerSet(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PayOptionYield(uint256,uint256,address)": EventFragment;
    "PerformanceFeeSet(uint256,uint256)": EventFragment;
    "PurchaseOption(uint256,address)": EventFragment;
    "Redeem(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowerBasketUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CapSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectVaultFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitBorrowerBasket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiateWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagementFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLoanOptionAllocationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLoanTermLength"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOptionPurchaseFrequency"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OptionSellerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayOptionYield"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PerformanceFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseOption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type BorrowerBasketUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  { borrowers: string[]; borrowerWeights: BigNumber[] }
>;

export type BorrowerBasketUpdatedEventFilter =
  TypedEventFilter<BorrowerBasketUpdatedEvent>;

export type CapSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldCap: BigNumber; newCap: BigNumber }
>;

export type CapSetEventFilter = TypedEventFilter<CapSetEvent>;

export type CloseLoanEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { amount: BigNumber; yield: BigNumber; borrower: string }
>;

export type CloseLoanEventFilter = TypedEventFilter<CloseLoanEvent>;

export type CollectVaultFeesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    performanceFee: BigNumber;
    vaultFee: BigNumber;
    round: BigNumber;
    feeRecipient: string;
  }
>;

export type CollectVaultFeesEventFilter =
  TypedEventFilter<CollectVaultFeesEvent>;

export type CommitBorrowerBasketEvent = TypedEvent<
  [BigNumber],
  { totalBorrowerWeight: BigNumber }
>;

export type CommitBorrowerBasketEventFilter =
  TypedEventFilter<CommitBorrowerBasketEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; amount: BigNumber; round: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type InitiateWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; shares: BigNumber; round: BigNumber }
>;

export type InitiateWithdrawEventFilter =
  TypedEventFilter<InitiateWithdrawEvent>;

export type InstantWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; amount: BigNumber; round: BigNumber }
>;

export type InstantWithdrawEventFilter = TypedEventFilter<InstantWithdrawEvent>;

export type ManagementFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { managementFee: BigNumber; newManagementFee: BigNumber }
>;

export type ManagementFeeSetEventFilter =
  TypedEventFilter<ManagementFeeSetEvent>;

export type NewLoanOptionAllocationSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    oldLoanAllocation: BigNumber;
    oldOptionAllocation: BigNumber;
    newLoanAllocation: BigNumber;
    newOptionAllocation: BigNumber;
  }
>;

export type NewLoanOptionAllocationSetEventFilter =
  TypedEventFilter<NewLoanOptionAllocationSetEvent>;

export type NewLoanTermLengthEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldLoanTermLength: BigNumber; newLoanTermLength: BigNumber }
>;

export type NewLoanTermLengthEventFilter =
  TypedEventFilter<NewLoanTermLengthEvent>;

export type NewOptionPurchaseFrequencyEvent = TypedEvent<
  [BigNumber, BigNumber],
  {
    oldOptionPurchaseFrequency: BigNumber;
    newOptionPurchaseFrequency: BigNumber;
  }
>;

export type NewOptionPurchaseFrequencyEventFilter =
  TypedEventFilter<NewOptionPurchaseFrequencyEvent>;

export type OpenLoanEvent = TypedEvent<
  [BigNumber, string],
  { amount: BigNumber; borrower: string }
>;

export type OpenLoanEventFilter = TypedEventFilter<OpenLoanEvent>;

export type OptionSellerSetEvent = TypedEvent<
  [string, string],
  { oldOptionSeller: string; newOptionSeller: string }
>;

export type OptionSellerSetEventFilter = TypedEventFilter<OptionSellerSetEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PayOptionYieldEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { yield: BigNumber; netYield: BigNumber; seller: string }
>;

export type PayOptionYieldEventFilter = TypedEventFilter<PayOptionYieldEvent>;

export type PerformanceFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { performanceFee: BigNumber; newPerformanceFee: BigNumber }
>;

export type PerformanceFeeSetEventFilter =
  TypedEventFilter<PerformanceFeeSetEvent>;

export type PurchaseOptionEvent = TypedEvent<
  [BigNumber, string],
  { premium: BigNumber; seller: string }
>;

export type PurchaseOptionEventFilter = TypedEventFilter<PurchaseOptionEvent>;

export type RedeemEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; share: BigNumber; round: BigNumber }
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; amount: BigNumber; shares: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface RibbonEarnVault extends BaseContract {
  contractName: "RibbonEarnVault";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RibbonEarnVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TOTAL_PCT(overrides?: CallOverrides): Promise<[number]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allocationState(overrides?: CallOverrides): Promise<
      [number, number, number, number, number, number, BigNumber, BigNumber] & {
        nextLoanTermLength: number;
        nextOptionPurchaseFreq: number;
        currentLoanTermLength: number;
        currentOptionPurchaseFreq: number;
        loanAllocationPCT: number;
        optionAllocationPCT: number;
        loanAllocation: BigNumber;
        optionAllocation: BigNumber;
      }
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowerWeights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        borrowerWeight: BigNumber;
        pendingBorrowerWeight: BigNumber;
      }
    >;

    borrowers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    buyOption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cap(overrides?: CallOverrides): Promise<[BigNumber]>;

    commitOptionSeller(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentQueuedWithdrawShares(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFor(
      amount: BigNumberish,
      creditor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        round: number;
        amount: BigNumber;
        unredeemedShares: BigNumber;
      }
    >;

    depositWithPermit(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _initParams: RibbonEarnVault.InitParamsStruct,
      _vaultParams: Vault.VaultParamsStruct,
      _allocationState: Vault.AllocationStateStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateWithdraw(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    lastBorrowerBasketChange(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastOptionSellerChange(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastQueuedWithdrawAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityGauge(overrides?: CallOverrides): Promise<[string]>;

    managementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    optionSeller(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pausePosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "payOptionYield(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "payOptionYield(uint256,uint256,uint8,bytes32,bytes32)"(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingOptionSeller(overrides?: CallOverrides): Promise<[string]>;

    performanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    pricePerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverTokens(
      token: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "returnLentFunds(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "returnLentFunds(uint256,uint256,uint8,bytes32,bytes32)"(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rollToNextRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roundPricePerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityGauge(
      newLiquidityGauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLoanAllocationPCT(
      _loanAllocationPCT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLoanTermLength(
      _loanTermLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOptionPurchaseFrequency(
      _optionPurchaseFreq: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOptionSeller(
      newOptionSeller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultPauser(
      newVaultPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shareBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        heldByAccount: BigNumber;
        heldByVault: BigNumber;
      }
    >;

    shares(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrowerWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPending(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBorrowerBasket(
      borrowers: string[],
      borrowerWeights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultParams(overrides?: CallOverrides): Promise<
      [number, string, BigNumber, BigNumber] & {
        decimals: number;
        asset: string;
        minimumSupply: BigNumber;
        cap: BigNumber;
      }
    >;

    vaultPauser(overrides?: CallOverrides): Promise<[string]>;

    vaultState(overrides?: CallOverrides): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        round: number;
        lockedAmount: BigNumber;
        lastLockedAmount: BigNumber;
        totalPending: BigNumber;
        queuedWithdrawShares: BigNumber;
        lastEpochTime: BigNumber;
        lastOptionPurchaseTime: BigNumber;
        optionsBoughtInRound: BigNumber;
        amtFundsReturned: BigNumber;
      }
    >;

    withdrawInstantly(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { round: number; shares: BigNumber }>;
  };

  TOTAL_PCT(overrides?: CallOverrides): Promise<number>;

  USDC(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  accountVaultBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allocationState(overrides?: CallOverrides): Promise<
    [number, number, number, number, number, number, BigNumber, BigNumber] & {
      nextLoanTermLength: number;
      nextOptionPurchaseFreq: number;
      currentLoanTermLength: number;
      currentOptionPurchaseFreq: number;
      loanAllocationPCT: number;
      optionAllocationPCT: number;
      loanAllocation: BigNumber;
      optionAllocation: BigNumber;
    }
  >;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowerWeights(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      exists: boolean;
      borrowerWeight: BigNumber;
      pendingBorrowerWeight: BigNumber;
    }
  >;

  borrowers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  buyOption(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cap(overrides?: CallOverrides): Promise<BigNumber>;

  commitOptionSeller(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentQueuedWithdrawShares(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFor(
    amount: BigNumberish,
    creditor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositReceipts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      round: number;
      amount: BigNumber;
      unredeemedShares: BigNumber;
    }
  >;

  depositWithPermit(
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _initParams: RibbonEarnVault.InitParamsStruct,
    _vaultParams: Vault.VaultParamsStruct,
    _allocationState: Vault.AllocationStateStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateWithdraw(
    numShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keeper(overrides?: CallOverrides): Promise<string>;

  lastBorrowerBasketChange(overrides?: CallOverrides): Promise<BigNumber>;

  lastOptionSellerChange(overrides?: CallOverrides): Promise<BigNumber>;

  lastQueuedWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityGauge(overrides?: CallOverrides): Promise<string>;

  managementFee(overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  optionSeller(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pausePosition(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "payOptionYield(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "payOptionYield(uint256,uint256,uint8,bytes32,bytes32)"(
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingOptionSeller(overrides?: CallOverrides): Promise<string>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

  recoverTokens(
    token: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    numShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "returnLentFunds(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "returnLentFunds(uint256,uint256,uint8,bytes32,bytes32)"(
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rollToNextRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roundPricePerShare(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setCap(
    newCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    newFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityGauge(
    newLiquidityGauge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLoanAllocationPCT(
    _loanAllocationPCT: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLoanTermLength(
    _loanTermLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManagementFee(
    newManagementFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewKeeper(
    newKeeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOptionPurchaseFrequency(
    _optionPurchaseFreq: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOptionSeller(
    newOptionSeller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    newPerformanceFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultPauser(
    newVaultPauser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shareBalances(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      heldByAccount: BigNumber;
      heldByVault: BigNumber;
    }
  >;

  shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    numShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrowerWeight(overrides?: CallOverrides): Promise<BigNumber>;

  totalPending(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBorrowerBasket(
    borrowers: string[],
    borrowerWeights: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultParams(overrides?: CallOverrides): Promise<
    [number, string, BigNumber, BigNumber] & {
      decimals: number;
      asset: string;
      minimumSupply: BigNumber;
      cap: BigNumber;
    }
  >;

  vaultPauser(overrides?: CallOverrides): Promise<string>;

  vaultState(overrides?: CallOverrides): Promise<
    [
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      round: number;
      lockedAmount: BigNumber;
      lastLockedAmount: BigNumber;
      totalPending: BigNumber;
      queuedWithdrawShares: BigNumber;
      lastEpochTime: BigNumber;
      lastOptionPurchaseTime: BigNumber;
      optionsBoughtInRound: BigNumber;
      amtFundsReturned: BigNumber;
    }
  >;

  withdrawInstantly(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawals(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { round: number; shares: BigNumber }>;

  callStatic: {
    TOTAL_PCT(overrides?: CallOverrides): Promise<number>;

    USDC(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allocationState(overrides?: CallOverrides): Promise<
      [number, number, number, number, number, number, BigNumber, BigNumber] & {
        nextLoanTermLength: number;
        nextOptionPurchaseFreq: number;
        currentLoanTermLength: number;
        currentOptionPurchaseFreq: number;
        loanAllocationPCT: number;
        optionAllocationPCT: number;
        loanAllocation: BigNumber;
        optionAllocation: BigNumber;
      }
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowerWeights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        exists: boolean;
        borrowerWeight: BigNumber;
        pendingBorrowerWeight: BigNumber;
      }
    >;

    borrowers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    buyOption(overrides?: CallOverrides): Promise<void>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    commitOptionSeller(overrides?: CallOverrides): Promise<void>;

    completeWithdraw(overrides?: CallOverrides): Promise<void>;

    currentQueuedWithdrawShares(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositETH(overrides?: CallOverrides): Promise<void>;

    depositFor(
      amount: BigNumberish,
      creditor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        round: number;
        amount: BigNumber;
        unredeemedShares: BigNumber;
      }
    >;

    depositWithPermit(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _initParams: RibbonEarnVault.InitParamsStruct,
      _vaultParams: Vault.VaultParamsStruct,
      _allocationState: Vault.AllocationStateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateWithdraw(
      numShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    keeper(overrides?: CallOverrides): Promise<string>;

    lastBorrowerBasketChange(overrides?: CallOverrides): Promise<BigNumber>;

    lastOptionSellerChange(overrides?: CallOverrides): Promise<BigNumber>;

    lastQueuedWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityGauge(overrides?: CallOverrides): Promise<string>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    optionSeller(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pausePosition(overrides?: CallOverrides): Promise<void>;

    "payOptionYield(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "payOptionYield(uint256,uint256,uint8,bytes32,bytes32)"(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingOptionSeller(overrides?: CallOverrides): Promise<string>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    recoverTokens(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(numShares: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "returnLentFunds(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "returnLentFunds(uint256,uint256,uint8,bytes32,bytes32)"(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    rollToNextRound(overrides?: CallOverrides): Promise<void>;

    roundPricePerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCap(newCap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityGauge(
      newLiquidityGauge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLoanAllocationPCT(
      _loanAllocationPCT: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLoanTermLength(
      _loanTermLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewKeeper(newKeeper: string, overrides?: CallOverrides): Promise<void>;

    setOptionPurchaseFrequency(
      _optionPurchaseFreq: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOptionSeller(
      newOptionSeller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultPauser(
      newVaultPauser: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shareBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        heldByAccount: BigNumber;
        heldByVault: BigNumber;
      }
    >;

    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    stake(numShares: BigNumberish, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowerWeight(overrides?: CallOverrides): Promise<BigNumber>;

    totalPending(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBorrowerBasket(
      borrowers: string[],
      borrowerWeights: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    vaultParams(overrides?: CallOverrides): Promise<
      [number, string, BigNumber, BigNumber] & {
        decimals: number;
        asset: string;
        minimumSupply: BigNumber;
        cap: BigNumber;
      }
    >;

    vaultPauser(overrides?: CallOverrides): Promise<string>;

    vaultState(overrides?: CallOverrides): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        round: number;
        lockedAmount: BigNumber;
        lastLockedAmount: BigNumber;
        totalPending: BigNumber;
        queuedWithdrawShares: BigNumber;
        lastEpochTime: BigNumber;
        lastOptionPurchaseTime: BigNumber;
        optionsBoughtInRound: BigNumber;
        amtFundsReturned: BigNumber;
      }
    >;

    withdrawInstantly(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { round: number; shares: BigNumber }>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BorrowerBasketUpdated(address[],uint128[])"(
      borrowers?: null,
      borrowerWeights?: null
    ): BorrowerBasketUpdatedEventFilter;
    BorrowerBasketUpdated(
      borrowers?: null,
      borrowerWeights?: null
    ): BorrowerBasketUpdatedEventFilter;

    "CapSet(uint256,uint256)"(oldCap?: null, newCap?: null): CapSetEventFilter;
    CapSet(oldCap?: null, newCap?: null): CapSetEventFilter;

    "CloseLoan(uint256,uint256,address)"(
      amount?: null,
      _yield?: null,
      borrower?: string | null
    ): CloseLoanEventFilter;
    CloseLoan(
      amount?: null,
      _yield?: null,
      borrower?: string | null
    ): CloseLoanEventFilter;

    "CollectVaultFees(uint256,uint256,uint256,address)"(
      performanceFee?: null,
      vaultFee?: null,
      round?: null,
      feeRecipient?: string | null
    ): CollectVaultFeesEventFilter;
    CollectVaultFees(
      performanceFee?: null,
      vaultFee?: null,
      round?: null,
      feeRecipient?: string | null
    ): CollectVaultFeesEventFilter;

    "CommitBorrowerBasket(uint256)"(
      totalBorrowerWeight?: null
    ): CommitBorrowerBasketEventFilter;
    CommitBorrowerBasket(
      totalBorrowerWeight?: null
    ): CommitBorrowerBasketEventFilter;

    "Deposit(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      round?: null
    ): DepositEventFilter;
    Deposit(
      account?: string | null,
      amount?: null,
      round?: null
    ): DepositEventFilter;

    "InitiateWithdraw(address,uint256,uint256)"(
      account?: string | null,
      shares?: null,
      round?: null
    ): InitiateWithdrawEventFilter;
    InitiateWithdraw(
      account?: string | null,
      shares?: null,
      round?: null
    ): InitiateWithdrawEventFilter;

    "InstantWithdraw(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      round?: null
    ): InstantWithdrawEventFilter;
    InstantWithdraw(
      account?: string | null,
      amount?: null,
      round?: null
    ): InstantWithdrawEventFilter;

    "ManagementFeeSet(uint256,uint256)"(
      managementFee?: null,
      newManagementFee?: null
    ): ManagementFeeSetEventFilter;
    ManagementFeeSet(
      managementFee?: null,
      newManagementFee?: null
    ): ManagementFeeSetEventFilter;

    "NewLoanOptionAllocationSet(uint256,uint256,uint256,uint256)"(
      oldLoanAllocation?: null,
      oldOptionAllocation?: null,
      newLoanAllocation?: null,
      newOptionAllocation?: null
    ): NewLoanOptionAllocationSetEventFilter;
    NewLoanOptionAllocationSet(
      oldLoanAllocation?: null,
      oldOptionAllocation?: null,
      newLoanAllocation?: null,
      newOptionAllocation?: null
    ): NewLoanOptionAllocationSetEventFilter;

    "NewLoanTermLength(uint256,uint256)"(
      oldLoanTermLength?: null,
      newLoanTermLength?: null
    ): NewLoanTermLengthEventFilter;
    NewLoanTermLength(
      oldLoanTermLength?: null,
      newLoanTermLength?: null
    ): NewLoanTermLengthEventFilter;

    "NewOptionPurchaseFrequency(uint256,uint256)"(
      oldOptionPurchaseFrequency?: null,
      newOptionPurchaseFrequency?: null
    ): NewOptionPurchaseFrequencyEventFilter;
    NewOptionPurchaseFrequency(
      oldOptionPurchaseFrequency?: null,
      newOptionPurchaseFrequency?: null
    ): NewOptionPurchaseFrequencyEventFilter;

    "OpenLoan(uint256,address)"(
      amount?: null,
      borrower?: string | null
    ): OpenLoanEventFilter;
    OpenLoan(amount?: null, borrower?: string | null): OpenLoanEventFilter;

    "OptionSellerSet(address,address)"(
      oldOptionSeller?: null,
      newOptionSeller?: null
    ): OptionSellerSetEventFilter;
    OptionSellerSet(
      oldOptionSeller?: null,
      newOptionSeller?: null
    ): OptionSellerSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PayOptionYield(uint256,uint256,address)"(
      _yield?: null,
      netYield?: null,
      seller?: string | null
    ): PayOptionYieldEventFilter;
    PayOptionYield(
      _yield?: null,
      netYield?: null,
      seller?: string | null
    ): PayOptionYieldEventFilter;

    "PerformanceFeeSet(uint256,uint256)"(
      performanceFee?: null,
      newPerformanceFee?: null
    ): PerformanceFeeSetEventFilter;
    PerformanceFeeSet(
      performanceFee?: null,
      newPerformanceFee?: null
    ): PerformanceFeeSetEventFilter;

    "PurchaseOption(uint256,address)"(
      premium?: null,
      seller?: string | null
    ): PurchaseOptionEventFilter;
    PurchaseOption(
      premium?: null,
      seller?: string | null
    ): PurchaseOptionEventFilter;

    "Redeem(address,uint256,uint256)"(
      account?: string | null,
      share?: null,
      round?: null
    ): RedeemEventFilter;
    Redeem(
      account?: string | null,
      share?: null,
      round?: null
    ): RedeemEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Withdraw(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: string | null,
      amount?: null,
      shares?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    TOTAL_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allocationState(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowerWeights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyOption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    commitOptionSeller(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentQueuedWithdrawShares(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFor(
      amount: BigNumberish,
      creditor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositWithPermit(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _initParams: RibbonEarnVault.InitParamsStruct,
      _vaultParams: Vault.VaultParamsStruct,
      _allocationState: Vault.AllocationStateStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateWithdraw(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    lastBorrowerBasketChange(overrides?: CallOverrides): Promise<BigNumber>;

    lastOptionSellerChange(overrides?: CallOverrides): Promise<BigNumber>;

    lastQueuedWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityGauge(overrides?: CallOverrides): Promise<BigNumber>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    optionSeller(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pausePosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "payOptionYield(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "payOptionYield(uint256,uint256,uint8,bytes32,bytes32)"(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingOptionSeller(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    recoverTokens(
      token: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "returnLentFunds(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "returnLentFunds(uint256,uint256,uint8,bytes32,bytes32)"(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rollToNextRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roundPricePerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityGauge(
      newLiquidityGauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLoanAllocationPCT(
      _loanAllocationPCT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLoanTermLength(
      _loanTermLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOptionPurchaseFrequency(
      _optionPurchaseFreq: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOptionSeller(
      newOptionSeller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultPauser(
      newVaultPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shareBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowerWeight(overrides?: CallOverrides): Promise<BigNumber>;

    totalPending(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBorrowerBasket(
      borrowers: string[],
      borrowerWeights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultParams(overrides?: CallOverrides): Promise<BigNumber>;

    vaultPauser(overrides?: CallOverrides): Promise<BigNumber>;

    vaultState(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawInstantly(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TOTAL_PCT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocationState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowerWeights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyOption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitOptionSeller(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentQueuedWithdrawShares(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFor(
      amount: BigNumberish,
      creditor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _initParams: RibbonEarnVault.InitParamsStruct,
      _vaultParams: Vault.VaultParamsStruct,
      _allocationState: Vault.AllocationStateStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateWithdraw(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastBorrowerBasketChange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastOptionSellerChange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastQueuedWithdrawAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityGauge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionSeller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausePosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "payOptionYield(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "payOptionYield(uint256,uint256,uint8,bytes32,bytes32)"(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingOptionSeller(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverTokens(
      token: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "returnLentFunds(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "returnLentFunds(uint256,uint256,uint8,bytes32,bytes32)"(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rollToNextRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roundPricePerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityGauge(
      newLiquidityGauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLoanAllocationPCT(
      _loanAllocationPCT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLoanTermLength(
      _loanTermLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOptionPurchaseFrequency(
      _optionPurchaseFreq: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOptionSeller(
      newOptionSeller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultPauser(
      newVaultPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shareBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shares(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrowerWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPending(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBorrowerBasket(
      borrowers: string[],
      borrowerWeights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultPauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawInstantly(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
