/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Vault {
  export type VaultParamsStruct = {
    isPut: boolean;
    decimals: BigNumberish;
    asset: string;
    underlying: string;
    minimumSupply: BigNumberish;
    cap: BigNumberish;
  };

  export type VaultParamsStructOutput = [
    boolean,
    number,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    isPut: boolean;
    decimals: number;
    asset: string;
    underlying: string;
    minimumSupply: BigNumber;
    cap: BigNumber;
  };
}

export interface RibbonV2stETHThetaVaultInterface extends utils.Interface {
  contractName: "RibbonV2stETHThetaVault";
  functions: {
    "DELAY()": FunctionFragment;
    "GAMMA_CONTROLLER()": FunctionFragment;
    "GNOSIS_EASY_AUCTION()": FunctionFragment;
    "LDO()": FunctionFragment;
    "MARGIN_POOL()": FunctionFragment;
    "OTOKEN_FACTORY()": FunctionFragment;
    "PERIOD()": FunctionFragment;
    "STETH()": FunctionFragment;
    "USDC()": FunctionFragment;
    "WETH()": FunctionFragment;
    "accountVaultBalance(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "auctionDuration()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burnRemainingOTokens()": FunctionFragment;
    "cap()": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "commitAndClose()": FunctionFragment;
    "completeWithdraw()": FunctionFragment;
    "currentOption()": FunctionFragment;
    "currentOtokenPremium()": FunctionFragment;
    "currentQueuedWithdrawShares()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "depositETH()": FunctionFragment;
    "depositFor(address)": FunctionFragment;
    "depositReceipts(address)": FunctionFragment;
    "depositYieldToken(uint256)": FunctionFragment;
    "depositYieldTokenFor(uint256,address)": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initRounds(uint256)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,(bool,uint8,address,address,uint56,uint104))": FunctionFragment;
    "initiateWithdraw(uint256)": FunctionFragment;
    "keeper()": FunctionFragment;
    "lastQueuedWithdrawAmount()": FunctionFragment;
    "lastStrikeOverrideRound()": FunctionFragment;
    "liquidityGauge()": FunctionFragment;
    "managementFee()": FunctionFragment;
    "maxRedeem()": FunctionFragment;
    "name()": FunctionFragment;
    "nextOption()": FunctionFragment;
    "nextOptionReadyAt()": FunctionFragment;
    "optionAuctionID()": FunctionFragment;
    "optionState()": FunctionFragment;
    "optionsPremiumPricer()": FunctionFragment;
    "overriddenStrikePrice()": FunctionFragment;
    "owner()": FunctionFragment;
    "pausePosition()": FunctionFragment;
    "performanceFee()": FunctionFragment;
    "premiumDiscount()": FunctionFragment;
    "pricePerShare()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rollToNextOption()": FunctionFragment;
    "roundPricePerShare(uint256)": FunctionFragment;
    "sendLDORewards()": FunctionFragment;
    "setAuctionDuration(uint256)": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setLiquidityGauge(address)": FunctionFragment;
    "setManagementFee(uint256)": FunctionFragment;
    "setMinPrice(uint256)": FunctionFragment;
    "setNewKeeper(address)": FunctionFragment;
    "setPerformanceFee(uint256)": FunctionFragment;
    "setPremiumDiscount(uint256)": FunctionFragment;
    "setStrikePrice(uint128)": FunctionFragment;
    "setStrikeSelectionOrPricer(address,bool)": FunctionFragment;
    "setVaultPauser(address)": FunctionFragment;
    "shareBalances(address)": FunctionFragment;
    "shares(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "startAuction()": FunctionFragment;
    "strikeSelection()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalPending()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vaultParams()": FunctionFragment;
    "vaultPauser()": FunctionFragment;
    "vaultState()": FunctionFragment;
    "withdrawInstantly(uint256,uint256)": FunctionFragment;
    "withdrawals(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DELAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GAMMA_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GNOSIS_EASY_AUCTION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LDO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MARGIN_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OTOKEN_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PERIOD", values?: undefined): string;
  encodeFunctionData(functionFragment: "STETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountVaultBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnRemainingOTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitAndClose",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentOtokenPremium",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentQueuedWithdrawShares",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "depositFor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositReceipts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositYieldToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositYieldTokenFor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initRounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      Vault.VaultParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastQueuedWithdrawAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastStrikeOverrideRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityGauge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managementFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxRedeem", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOptionReadyAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionAuctionID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionsPremiumPricer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "overriddenStrikePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pausePosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "premiumDiscount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollToNextOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundPricePerShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendLDORewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityGauge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagementFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewKeeper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPremiumDiscount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrikePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrikeSelectionOrPricer",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultPauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shareBalances",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [string]): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "startAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strikeSelection",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPending",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultPauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInstantly",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdrawals", values: [string]): string;

  decodeFunctionResult(functionFragment: "DELAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GAMMA_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GNOSIS_EASY_AUCTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LDO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MARGIN_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OTOKEN_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PERIOD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "STETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnRemainingOTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitAndClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOtokenPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentQueuedWithdrawShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositYieldToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositYieldTokenFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initRounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastQueuedWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastStrikeOverrideRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextOption", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextOptionReadyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionAuctionID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionsPremiumPricer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overriddenStrikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "premiumDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollToNextOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundPricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendLDORewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrikeSelectionOrPricer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strikeSelection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInstantly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawals",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AuctionDurationSet(uint256,uint256)": EventFragment;
    "CapSet(uint256,uint256)": EventFragment;
    "CloseShort(address,uint256,address)": EventFragment;
    "CollectVaultFees(uint256,uint256,uint256,address)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "InitiateGnosisAuction(address,address,uint256,address)": EventFragment;
    "InitiateWithdraw(address,uint256,uint256)": EventFragment;
    "InstantWithdraw(address,uint256,uint256)": EventFragment;
    "ManagementFeeSet(uint256,uint256)": EventFragment;
    "NewOptionStrikeSelected(uint256,uint256)": EventFragment;
    "OpenShort(address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PerformanceFeeSet(uint256,uint256)": EventFragment;
    "PremiumDiscountSet(uint256,uint256)": EventFragment;
    "Redeem(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionDurationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CapSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseShort"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectVaultFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiateGnosisAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiateWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagementFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOptionStrikeSelected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenShort"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PerformanceFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumDiscountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type AuctionDurationSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { auctionDuration: BigNumber; newAuctionDuration: BigNumber }
>;

export type AuctionDurationSetEventFilter =
  TypedEventFilter<AuctionDurationSetEvent>;

export type CapSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldCap: BigNumber; newCap: BigNumber }
>;

export type CapSetEventFilter = TypedEventFilter<CapSetEvent>;

export type CloseShortEvent = TypedEvent<
  [string, BigNumber, string],
  { options: string; withdrawAmount: BigNumber; manager: string }
>;

export type CloseShortEventFilter = TypedEventFilter<CloseShortEvent>;

export type CollectVaultFeesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    performanceFee: BigNumber;
    vaultFee: BigNumber;
    round: BigNumber;
    feeRecipient: string;
  }
>;

export type CollectVaultFeesEventFilter =
  TypedEventFilter<CollectVaultFeesEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; amount: BigNumber; round: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type InitiateGnosisAuctionEvent = TypedEvent<
  [string, string, BigNumber, string],
  {
    auctioningToken: string;
    biddingToken: string;
    auctionCounter: BigNumber;
    manager: string;
  }
>;

export type InitiateGnosisAuctionEventFilter =
  TypedEventFilter<InitiateGnosisAuctionEvent>;

export type InitiateWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; shares: BigNumber; round: BigNumber }
>;

export type InitiateWithdrawEventFilter =
  TypedEventFilter<InitiateWithdrawEvent>;

export type InstantWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; amount: BigNumber; round: BigNumber }
>;

export type InstantWithdrawEventFilter = TypedEventFilter<InstantWithdrawEvent>;

export type ManagementFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { managementFee: BigNumber; newManagementFee: BigNumber }
>;

export type ManagementFeeSetEventFilter =
  TypedEventFilter<ManagementFeeSetEvent>;

export type NewOptionStrikeSelectedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { strikePrice: BigNumber; delta: BigNumber }
>;

export type NewOptionStrikeSelectedEventFilter =
  TypedEventFilter<NewOptionStrikeSelectedEvent>;

export type OpenShortEvent = TypedEvent<
  [string, BigNumber, string],
  { options: string; depositAmount: BigNumber; manager: string }
>;

export type OpenShortEventFilter = TypedEventFilter<OpenShortEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PerformanceFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { performanceFee: BigNumber; newPerformanceFee: BigNumber }
>;

export type PerformanceFeeSetEventFilter =
  TypedEventFilter<PerformanceFeeSetEvent>;

export type PremiumDiscountSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { premiumDiscount: BigNumber; newPremiumDiscount: BigNumber }
>;

export type PremiumDiscountSetEventFilter =
  TypedEventFilter<PremiumDiscountSetEvent>;

export type RedeemEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; share: BigNumber; round: BigNumber }
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; amount: BigNumber; shares: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface RibbonV2stETHThetaVault extends BaseContract {
  contractName: "RibbonV2stETHThetaVault";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RibbonV2stETHThetaVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    GAMMA_CONTROLLER(overrides?: CallOverrides): Promise<[string]>;

    GNOSIS_EASY_AUCTION(overrides?: CallOverrides): Promise<[string]>;

    LDO(overrides?: CallOverrides): Promise<[string]>;

    MARGIN_POOL(overrides?: CallOverrides): Promise<[string]>;

    OTOKEN_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    STETH(overrides?: CallOverrides): Promise<[string]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctionDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burnRemainingOTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cap(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    commitAndClose(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentOption(overrides?: CallOverrides): Promise<[string]>;

    currentOtokenPremium(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentQueuedWithdrawShares(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFor(
      creditor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        round: number;
        amount: BigNumber;
        unredeemedShares: BigNumber;
      }
    >;

    depositYieldToken(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositYieldTokenFor(
      amount: BigNumberish,
      creditor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initRounds(
      numRounds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _owner: string,
      _keeper: string,
      _feeRecipient: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      _optionsPremiumPricer: string,
      _strikeSelection: string,
      _premiumDiscount: BigNumberish,
      _auctionDuration: BigNumberish,
      _vaultParams: Vault.VaultParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateWithdraw(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    lastQueuedWithdrawAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastStrikeOverrideRound(overrides?: CallOverrides): Promise<[number]>;

    liquidityGauge(overrides?: CallOverrides): Promise<[string]>;

    managementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextOption(overrides?: CallOverrides): Promise<[string]>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    optionAuctionID(overrides?: CallOverrides): Promise<[BigNumber]>;

    optionState(overrides?: CallOverrides): Promise<
      [string, string, number] & {
        nextOption: string;
        currentOption: string;
        nextOptionReadyAt: number;
      }
    >;

    optionsPremiumPricer(overrides?: CallOverrides): Promise<[string]>;

    overriddenStrikePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pausePosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    premiumDiscount(overrides?: CallOverrides): Promise<[BigNumber]>;

    pricePerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rollToNextOption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roundPricePerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sendLDORewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionDuration(
      newAuctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityGauge(
      newLiquidityGauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPrice(
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPremiumDiscount(
      newPremiumDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrikePrice(
      strikePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrikeSelectionOrPricer(
      newContract: string,
      isStrikeSelection: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultPauser(
      newVaultPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shareBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        heldByAccount: BigNumber;
        heldByVault: BigNumber;
      }
    >;

    shares(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strikeSelection(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPending(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultParams(overrides?: CallOverrides): Promise<
      [boolean, number, string, string, BigNumber, BigNumber] & {
        isPut: boolean;
        decimals: number;
        asset: string;
        underlying: string;
        minimumSupply: BigNumber;
        cap: BigNumber;
      }
    >;

    vaultPauser(overrides?: CallOverrides): Promise<[string]>;

    vaultState(overrides?: CallOverrides): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        round: number;
        lockedAmount: BigNumber;
        lastLockedAmount: BigNumber;
        totalPending: BigNumber;
        queuedWithdrawShares: BigNumber;
      }
    >;

    withdrawInstantly(
      amount: BigNumberish,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { round: number; shares: BigNumber }>;
  };

  DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  GAMMA_CONTROLLER(overrides?: CallOverrides): Promise<string>;

  GNOSIS_EASY_AUCTION(overrides?: CallOverrides): Promise<string>;

  LDO(overrides?: CallOverrides): Promise<string>;

  MARGIN_POOL(overrides?: CallOverrides): Promise<string>;

  OTOKEN_FACTORY(overrides?: CallOverrides): Promise<string>;

  PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  STETH(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  accountVaultBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burnRemainingOTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cap(overrides?: CallOverrides): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  commitAndClose(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentOption(overrides?: CallOverrides): Promise<string>;

  currentOtokenPremium(overrides?: CallOverrides): Promise<BigNumber>;

  currentQueuedWithdrawShares(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFor(
    creditor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositReceipts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      round: number;
      amount: BigNumber;
      unredeemedShares: BigNumber;
    }
  >;

  depositYieldToken(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositYieldTokenFor(
    amount: BigNumberish,
    creditor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initRounds(
    numRounds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _owner: string,
    _keeper: string,
    _feeRecipient: string,
    _managementFee: BigNumberish,
    _performanceFee: BigNumberish,
    _tokenName: string,
    _tokenSymbol: string,
    _optionsPremiumPricer: string,
    _strikeSelection: string,
    _premiumDiscount: BigNumberish,
    _auctionDuration: BigNumberish,
    _vaultParams: Vault.VaultParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateWithdraw(
    numShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keeper(overrides?: CallOverrides): Promise<string>;

  lastQueuedWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

  lastStrikeOverrideRound(overrides?: CallOverrides): Promise<number>;

  liquidityGauge(overrides?: CallOverrides): Promise<string>;

  managementFee(overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nextOption(overrides?: CallOverrides): Promise<string>;

  nextOptionReadyAt(overrides?: CallOverrides): Promise<BigNumber>;

  optionAuctionID(overrides?: CallOverrides): Promise<BigNumber>;

  optionState(overrides?: CallOverrides): Promise<
    [string, string, number] & {
      nextOption: string;
      currentOption: string;
      nextOptionReadyAt: number;
    }
  >;

  optionsPremiumPricer(overrides?: CallOverrides): Promise<string>;

  overriddenStrikePrice(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pausePosition(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  premiumDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    numShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rollToNextOption(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roundPricePerShare(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sendLDORewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionDuration(
    newAuctionDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCap(
    newCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    newFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityGauge(
    newLiquidityGauge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManagementFee(
    newManagementFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPrice(
    minPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewKeeper(
    newKeeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    newPerformanceFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPremiumDiscount(
    newPremiumDiscount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrikePrice(
    strikePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrikeSelectionOrPricer(
    newContract: string,
    isStrikeSelection: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultPauser(
    newVaultPauser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shareBalances(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      heldByAccount: BigNumber;
      heldByVault: BigNumber;
    }
  >;

  shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    numShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startAuction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strikeSelection(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalPending(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultParams(overrides?: CallOverrides): Promise<
    [boolean, number, string, string, BigNumber, BigNumber] & {
      isPut: boolean;
      decimals: number;
      asset: string;
      underlying: string;
      minimumSupply: BigNumber;
      cap: BigNumber;
    }
  >;

  vaultPauser(overrides?: CallOverrides): Promise<string>;

  vaultState(overrides?: CallOverrides): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      round: number;
      lockedAmount: BigNumber;
      lastLockedAmount: BigNumber;
      totalPending: BigNumber;
      queuedWithdrawShares: BigNumber;
    }
  >;

  withdrawInstantly(
    amount: BigNumberish,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawals(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { round: number; shares: BigNumber }>;

  callStatic: {
    DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    GAMMA_CONTROLLER(overrides?: CallOverrides): Promise<string>;

    GNOSIS_EASY_AUCTION(overrides?: CallOverrides): Promise<string>;

    LDO(overrides?: CallOverrides): Promise<string>;

    MARGIN_POOL(overrides?: CallOverrides): Promise<string>;

    OTOKEN_FACTORY(overrides?: CallOverrides): Promise<string>;

    PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    STETH(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnRemainingOTokens(overrides?: CallOverrides): Promise<void>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    commitAndClose(overrides?: CallOverrides): Promise<void>;

    completeWithdraw(overrides?: CallOverrides): Promise<void>;

    currentOption(overrides?: CallOverrides): Promise<string>;

    currentOtokenPremium(overrides?: CallOverrides): Promise<BigNumber>;

    currentQueuedWithdrawShares(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositETH(overrides?: CallOverrides): Promise<void>;

    depositFor(creditor: string, overrides?: CallOverrides): Promise<void>;

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        round: number;
        amount: BigNumber;
        unredeemedShares: BigNumber;
      }
    >;

    depositYieldToken(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositYieldTokenFor(
      amount: BigNumberish,
      creditor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initRounds(
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _owner: string,
      _keeper: string,
      _feeRecipient: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      _optionsPremiumPricer: string,
      _strikeSelection: string,
      _premiumDiscount: BigNumberish,
      _auctionDuration: BigNumberish,
      _vaultParams: Vault.VaultParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateWithdraw(
      numShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    keeper(overrides?: CallOverrides): Promise<string>;

    lastQueuedWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lastStrikeOverrideRound(overrides?: CallOverrides): Promise<number>;

    liquidityGauge(overrides?: CallOverrides): Promise<string>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nextOption(overrides?: CallOverrides): Promise<string>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<BigNumber>;

    optionAuctionID(overrides?: CallOverrides): Promise<BigNumber>;

    optionState(overrides?: CallOverrides): Promise<
      [string, string, number] & {
        nextOption: string;
        currentOption: string;
        nextOptionReadyAt: number;
      }
    >;

    optionsPremiumPricer(overrides?: CallOverrides): Promise<string>;

    overriddenStrikePrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pausePosition(overrides?: CallOverrides): Promise<void>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    premiumDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(numShares: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rollToNextOption(overrides?: CallOverrides): Promise<void>;

    roundPricePerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendLDORewards(overrides?: CallOverrides): Promise<void>;

    setAuctionDuration(
      newAuctionDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCap(newCap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityGauge(
      newLiquidityGauge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPrice(
      minPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewKeeper(newKeeper: string, overrides?: CallOverrides): Promise<void>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPremiumDiscount(
      newPremiumDiscount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrikePrice(
      strikePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrikeSelectionOrPricer(
      newContract: string,
      isStrikeSelection: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultPauser(
      newVaultPauser: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shareBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        heldByAccount: BigNumber;
        heldByVault: BigNumber;
      }
    >;

    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    stake(numShares: BigNumberish, overrides?: CallOverrides): Promise<void>;

    startAuction(overrides?: CallOverrides): Promise<void>;

    strikeSelection(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalPending(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultParams(overrides?: CallOverrides): Promise<
      [boolean, number, string, string, BigNumber, BigNumber] & {
        isPut: boolean;
        decimals: number;
        asset: string;
        underlying: string;
        minimumSupply: BigNumber;
        cap: BigNumber;
      }
    >;

    vaultPauser(overrides?: CallOverrides): Promise<string>;

    vaultState(overrides?: CallOverrides): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        round: number;
        lockedAmount: BigNumber;
        lastLockedAmount: BigNumber;
        totalPending: BigNumber;
        queuedWithdrawShares: BigNumber;
      }
    >;

    withdrawInstantly(
      amount: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { round: number; shares: BigNumber }>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "AuctionDurationSet(uint256,uint256)"(
      auctionDuration?: null,
      newAuctionDuration?: null
    ): AuctionDurationSetEventFilter;
    AuctionDurationSet(
      auctionDuration?: null,
      newAuctionDuration?: null
    ): AuctionDurationSetEventFilter;

    "CapSet(uint256,uint256)"(oldCap?: null, newCap?: null): CapSetEventFilter;
    CapSet(oldCap?: null, newCap?: null): CapSetEventFilter;

    "CloseShort(address,uint256,address)"(
      options?: string | null,
      withdrawAmount?: null,
      manager?: string | null
    ): CloseShortEventFilter;
    CloseShort(
      options?: string | null,
      withdrawAmount?: null,
      manager?: string | null
    ): CloseShortEventFilter;

    "CollectVaultFees(uint256,uint256,uint256,address)"(
      performanceFee?: null,
      vaultFee?: null,
      round?: null,
      feeRecipient?: string | null
    ): CollectVaultFeesEventFilter;
    CollectVaultFees(
      performanceFee?: null,
      vaultFee?: null,
      round?: null,
      feeRecipient?: string | null
    ): CollectVaultFeesEventFilter;

    "Deposit(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      round?: null
    ): DepositEventFilter;
    Deposit(
      account?: string | null,
      amount?: null,
      round?: null
    ): DepositEventFilter;

    "InitiateGnosisAuction(address,address,uint256,address)"(
      auctioningToken?: string | null,
      biddingToken?: string | null,
      auctionCounter?: null,
      manager?: string | null
    ): InitiateGnosisAuctionEventFilter;
    InitiateGnosisAuction(
      auctioningToken?: string | null,
      biddingToken?: string | null,
      auctionCounter?: null,
      manager?: string | null
    ): InitiateGnosisAuctionEventFilter;

    "InitiateWithdraw(address,uint256,uint256)"(
      account?: string | null,
      shares?: null,
      round?: null
    ): InitiateWithdrawEventFilter;
    InitiateWithdraw(
      account?: string | null,
      shares?: null,
      round?: null
    ): InitiateWithdrawEventFilter;

    "InstantWithdraw(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      round?: null
    ): InstantWithdrawEventFilter;
    InstantWithdraw(
      account?: string | null,
      amount?: null,
      round?: null
    ): InstantWithdrawEventFilter;

    "ManagementFeeSet(uint256,uint256)"(
      managementFee?: null,
      newManagementFee?: null
    ): ManagementFeeSetEventFilter;
    ManagementFeeSet(
      managementFee?: null,
      newManagementFee?: null
    ): ManagementFeeSetEventFilter;

    "NewOptionStrikeSelected(uint256,uint256)"(
      strikePrice?: null,
      delta?: null
    ): NewOptionStrikeSelectedEventFilter;
    NewOptionStrikeSelected(
      strikePrice?: null,
      delta?: null
    ): NewOptionStrikeSelectedEventFilter;

    "OpenShort(address,uint256,address)"(
      options?: string | null,
      depositAmount?: null,
      manager?: string | null
    ): OpenShortEventFilter;
    OpenShort(
      options?: string | null,
      depositAmount?: null,
      manager?: string | null
    ): OpenShortEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PerformanceFeeSet(uint256,uint256)"(
      performanceFee?: null,
      newPerformanceFee?: null
    ): PerformanceFeeSetEventFilter;
    PerformanceFeeSet(
      performanceFee?: null,
      newPerformanceFee?: null
    ): PerformanceFeeSetEventFilter;

    "PremiumDiscountSet(uint256,uint256)"(
      premiumDiscount?: null,
      newPremiumDiscount?: null
    ): PremiumDiscountSetEventFilter;
    PremiumDiscountSet(
      premiumDiscount?: null,
      newPremiumDiscount?: null
    ): PremiumDiscountSetEventFilter;

    "Redeem(address,uint256,uint256)"(
      account?: string | null,
      share?: null,
      round?: null
    ): RedeemEventFilter;
    Redeem(
      account?: string | null,
      share?: null,
      round?: null
    ): RedeemEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Withdraw(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: string | null,
      amount?: null,
      shares?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    GAMMA_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    GNOSIS_EASY_AUCTION(overrides?: CallOverrides): Promise<BigNumber>;

    LDO(overrides?: CallOverrides): Promise<BigNumber>;

    MARGIN_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    OTOKEN_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    STETH(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnRemainingOTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    commitAndClose(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentOption(overrides?: CallOverrides): Promise<BigNumber>;

    currentOtokenPremium(overrides?: CallOverrides): Promise<BigNumber>;

    currentQueuedWithdrawShares(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFor(
      creditor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositYieldToken(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositYieldTokenFor(
      amount: BigNumberish,
      creditor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initRounds(
      numRounds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _keeper: string,
      _feeRecipient: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      _optionsPremiumPricer: string,
      _strikeSelection: string,
      _premiumDiscount: BigNumberish,
      _auctionDuration: BigNumberish,
      _vaultParams: Vault.VaultParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateWithdraw(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    lastQueuedWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lastStrikeOverrideRound(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityGauge(overrides?: CallOverrides): Promise<BigNumber>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextOption(overrides?: CallOverrides): Promise<BigNumber>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<BigNumber>;

    optionAuctionID(overrides?: CallOverrides): Promise<BigNumber>;

    optionState(overrides?: CallOverrides): Promise<BigNumber>;

    optionsPremiumPricer(overrides?: CallOverrides): Promise<BigNumber>;

    overriddenStrikePrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pausePosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    premiumDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rollToNextOption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roundPricePerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendLDORewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionDuration(
      newAuctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityGauge(
      newLiquidityGauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPrice(
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPremiumDiscount(
      newPremiumDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrikePrice(
      strikePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrikeSelectionOrPricer(
      newContract: string,
      isStrikeSelection: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultPauser(
      newVaultPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shareBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strikeSelection(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalPending(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultParams(overrides?: CallOverrides): Promise<BigNumber>;

    vaultPauser(overrides?: CallOverrides): Promise<BigNumber>;

    vaultState(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawInstantly(
      amount: BigNumberish,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GAMMA_CONTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GNOSIS_EASY_AUCTION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LDO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MARGIN_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OTOKEN_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctionDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnRemainingOTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitAndClose(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentOption(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentOtokenPremium(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentQueuedWithdrawShares(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFor(
      creditor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositYieldToken(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositYieldTokenFor(
      amount: BigNumberish,
      creditor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initRounds(
      numRounds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _keeper: string,
      _feeRecipient: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      _optionsPremiumPricer: string,
      _strikeSelection: string,
      _premiumDiscount: BigNumberish,
      _auctionDuration: BigNumberish,
      _vaultParams: Vault.VaultParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateWithdraw(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastQueuedWithdrawAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastStrikeOverrideRound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityGauge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOption(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionAuctionID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionsPremiumPricer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overriddenStrikePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausePosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    premiumDiscount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rollToNextOption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roundPricePerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendLDORewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionDuration(
      newAuctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityGauge(
      newLiquidityGauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPrice(
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumDiscount(
      newPremiumDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrikePrice(
      strikePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrikeSelectionOrPricer(
      newContract: string,
      isStrikeSelection: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultPauser(
      newVaultPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shareBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shares(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      numShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strikeSelection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPending(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultPauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawInstantly(
      amount: BigNumberish,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
