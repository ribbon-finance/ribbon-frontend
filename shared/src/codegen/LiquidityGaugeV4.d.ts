/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LiquidityGaugeV4Interface extends ethers.utils.Interface {
  functions: {
    "decimals()": FunctionFragment;
    "integrate_checkpoint()": FunctionFragment;
    "user_checkpoint(address)": FunctionFragment;
    "claimable_tokens(address)": FunctionFragment;
    "claimed_reward(address,address)": FunctionFragment;
    "claimable_reward(address,address)": FunctionFragment;
    "set_rewards_receiver(address)": FunctionFragment;
    "claim_rewards()": FunctionFragment;
    "kick(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "add_reward(address,address)": FunctionFragment;
    "set_reward_distributor(address,address)": FunctionFragment;
    "deposit_reward_token(address,uint256)": FunctionFragment;
    "set_killed(bool)": FunctionFragment;
    "commit_transfer_ownership(address)": FunctionFragment;
    "accept_transfer_ownership()": FunctionFragment;
    "minter()": FunctionFragment;
    "crv_token()": FunctionFragment;
    "controller()": FunctionFragment;
    "voting_escrow()": FunctionFragment;
    "veboost_proxy()": FunctionFragment;
    "lp_token()": FunctionFragment;
    "future_epoch_time()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "symbol()": FunctionFragment;
    "working_balances(address)": FunctionFragment;
    "working_supply()": FunctionFragment;
    "period()": FunctionFragment;
    "period_timestamp(uint256)": FunctionFragment;
    "integrate_inv_supply(uint256)": FunctionFragment;
    "integrate_inv_supply_of(address)": FunctionFragment;
    "integrate_checkpoint_of(address)": FunctionFragment;
    "integrate_fraction(address)": FunctionFragment;
    "inflation_rate()": FunctionFragment;
    "reward_count()": FunctionFragment;
    "reward_tokens(uint256)": FunctionFragment;
    "reward_data(address)": FunctionFragment;
    "rewards_receiver(address)": FunctionFragment;
    "reward_integral_for(address,address)": FunctionFragment;
    "admin()": FunctionFragment;
    "future_admin()": FunctionFragment;
    "is_killed()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "integrate_checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "user_checkpoint",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable_tokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed_reward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable_reward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_rewards_receiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claim_rewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kick", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "add_reward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_reward_distributor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit_reward_token",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "set_killed", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "commit_transfer_ownership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "accept_transfer_ownership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "crv_token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voting_escrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "veboost_proxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lp_token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "future_epoch_time",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "working_balances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "working_supply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "period_timestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_inv_supply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_inv_supply_of",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_checkpoint_of",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_fraction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "inflation_rate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward_tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reward_data", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewards_receiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reward_integral_for",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "future_admin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "is_killed", values?: undefined): string;

  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "integrate_checkpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_checkpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimable_tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimed_reward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimable_reward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_rewards_receiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claim_rewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add_reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_reward_distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit_reward_token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_killed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commit_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accept_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crv_token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voting_escrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "veboost_proxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lp_token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_epoch_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "working_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "working_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "period_timestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_inv_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_inv_supply_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_checkpoint_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_fraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inflation_rate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_data",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewards_receiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_integral_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "is_killed", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "UpdateLiquidityLimit(address,uint256,uint256,uint256,uint256)": EventFragment;
    "CommitOwnership(address)": EventFragment;
    "ApplyOwnership(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLiquidityLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplyOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
}

export class LiquidityGaugeV4 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LiquidityGaugeV4Interface;

  functions: {
    decimals(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "integrate_checkpoint()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    user_checkpoint(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "user_checkpoint(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimable_tokens(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimable_tokens(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimed_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "claimed_reward(address,address)"(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claimable_reward(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "claimable_reward(address,address)"(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set_rewards_receiver(address)"(
      _receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim_rewards()"(overrides?: Overrides): Promise<ContractTransaction>;

    "claim_rewards(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim_rewards(address,address)"(
      _addr: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    kick(addr: string, overrides?: Overrides): Promise<ContractTransaction>;

    "kick(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      _addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,address,bool)"(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,bool)"(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add_reward(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set_reward_distributor(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit_reward_token(address,uint256)"(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    set_killed(
      _is_killed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set_killed(bool)"(
      _is_killed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commit_transfer_ownership(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    accept_transfer_ownership(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "accept_transfer_ownership()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    minter(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "minter()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    crv_token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "crv_token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    controller(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "controller()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    voting_escrow(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "voting_escrow()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    veboost_proxy(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "veboost_proxy()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    lp_token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "lp_token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    future_epoch_time(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "future_epoch_time()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "working_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    working_supply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "working_supply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    period(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "period()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "period_timestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "integrate_inv_supply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "integrate_inv_supply_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "integrate_checkpoint_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "integrate_fraction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    inflation_rate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "inflation_rate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    reward_count(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "reward_count()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    reward_tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "reward_tokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    reward_data(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      token: string;
      distributor: string;
      period_finish: BigNumber;
      rate: BigNumber;
      last_update: BigNumber;
      integral: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "reward_data(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      token: string;
      distributor: string;
      period_finish: BigNumber;
      rate: BigNumber;
      last_update: BigNumber;
      integral: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    rewards_receiver(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "rewards_receiver(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    reward_integral_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "reward_integral_for(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    admin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "admin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    future_admin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "future_admin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    is_killed(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "is_killed()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;
  };

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

  "integrate_checkpoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  user_checkpoint(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "user_checkpoint(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimable_tokens(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimable_tokens(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimed_reward(
    _addr: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimed_reward(address,address)"(
    _addr: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimable_reward(
    _user: string,
    _reward_token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimable_reward(address,address)"(
    _user: string,
    _reward_token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  set_rewards_receiver(
    _receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set_rewards_receiver(address)"(
    _receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim_rewards()"(overrides?: Overrides): Promise<ContractTransaction>;

  "claim_rewards(address)"(
    _addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim_rewards(address,address)"(
    _addr: string,
    _receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  kick(addr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "kick(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,address)"(
    _value: BigNumberish,
    _addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,address,bool)"(
    _value: BigNumberish,
    _addr: string,
    _claim_rewards: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,bool)"(
    _value: BigNumberish,
    _claim_rewards: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increaseAllowance(
    _spender: string,
    _added_value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    _spender: string,
    _added_value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decreaseAllowance(
    _spender: string,
    _subtracted_value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    _spender: string,
    _subtracted_value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  add_reward(
    _reward_token: string,
    _distributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add_reward(address,address)"(
    _reward_token: string,
    _distributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  set_reward_distributor(
    _reward_token: string,
    _distributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set_reward_distributor(address,address)"(
    _reward_token: string,
    _distributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit_reward_token(
    _reward_token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit_reward_token(address,uint256)"(
    _reward_token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  set_killed(
    _is_killed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set_killed(bool)"(
    _is_killed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commit_transfer_ownership(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  accept_transfer_ownership(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "accept_transfer_ownership()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  minter(overrides?: CallOverrides): Promise<string>;

  "minter()"(overrides?: CallOverrides): Promise<string>;

  crv_token(overrides?: CallOverrides): Promise<string>;

  "crv_token()"(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  voting_escrow(overrides?: CallOverrides): Promise<string>;

  "voting_escrow()"(overrides?: CallOverrides): Promise<string>;

  veboost_proxy(overrides?: CallOverrides): Promise<string>;

  "veboost_proxy()"(overrides?: CallOverrides): Promise<string>;

  lp_token(overrides?: CallOverrides): Promise<string>;

  "lp_token()"(overrides?: CallOverrides): Promise<string>;

  future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

  "future_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  working_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "working_balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  working_supply(overrides?: CallOverrides): Promise<BigNumber>;

  "working_supply()"(overrides?: CallOverrides): Promise<BigNumber>;

  period(overrides?: CallOverrides): Promise<BigNumber>;

  "period()"(overrides?: CallOverrides): Promise<BigNumber>;

  period_timestamp(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "period_timestamp(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_inv_supply(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "integrate_inv_supply(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_inv_supply_of(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "integrate_inv_supply_of(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_checkpoint_of(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "integrate_checkpoint_of(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_fraction(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "integrate_fraction(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  inflation_rate(overrides?: CallOverrides): Promise<BigNumber>;

  "inflation_rate()"(overrides?: CallOverrides): Promise<BigNumber>;

  reward_count(overrides?: CallOverrides): Promise<BigNumber>;

  "reward_count()"(overrides?: CallOverrides): Promise<BigNumber>;

  reward_tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "reward_tokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  reward_data(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    token: string;
    distributor: string;
    period_finish: BigNumber;
    rate: BigNumber;
    last_update: BigNumber;
    integral: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  "reward_data(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    token: string;
    distributor: string;
    period_finish: BigNumber;
    rate: BigNumber;
    last_update: BigNumber;
    integral: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<string>;

  "rewards_receiver(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  reward_integral_for(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "reward_integral_for(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  "future_admin()"(overrides?: CallOverrides): Promise<string>;

  is_killed(overrides?: CallOverrides): Promise<boolean>;

  "is_killed()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

    "integrate_checkpoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    user_checkpoint(addr: string, overrides?: CallOverrides): Promise<boolean>;

    "user_checkpoint(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimable_tokens(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimable_tokens(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed_reward(address,address)"(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable_reward(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimable_reward(address,address)"(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "set_rewards_receiver(address)"(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim_rewards()"(overrides?: CallOverrides): Promise<void>;

    "claim_rewards(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim_rewards(address,address)"(
      _addr: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    kick(addr: string, overrides?: CallOverrides): Promise<void>;

    "kick(address)"(addr: string, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,address,bool)"(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,bool)"(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "add_reward(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "set_reward_distributor(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit_reward_token(address,uint256)"(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set_killed(_is_killed: boolean, overrides?: CallOverrides): Promise<void>;

    "set_killed(bool)"(
      _is_killed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    commit_transfer_ownership(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "commit_transfer_ownership(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    accept_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    "accept_transfer_ownership()"(overrides?: CallOverrides): Promise<void>;

    minter(overrides?: CallOverrides): Promise<string>;

    "minter()"(overrides?: CallOverrides): Promise<string>;

    crv_token(overrides?: CallOverrides): Promise<string>;

    "crv_token()"(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    voting_escrow(overrides?: CallOverrides): Promise<string>;

    "voting_escrow()"(overrides?: CallOverrides): Promise<string>;

    veboost_proxy(overrides?: CallOverrides): Promise<string>;

    "veboost_proxy()"(overrides?: CallOverrides): Promise<string>;

    lp_token(overrides?: CallOverrides): Promise<string>;

    "lp_token()"(overrides?: CallOverrides): Promise<string>;

    future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    "future_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "working_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    working_supply(overrides?: CallOverrides): Promise<BigNumber>;

    "working_supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    "period()"(overrides?: CallOverrides): Promise<BigNumber>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "period_timestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_inv_supply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_inv_supply_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_checkpoint_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_fraction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inflation_rate(overrides?: CallOverrides): Promise<BigNumber>;

    "inflation_rate()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward_count(overrides?: CallOverrides): Promise<BigNumber>;

    "reward_count()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward_tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "reward_tokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    reward_data(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      token: string;
      distributor: string;
      period_finish: BigNumber;
      rate: BigNumber;
      last_update: BigNumber;
      integral: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "reward_data(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      token: string;
      distributor: string;
      period_finish: BigNumber;
      rate: BigNumber;
      last_update: BigNumber;
      integral: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<string>;

    "rewards_receiver(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    reward_integral_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reward_integral_for(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    future_admin(overrides?: CallOverrides): Promise<string>;

    "future_admin()"(overrides?: CallOverrides): Promise<string>;

    is_killed(overrides?: CallOverrides): Promise<boolean>;

    "is_killed()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    Deposit(provider: string | null, value: null): EventFilter;

    Withdraw(provider: string | null, value: null): EventFilter;

    UpdateLiquidityLimit(
      user: null,
      original_balance: null,
      original_supply: null,
      working_balance: null,
      working_supply: null
    ): EventFilter;

    CommitOwnership(admin: null): EventFilter;

    ApplyOwnership(admin: null): EventFilter;

    Transfer(
      _from: string | null,
      _to: string | null,
      _value: null
    ): EventFilter;

    Approval(
      _owner: string | null,
      _spender: string | null,
      _value: null
    ): EventFilter;
  };

  estimateGas: {
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

    "integrate_checkpoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    user_checkpoint(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "user_checkpoint(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimable_tokens(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "claimable_tokens(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimed_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed_reward(address,address)"(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable_reward(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimable_reward(address,address)"(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set_rewards_receiver(address)"(
      _receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim_rewards()"(overrides?: Overrides): Promise<BigNumber>;

    "claim_rewards(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim_rewards(address,address)"(
      _addr: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    kick(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "kick(address)"(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      _addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,address,bool)"(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,bool)"(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add_reward(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set_reward_distributor(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit_reward_token(address,uint256)"(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    set_killed(_is_killed: boolean, overrides?: Overrides): Promise<BigNumber>;

    "set_killed(bool)"(
      _is_killed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commit_transfer_ownership(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    accept_transfer_ownership(overrides?: Overrides): Promise<BigNumber>;

    "accept_transfer_ownership()"(overrides?: Overrides): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    "minter()"(overrides?: CallOverrides): Promise<BigNumber>;

    crv_token(overrides?: CallOverrides): Promise<BigNumber>;

    "crv_token()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    voting_escrow(overrides?: CallOverrides): Promise<BigNumber>;

    "voting_escrow()"(overrides?: CallOverrides): Promise<BigNumber>;

    veboost_proxy(overrides?: CallOverrides): Promise<BigNumber>;

    "veboost_proxy()"(overrides?: CallOverrides): Promise<BigNumber>;

    lp_token(overrides?: CallOverrides): Promise<BigNumber>;

    "lp_token()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    "future_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "working_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    working_supply(overrides?: CallOverrides): Promise<BigNumber>;

    "working_supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    "period()"(overrides?: CallOverrides): Promise<BigNumber>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "period_timestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_inv_supply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_inv_supply_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_checkpoint_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_fraction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inflation_rate(overrides?: CallOverrides): Promise<BigNumber>;

    "inflation_rate()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward_count(overrides?: CallOverrides): Promise<BigNumber>;

    "reward_count()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward_tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reward_tokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reward_data(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "reward_data(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards_receiver(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewards_receiver(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reward_integral_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reward_integral_for(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;

    "future_admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    is_killed(overrides?: CallOverrides): Promise<BigNumber>;

    "is_killed()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    integrate_checkpoint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_checkpoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user_checkpoint(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "user_checkpoint(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimable_tokens(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimable_tokens(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimed_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed_reward(address,address)"(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimable_reward(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimable_reward(address,address)"(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set_rewards_receiver(address)"(
      _receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim_rewards()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim_rewards(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim_rewards(address,address)"(
      _addr: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    kick(addr: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "kick(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      _addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address,bool)"(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,bool)"(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add_reward(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set_reward_distributor(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit_reward_token(address,uint256)"(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    set_killed(
      _is_killed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set_killed(bool)"(
      _is_killed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commit_transfer_ownership(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    accept_transfer_ownership(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "accept_transfer_ownership()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crv_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crv_token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voting_escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "voting_escrow()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veboost_proxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "veboost_proxy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lp_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lp_token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_epoch_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "future_epoch_time()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "working_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    working_supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "working_supply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    period(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "period()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "period_timestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_inv_supply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_inv_supply_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_checkpoint_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_fraction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inflation_rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "inflation_rate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reward_count()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reward_tokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward_data(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reward_data(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards_receiver(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards_receiver(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward_integral_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reward_integral_for(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "future_admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    is_killed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "is_killed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
