/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RibbonV2ThetaVaultInterface extends ethers.utils.Interface {
  functions: {
    "DELAY()": FunctionFragment;
    "GAMMA_CONTROLLER()": FunctionFragment;
    "GNOSIS_EASY_AUCTION()": FunctionFragment;
    "MARGIN_POOL()": FunctionFragment;
    "OTOKEN_FACTORY()": FunctionFragment;
    "PERIOD()": FunctionFragment;
    "USDC()": FunctionFragment;
    "WETH()": FunctionFragment;
    "accountVaultBalance(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "auctionDuration()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burnRemainingOTokens()": FunctionFragment;
    "cap()": FunctionFragment;
    "commitAndClose()": FunctionFragment;
    "completeWithdraw()": FunctionFragment;
    "currentOption()": FunctionFragment;
    "currentOtokenPremium()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositETH()": FunctionFragment;
    "depositFor(uint256,address)": FunctionFragment;
    "depositReceipts(address)": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initRounds(uint256)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,tuple)": FunctionFragment;
    "initiateWithdraw(uint256)": FunctionFragment;
    "keeper()": FunctionFragment;
    "lastStrikeOverrideRound()": FunctionFragment;
    "managementFee()": FunctionFragment;
    "maxRedeem()": FunctionFragment;
    "name()": FunctionFragment;
    "nextOption()": FunctionFragment;
    "nextOptionReadyAt()": FunctionFragment;
    "optionAuctionID()": FunctionFragment;
    "optionState()": FunctionFragment;
    "optionsPremiumPricer()": FunctionFragment;
    "overriddenStrikePrice()": FunctionFragment;
    "owner()": FunctionFragment;
    "performanceFee()": FunctionFragment;
    "premiumDiscount()": FunctionFragment;
    "pricePerShare()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rollToNextOption()": FunctionFragment;
    "roundPricePerShare(uint256)": FunctionFragment;
    "setAuctionDuration(uint256)": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setManagementFee(uint256)": FunctionFragment;
    "setNewKeeper(address)": FunctionFragment;
    "setOptionsPremiumPricer(address)": FunctionFragment;
    "setPerformanceFee(uint256)": FunctionFragment;
    "setPremiumDiscount(uint256)": FunctionFragment;
    "setStrikePrice(uint128)": FunctionFragment;
    "setStrikeSelection(address)": FunctionFragment;
    "shareBalances(address)": FunctionFragment;
    "shares(address)": FunctionFragment;
    "startAuction()": FunctionFragment;
    "strikeSelection()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalPending()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vaultParams()": FunctionFragment;
    "vaultState()": FunctionFragment;
    "withdrawInstantly(uint256)": FunctionFragment;
    "withdrawals(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DELAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GAMMA_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GNOSIS_EASY_AUCTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARGIN_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OTOKEN_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PERIOD", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountVaultBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnRemainingOTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commitAndClose",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentOtokenPremium",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositReceipts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initRounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      {
        isPut: boolean;
        decimals: BigNumberish;
        asset: string;
        underlying: string;
        minimumSupply: BigNumberish;
        cap: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastStrikeOverrideRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managementFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxRedeem", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOptionReadyAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionAuctionID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionsPremiumPricer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "overriddenStrikePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "premiumDiscount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollToNextOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundPricePerShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagementFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewKeeper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptionsPremiumPricer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPremiumDiscount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrikePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrikeSelection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shareBalances",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strikeSelection",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPending",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInstantly",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdrawals", values: [string]): string;

  decodeFunctionResult(functionFragment: "DELAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GAMMA_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GNOSIS_EASY_AUCTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARGIN_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OTOKEN_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PERIOD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnRemainingOTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitAndClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOtokenPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initRounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastStrikeOverrideRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextOption", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextOptionReadyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionAuctionID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionsPremiumPricer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overriddenStrikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "premiumDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollToNextOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundPricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOptionsPremiumPricer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrikeSelection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strikeSelection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInstantly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawals",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AuctionDurationSet(uint256,uint256)": EventFragment;
    "CapSet(uint256,uint256,address)": EventFragment;
    "CloseShort(address,uint256,address)": EventFragment;
    "CollectVaultFees(uint256,uint256,uint256,address)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "InitiateGnosisAuction(address,address,uint256,address)": EventFragment;
    "InitiateWithdraw(address,uint256,uint256)": EventFragment;
    "InstantWithdraw(address,uint256,uint256)": EventFragment;
    "ManagementFeeSet(uint256,uint256)": EventFragment;
    "NewOptionStrikeSelected(uint256,uint256)": EventFragment;
    "OpenShort(address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PerformanceFeeSet(uint256,uint256)": EventFragment;
    "PremiumDiscountSet(uint256,uint256)": EventFragment;
    "Redeem(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionDurationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CapSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseShort"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectVaultFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiateGnosisAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiateWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagementFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOptionStrikeSelected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenShort"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PerformanceFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumDiscountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class RibbonV2ThetaVault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RibbonV2ThetaVaultInterface;

  functions: {
    DELAY(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "DELAY()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    GAMMA_CONTROLLER(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "GAMMA_CONTROLLER()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    GNOSIS_EASY_AUCTION(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "GNOSIS_EASY_AUCTION()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    MARGIN_POOL(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "MARGIN_POOL()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    OTOKEN_FACTORY(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "OTOKEN_FACTORY()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    PERIOD(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "PERIOD()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    USDC(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "USDC()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    WETH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WETH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "accountVaultBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    auctionDuration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "auctionDuration()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    burnRemainingOTokens(overrides?: Overrides): Promise<ContractTransaction>;

    "burnRemainingOTokens()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cap(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "cap()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    commitAndClose(overrides?: Overrides): Promise<ContractTransaction>;

    "commitAndClose()"(overrides?: Overrides): Promise<ContractTransaction>;

    completeWithdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "completeWithdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

    currentOption(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "currentOption()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    currentOtokenPremium(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "currentOtokenPremium()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositETH(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "depositETH()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    depositFor(
      amount: BigNumberish,
      creditor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositFor(uint256,address)"(
      amount: BigNumberish,
      creditor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      round: number;
      amount: BigNumber;
      unredeemedShares: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    "depositReceipts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      round: number;
      amount: BigNumber;
      unredeemedShares: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    feeRecipient(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "feeRecipient()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initRounds(
      numRounds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initRounds(uint256)"(
      numRounds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _owner: string,
      _keeper: string,
      _feeRecipient: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      _optionsPremiumPricer: string,
      _strikeSelection: string,
      _premiumDiscount: BigNumberish,
      _auctionDuration: BigNumberish,
      _vaultParams: {
        isPut: boolean;
        decimals: BigNumberish;
        asset: string;
        underlying: string;
        minimumSupply: BigNumberish;
        cap: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,(bool,uint8,address,address,uint56,uint104))"(
      _owner: string,
      _keeper: string,
      _feeRecipient: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      _optionsPremiumPricer: string,
      _strikeSelection: string,
      _premiumDiscount: BigNumberish,
      _auctionDuration: BigNumberish,
      _vaultParams: {
        isPut: boolean;
        decimals: BigNumberish;
        asset: string;
        underlying: string;
        minimumSupply: BigNumberish;
        cap: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initiateWithdraw(
      numShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initiateWithdraw(uint256)"(
      numShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    keeper(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "keeper()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    lastStrikeOverrideRound(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "lastStrikeOverrideRound()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    managementFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "managementFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maxRedeem(overrides?: Overrides): Promise<ContractTransaction>;

    "maxRedeem()"(overrides?: Overrides): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    nextOption(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "nextOption()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "nextOptionReadyAt()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    optionAuctionID(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "optionAuctionID()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    optionState(overrides?: CallOverrides): Promise<{
      nextOption: string;
      currentOption: string;
      nextOptionReadyAt: number;
      0: string;
      1: string;
      2: number;
    }>;

    "optionState()"(overrides?: CallOverrides): Promise<{
      nextOption: string;
      currentOption: string;
      nextOptionReadyAt: number;
      0: string;
      1: string;
      2: number;
    }>;

    optionsPremiumPricer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "optionsPremiumPricer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    overriddenStrikePrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "overriddenStrikePrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    performanceFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "performanceFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    premiumDiscount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "premiumDiscount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    pricePerShare(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "pricePerShare()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    redeem(
      numShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeem(uint256)"(
      numShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rollToNextOption(overrides?: Overrides): Promise<ContractTransaction>;

    "rollToNextOption()"(overrides?: Overrides): Promise<ContractTransaction>;

    roundPricePerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "roundPricePerShare(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setAuctionDuration(
      newAuctionDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuctionDuration(uint256)"(
      newAuctionDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCap(uint256)"(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeRecipient(address)"(
      newFeeRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setManagementFee(uint256)"(
      newManagementFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNewKeeper(
      newKeeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNewKeeper(address)"(
      newKeeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOptionsPremiumPricer(
      newOptionsPremiumPricer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOptionsPremiumPricer(address)"(
      newOptionsPremiumPricer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPerformanceFee(uint256)"(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPremiumDiscount(
      newPremiumDiscount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPremiumDiscount(uint256)"(
      newPremiumDiscount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStrikePrice(
      strikePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStrikePrice(uint128)"(
      strikePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStrikeSelection(
      newStrikeSelection: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStrikeSelection(address)"(
      newStrikeSelection: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      heldByAccount: BigNumber;
      heldByVault: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "shareBalances(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      heldByAccount: BigNumber;
      heldByVault: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    shares(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "shares(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    startAuction(overrides?: Overrides): Promise<ContractTransaction>;

    "startAuction()"(overrides?: Overrides): Promise<ContractTransaction>;

    strikeSelection(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "strikeSelection()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalBalance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalBalance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalPending(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalPending()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vaultParams(overrides?: CallOverrides): Promise<{
      isPut: boolean;
      decimals: number;
      asset: string;
      underlying: string;
      minimumSupply: BigNumber;
      cap: BigNumber;
      0: boolean;
      1: number;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
    }>;

    "vaultParams()"(overrides?: CallOverrides): Promise<{
      isPut: boolean;
      decimals: number;
      asset: string;
      underlying: string;
      minimumSupply: BigNumber;
      cap: BigNumber;
      0: boolean;
      1: number;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
    }>;

    vaultState(overrides?: CallOverrides): Promise<{
      round: number;
      lockedAmount: BigNumber;
      lastLockedAmount: BigNumber;
      totalPending: BigNumber;
      queuedWithdrawShares: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "vaultState()"(overrides?: CallOverrides): Promise<{
      round: number;
      lockedAmount: BigNumber;
      lastLockedAmount: BigNumber;
      totalPending: BigNumber;
      queuedWithdrawShares: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    withdrawInstantly(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawInstantly(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      round: number;
      shares: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    "withdrawals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      round: number;
      shares: BigNumber;
      0: number;
      1: BigNumber;
    }>;
  };

  DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  "DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

  GAMMA_CONTROLLER(overrides?: CallOverrides): Promise<string>;

  "GAMMA_CONTROLLER()"(overrides?: CallOverrides): Promise<string>;

  GNOSIS_EASY_AUCTION(overrides?: CallOverrides): Promise<string>;

  "GNOSIS_EASY_AUCTION()"(overrides?: CallOverrides): Promise<string>;

  MARGIN_POOL(overrides?: CallOverrides): Promise<string>;

  "MARGIN_POOL()"(overrides?: CallOverrides): Promise<string>;

  OTOKEN_FACTORY(overrides?: CallOverrides): Promise<string>;

  "OTOKEN_FACTORY()"(overrides?: CallOverrides): Promise<string>;

  PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  "PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

  USDC(overrides?: CallOverrides): Promise<string>;

  "USDC()"(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  accountVaultBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "accountVaultBalance(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  auctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "auctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnRemainingOTokens(overrides?: Overrides): Promise<ContractTransaction>;

  "burnRemainingOTokens()"(overrides?: Overrides): Promise<ContractTransaction>;

  cap(overrides?: CallOverrides): Promise<BigNumber>;

  "cap()"(overrides?: CallOverrides): Promise<BigNumber>;

  commitAndClose(overrides?: Overrides): Promise<ContractTransaction>;

  "commitAndClose()"(overrides?: Overrides): Promise<ContractTransaction>;

  completeWithdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "completeWithdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  currentOption(overrides?: CallOverrides): Promise<string>;

  "currentOption()"(overrides?: CallOverrides): Promise<string>;

  currentOtokenPremium(overrides?: CallOverrides): Promise<BigNumber>;

  "currentOtokenPremium()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositETH(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "depositETH()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  depositFor(
    amount: BigNumberish,
    creditor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositFor(uint256,address)"(
    amount: BigNumberish,
    creditor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositReceipts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    round: number;
    amount: BigNumber;
    unredeemedShares: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
  }>;

  "depositReceipts(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    round: number;
    amount: BigNumber;
    unredeemedShares: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
  }>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  "feeRecipient()"(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initRounds(
    numRounds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initRounds(uint256)"(
    numRounds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _owner: string,
    _keeper: string,
    _feeRecipient: string,
    _managementFee: BigNumberish,
    _performanceFee: BigNumberish,
    _tokenName: string,
    _tokenSymbol: string,
    _optionsPremiumPricer: string,
    _strikeSelection: string,
    _premiumDiscount: BigNumberish,
    _auctionDuration: BigNumberish,
    _vaultParams: {
      isPut: boolean;
      decimals: BigNumberish;
      asset: string;
      underlying: string;
      minimumSupply: BigNumberish;
      cap: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,(bool,uint8,address,address,uint56,uint104))"(
    _owner: string,
    _keeper: string,
    _feeRecipient: string,
    _managementFee: BigNumberish,
    _performanceFee: BigNumberish,
    _tokenName: string,
    _tokenSymbol: string,
    _optionsPremiumPricer: string,
    _strikeSelection: string,
    _premiumDiscount: BigNumberish,
    _auctionDuration: BigNumberish,
    _vaultParams: {
      isPut: boolean;
      decimals: BigNumberish;
      asset: string;
      underlying: string;
      minimumSupply: BigNumberish;
      cap: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initiateWithdraw(
    numShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initiateWithdraw(uint256)"(
    numShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  keeper(overrides?: CallOverrides): Promise<string>;

  "keeper()"(overrides?: CallOverrides): Promise<string>;

  lastStrikeOverrideRound(overrides?: CallOverrides): Promise<number>;

  "lastStrikeOverrideRound()"(overrides?: CallOverrides): Promise<number>;

  managementFee(overrides?: CallOverrides): Promise<BigNumber>;

  "managementFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(overrides?: Overrides): Promise<ContractTransaction>;

  "maxRedeem()"(overrides?: Overrides): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nextOption(overrides?: CallOverrides): Promise<string>;

  "nextOption()"(overrides?: CallOverrides): Promise<string>;

  nextOptionReadyAt(overrides?: CallOverrides): Promise<BigNumber>;

  "nextOptionReadyAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  optionAuctionID(overrides?: CallOverrides): Promise<BigNumber>;

  "optionAuctionID()"(overrides?: CallOverrides): Promise<BigNumber>;

  optionState(overrides?: CallOverrides): Promise<{
    nextOption: string;
    currentOption: string;
    nextOptionReadyAt: number;
    0: string;
    1: string;
    2: number;
  }>;

  "optionState()"(overrides?: CallOverrides): Promise<{
    nextOption: string;
    currentOption: string;
    nextOptionReadyAt: number;
    0: string;
    1: string;
    2: number;
  }>;

  optionsPremiumPricer(overrides?: CallOverrides): Promise<string>;

  "optionsPremiumPricer()"(overrides?: CallOverrides): Promise<string>;

  overriddenStrikePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "overriddenStrikePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  "performanceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  premiumDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  "premiumDiscount()"(overrides?: CallOverrides): Promise<BigNumber>;

  pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

  "pricePerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    numShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeem(uint256)"(
    numShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rollToNextOption(overrides?: Overrides): Promise<ContractTransaction>;

  "rollToNextOption()"(overrides?: Overrides): Promise<ContractTransaction>;

  roundPricePerShare(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "roundPricePerShare(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAuctionDuration(
    newAuctionDuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuctionDuration(uint256)"(
    newAuctionDuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCap(
    newCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCap(uint256)"(
    newCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    newFeeRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeRecipient(address)"(
    newFeeRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setManagementFee(
    newManagementFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setManagementFee(uint256)"(
    newManagementFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNewKeeper(
    newKeeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNewKeeper(address)"(
    newKeeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOptionsPremiumPricer(
    newOptionsPremiumPricer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOptionsPremiumPricer(address)"(
    newOptionsPremiumPricer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    newPerformanceFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPerformanceFee(uint256)"(
    newPerformanceFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPremiumDiscount(
    newPremiumDiscount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPremiumDiscount(uint256)"(
    newPremiumDiscount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStrikePrice(
    strikePrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStrikePrice(uint128)"(
    strikePrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStrikeSelection(
    newStrikeSelection: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStrikeSelection(address)"(
    newStrikeSelection: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareBalances(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    heldByAccount: BigNumber;
    heldByVault: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "shareBalances(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    heldByAccount: BigNumber;
    heldByVault: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "shares(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  startAuction(overrides?: Overrides): Promise<ContractTransaction>;

  "startAuction()"(overrides?: Overrides): Promise<ContractTransaction>;

  strikeSelection(overrides?: CallOverrides): Promise<string>;

  "strikeSelection()"(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalPending(overrides?: CallOverrides): Promise<BigNumber>;

  "totalPending()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vaultParams(overrides?: CallOverrides): Promise<{
    isPut: boolean;
    decimals: number;
    asset: string;
    underlying: string;
    minimumSupply: BigNumber;
    cap: BigNumber;
    0: boolean;
    1: number;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
  }>;

  "vaultParams()"(overrides?: CallOverrides): Promise<{
    isPut: boolean;
    decimals: number;
    asset: string;
    underlying: string;
    minimumSupply: BigNumber;
    cap: BigNumber;
    0: boolean;
    1: number;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
  }>;

  vaultState(overrides?: CallOverrides): Promise<{
    round: number;
    lockedAmount: BigNumber;
    lastLockedAmount: BigNumber;
    totalPending: BigNumber;
    queuedWithdrawShares: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "vaultState()"(overrides?: CallOverrides): Promise<{
    round: number;
    lockedAmount: BigNumber;
    lastLockedAmount: BigNumber;
    totalPending: BigNumber;
    queuedWithdrawShares: BigNumber;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  withdrawInstantly(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawInstantly(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawals(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    round: number;
    shares: BigNumber;
    0: number;
    1: BigNumber;
  }>;

  "withdrawals(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    round: number;
    shares: BigNumber;
    0: number;
    1: BigNumber;
  }>;

  callStatic: {
    DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    GAMMA_CONTROLLER(overrides?: CallOverrides): Promise<string>;

    "GAMMA_CONTROLLER()"(overrides?: CallOverrides): Promise<string>;

    GNOSIS_EASY_AUCTION(overrides?: CallOverrides): Promise<string>;

    "GNOSIS_EASY_AUCTION()"(overrides?: CallOverrides): Promise<string>;

    MARGIN_POOL(overrides?: CallOverrides): Promise<string>;

    "MARGIN_POOL()"(overrides?: CallOverrides): Promise<string>;

    OTOKEN_FACTORY(overrides?: CallOverrides): Promise<string>;

    "OTOKEN_FACTORY()"(overrides?: CallOverrides): Promise<string>;

    PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<string>;

    "USDC()"(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accountVaultBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnRemainingOTokens(overrides?: CallOverrides): Promise<void>;

    "burnRemainingOTokens()"(overrides?: CallOverrides): Promise<void>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    "cap()"(overrides?: CallOverrides): Promise<BigNumber>;

    commitAndClose(overrides?: CallOverrides): Promise<void>;

    "commitAndClose()"(overrides?: CallOverrides): Promise<void>;

    completeWithdraw(overrides?: CallOverrides): Promise<void>;

    "completeWithdraw()"(overrides?: CallOverrides): Promise<void>;

    currentOption(overrides?: CallOverrides): Promise<string>;

    "currentOption()"(overrides?: CallOverrides): Promise<string>;

    currentOtokenPremium(overrides?: CallOverrides): Promise<BigNumber>;

    "currentOtokenPremium()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(overrides?: CallOverrides): Promise<void>;

    "depositETH()"(overrides?: CallOverrides): Promise<void>;

    depositFor(
      amount: BigNumberish,
      creditor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositFor(uint256,address)"(
      amount: BigNumberish,
      creditor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      round: number;
      amount: BigNumber;
      unredeemedShares: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    "depositReceipts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      round: number;
      amount: BigNumber;
      unredeemedShares: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    "feeRecipient()"(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initRounds(
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initRounds(uint256)"(
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _owner: string,
      _keeper: string,
      _feeRecipient: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      _optionsPremiumPricer: string,
      _strikeSelection: string,
      _premiumDiscount: BigNumberish,
      _auctionDuration: BigNumberish,
      _vaultParams: {
        isPut: boolean;
        decimals: BigNumberish;
        asset: string;
        underlying: string;
        minimumSupply: BigNumberish;
        cap: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,(bool,uint8,address,address,uint56,uint104))"(
      _owner: string,
      _keeper: string,
      _feeRecipient: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      _optionsPremiumPricer: string,
      _strikeSelection: string,
      _premiumDiscount: BigNumberish,
      _auctionDuration: BigNumberish,
      _vaultParams: {
        isPut: boolean;
        decimals: BigNumberish;
        asset: string;
        underlying: string;
        minimumSupply: BigNumberish;
        cap: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    initiateWithdraw(
      numShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initiateWithdraw(uint256)"(
      numShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    keeper(overrides?: CallOverrides): Promise<string>;

    "keeper()"(overrides?: CallOverrides): Promise<string>;

    lastStrikeOverrideRound(overrides?: CallOverrides): Promise<number>;

    "lastStrikeOverrideRound()"(overrides?: CallOverrides): Promise<number>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    "managementFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(overrides?: CallOverrides): Promise<void>;

    "maxRedeem()"(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nextOption(overrides?: CallOverrides): Promise<string>;

    "nextOption()"(overrides?: CallOverrides): Promise<string>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<BigNumber>;

    "nextOptionReadyAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionAuctionID(overrides?: CallOverrides): Promise<BigNumber>;

    "optionAuctionID()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionState(overrides?: CallOverrides): Promise<{
      nextOption: string;
      currentOption: string;
      nextOptionReadyAt: number;
      0: string;
      1: string;
      2: number;
    }>;

    "optionState()"(overrides?: CallOverrides): Promise<{
      nextOption: string;
      currentOption: string;
      nextOptionReadyAt: number;
      0: string;
      1: string;
      2: number;
    }>;

    optionsPremiumPricer(overrides?: CallOverrides): Promise<string>;

    "optionsPremiumPricer()"(overrides?: CallOverrides): Promise<string>;

    overriddenStrikePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "overriddenStrikePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    premiumDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    "premiumDiscount()"(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "pricePerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(numShares: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "redeem(uint256)"(
      numShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rollToNextOption(overrides?: CallOverrides): Promise<void>;

    "rollToNextOption()"(overrides?: CallOverrides): Promise<void>;

    roundPricePerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "roundPricePerShare(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuctionDuration(
      newAuctionDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuctionDuration(uint256)"(
      newAuctionDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCap(newCap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setCap(uint256)"(
      newCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeRecipient(address)"(
      newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setManagementFee(uint256)"(
      newManagementFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewKeeper(newKeeper: string, overrides?: CallOverrides): Promise<void>;

    "setNewKeeper(address)"(
      newKeeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOptionsPremiumPricer(
      newOptionsPremiumPricer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOptionsPremiumPricer(address)"(
      newOptionsPremiumPricer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPerformanceFee(uint256)"(
      newPerformanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPremiumDiscount(
      newPremiumDiscount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPremiumDiscount(uint256)"(
      newPremiumDiscount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrikePrice(
      strikePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrikePrice(uint128)"(
      strikePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrikeSelection(
      newStrikeSelection: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrikeSelection(address)"(
      newStrikeSelection: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shareBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      heldByAccount: BigNumber;
      heldByVault: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "shareBalances(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      heldByAccount: BigNumber;
      heldByVault: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shares(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startAuction(overrides?: CallOverrides): Promise<void>;

    "startAuction()"(overrides?: CallOverrides): Promise<void>;

    strikeSelection(overrides?: CallOverrides): Promise<string>;

    "strikeSelection()"(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPending(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPending()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultParams(overrides?: CallOverrides): Promise<{
      isPut: boolean;
      decimals: number;
      asset: string;
      underlying: string;
      minimumSupply: BigNumber;
      cap: BigNumber;
      0: boolean;
      1: number;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
    }>;

    "vaultParams()"(overrides?: CallOverrides): Promise<{
      isPut: boolean;
      decimals: number;
      asset: string;
      underlying: string;
      minimumSupply: BigNumber;
      cap: BigNumber;
      0: boolean;
      1: number;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
    }>;

    vaultState(overrides?: CallOverrides): Promise<{
      round: number;
      lockedAmount: BigNumber;
      lastLockedAmount: BigNumber;
      totalPending: BigNumber;
      queuedWithdrawShares: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "vaultState()"(overrides?: CallOverrides): Promise<{
      round: number;
      lockedAmount: BigNumber;
      lastLockedAmount: BigNumber;
      totalPending: BigNumber;
      queuedWithdrawShares: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    withdrawInstantly(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawInstantly(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      round: number;
      shares: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    "withdrawals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      round: number;
      shares: BigNumber;
      0: number;
      1: BigNumber;
    }>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    AuctionDurationSet(
      auctionDuration: null,
      newAuctionDuration: null
    ): EventFilter;

    CapSet(oldCap: null, newCap: null, manager: null): EventFilter;

    CloseShort(
      options: string | null,
      withdrawAmount: null,
      manager: string | null
    ): EventFilter;

    CollectVaultFees(
      performanceFee: null,
      vaultFee: null,
      round: null,
      feeRecipient: string | null
    ): EventFilter;

    Deposit(account: string | null, amount: null, round: null): EventFilter;

    InitiateGnosisAuction(
      auctioningToken: string | null,
      biddingToken: string | null,
      auctionCounter: null,
      manager: string | null
    ): EventFilter;

    InitiateWithdraw(
      account: string | null,
      shares: null,
      round: null
    ): EventFilter;

    InstantWithdraw(
      account: string | null,
      amount: null,
      round: null
    ): EventFilter;

    ManagementFeeSet(managementFee: null, newManagementFee: null): EventFilter;

    NewOptionStrikeSelected(strikePrice: null, delta: null): EventFilter;

    OpenShort(
      options: string | null,
      depositAmount: null,
      manager: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    PerformanceFeeSet(
      performanceFee: null,
      newPerformanceFee: null
    ): EventFilter;

    PremiumDiscountSet(
      premiumDiscount: null,
      newPremiumDiscount: null
    ): EventFilter;

    Redeem(account: string | null, share: null, round: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    Withdraw(account: string | null, amount: null, shares: null): EventFilter;
  };

  estimateGas: {
    DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    GAMMA_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    "GAMMA_CONTROLLER()"(overrides?: CallOverrides): Promise<BigNumber>;

    GNOSIS_EASY_AUCTION(overrides?: CallOverrides): Promise<BigNumber>;

    "GNOSIS_EASY_AUCTION()"(overrides?: CallOverrides): Promise<BigNumber>;

    MARGIN_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    "MARGIN_POOL()"(overrides?: CallOverrides): Promise<BigNumber>;

    OTOKEN_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    "OTOKEN_FACTORY()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    "USDC()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accountVaultBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    auctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnRemainingOTokens(overrides?: Overrides): Promise<BigNumber>;

    "burnRemainingOTokens()"(overrides?: Overrides): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    "cap()"(overrides?: CallOverrides): Promise<BigNumber>;

    commitAndClose(overrides?: Overrides): Promise<BigNumber>;

    "commitAndClose()"(overrides?: Overrides): Promise<BigNumber>;

    completeWithdraw(overrides?: Overrides): Promise<BigNumber>;

    "completeWithdraw()"(overrides?: Overrides): Promise<BigNumber>;

    currentOption(overrides?: CallOverrides): Promise<BigNumber>;

    "currentOption()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentOtokenPremium(overrides?: CallOverrides): Promise<BigNumber>;

    "currentOtokenPremium()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositETH(overrides?: PayableOverrides): Promise<BigNumber>;

    "depositETH()"(overrides?: PayableOverrides): Promise<BigNumber>;

    depositFor(
      amount: BigNumberish,
      creditor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositFor(uint256,address)"(
      amount: BigNumberish,
      creditor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "depositReceipts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "feeRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initRounds(
      numRounds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initRounds(uint256)"(
      numRounds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _keeper: string,
      _feeRecipient: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      _optionsPremiumPricer: string,
      _strikeSelection: string,
      _premiumDiscount: BigNumberish,
      _auctionDuration: BigNumberish,
      _vaultParams: {
        isPut: boolean;
        decimals: BigNumberish;
        asset: string;
        underlying: string;
        minimumSupply: BigNumberish;
        cap: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,(bool,uint8,address,address,uint56,uint104))"(
      _owner: string,
      _keeper: string,
      _feeRecipient: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      _optionsPremiumPricer: string,
      _strikeSelection: string,
      _premiumDiscount: BigNumberish,
      _auctionDuration: BigNumberish,
      _vaultParams: {
        isPut: boolean;
        decimals: BigNumberish;
        asset: string;
        underlying: string;
        minimumSupply: BigNumberish;
        cap: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    initiateWithdraw(
      numShares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initiateWithdraw(uint256)"(
      numShares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    "keeper()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastStrikeOverrideRound(overrides?: CallOverrides): Promise<BigNumber>;

    "lastStrikeOverrideRound()"(overrides?: CallOverrides): Promise<BigNumber>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    "managementFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(overrides?: Overrides): Promise<BigNumber>;

    "maxRedeem()"(overrides?: Overrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextOption(overrides?: CallOverrides): Promise<BigNumber>;

    "nextOption()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<BigNumber>;

    "nextOptionReadyAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionAuctionID(overrides?: CallOverrides): Promise<BigNumber>;

    "optionAuctionID()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionState(overrides?: CallOverrides): Promise<BigNumber>;

    "optionState()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionsPremiumPricer(overrides?: CallOverrides): Promise<BigNumber>;

    "optionsPremiumPricer()"(overrides?: CallOverrides): Promise<BigNumber>;

    overriddenStrikePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "overriddenStrikePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    premiumDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    "premiumDiscount()"(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "pricePerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(numShares: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "redeem(uint256)"(
      numShares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rollToNextOption(overrides?: Overrides): Promise<BigNumber>;

    "rollToNextOption()"(overrides?: Overrides): Promise<BigNumber>;

    roundPricePerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "roundPricePerShare(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuctionDuration(
      newAuctionDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuctionDuration(uint256)"(
      newAuctionDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCap(newCap: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setCap(uint256)"(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeRecipient(address)"(
      newFeeRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setManagementFee(uint256)"(
      newManagementFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNewKeeper(newKeeper: string, overrides?: Overrides): Promise<BigNumber>;

    "setNewKeeper(address)"(
      newKeeper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOptionsPremiumPricer(
      newOptionsPremiumPricer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOptionsPremiumPricer(address)"(
      newOptionsPremiumPricer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPerformanceFee(uint256)"(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPremiumDiscount(
      newPremiumDiscount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPremiumDiscount(uint256)"(
      newPremiumDiscount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStrikePrice(
      strikePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStrikePrice(uint128)"(
      strikePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStrikeSelection(
      newStrikeSelection: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStrikeSelection(address)"(
      newStrikeSelection: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shareBalances(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shares(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startAuction(overrides?: Overrides): Promise<BigNumber>;

    "startAuction()"(overrides?: Overrides): Promise<BigNumber>;

    strikeSelection(overrides?: CallOverrides): Promise<BigNumber>;

    "strikeSelection()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPending(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPending()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vaultParams(overrides?: CallOverrides): Promise<BigNumber>;

    "vaultParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    vaultState(overrides?: CallOverrides): Promise<BigNumber>;

    "vaultState()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawInstantly(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawInstantly(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DELAY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GAMMA_CONTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GAMMA_CONTROLLER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GNOSIS_EASY_AUCTION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "GNOSIS_EASY_AUCTION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MARGIN_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MARGIN_POOL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OTOKEN_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OTOKEN_FACTORY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERIOD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "USDC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountVaultBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    auctionDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnRemainingOTokens(overrides?: Overrides): Promise<PopulatedTransaction>;

    "burnRemainingOTokens()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitAndClose(overrides?: Overrides): Promise<PopulatedTransaction>;

    "commitAndClose()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    completeWithdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeWithdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    currentOption(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentOption()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentOtokenPremium(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentOtokenPremium()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositETH(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "depositETH()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    depositFor(
      amount: BigNumberish,
      creditor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositFor(uint256,address)"(
      amount: BigNumberish,
      creditor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "depositReceipts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeRecipient()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initRounds(
      numRounds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initRounds(uint256)"(
      numRounds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _keeper: string,
      _feeRecipient: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      _optionsPremiumPricer: string,
      _strikeSelection: string,
      _premiumDiscount: BigNumberish,
      _auctionDuration: BigNumberish,
      _vaultParams: {
        isPut: boolean;
        decimals: BigNumberish;
        asset: string;
        underlying: string;
        minimumSupply: BigNumberish;
        cap: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,(bool,uint8,address,address,uint56,uint104))"(
      _owner: string,
      _keeper: string,
      _feeRecipient: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      _optionsPremiumPricer: string,
      _strikeSelection: string,
      _premiumDiscount: BigNumberish,
      _auctionDuration: BigNumberish,
      _vaultParams: {
        isPut: boolean;
        decimals: BigNumberish;
        asset: string;
        underlying: string;
        minimumSupply: BigNumberish;
        cap: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initiateWithdraw(
      numShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initiateWithdraw(uint256)"(
      numShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "keeper()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastStrikeOverrideRound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastStrikeOverrideRound()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "managementFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeem(overrides?: Overrides): Promise<PopulatedTransaction>;

    "maxRedeem()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOption(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextOption()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextOptionReadyAt()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionAuctionID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "optionAuctionID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "optionState()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionsPremiumPricer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "optionsPremiumPricer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overriddenStrikePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "overriddenStrikePrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "performanceFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    premiumDiscount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "premiumDiscount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pricePerShare()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      numShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeem(uint256)"(
      numShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rollToNextOption(overrides?: Overrides): Promise<PopulatedTransaction>;

    "rollToNextOption()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    roundPricePerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "roundPricePerShare(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuctionDuration(
      newAuctionDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuctionDuration(uint256)"(
      newAuctionDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCap(uint256)"(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeRecipient(address)"(
      newFeeRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setManagementFee(uint256)"(
      newManagementFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNewKeeper(
      newKeeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNewKeeper(address)"(
      newKeeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOptionsPremiumPricer(
      newOptionsPremiumPricer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOptionsPremiumPricer(address)"(
      newOptionsPremiumPricer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPerformanceFee(uint256)"(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPremiumDiscount(
      newPremiumDiscount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPremiumDiscount(uint256)"(
      newPremiumDiscount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStrikePrice(
      strikePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStrikePrice(uint128)"(
      strikePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStrikeSelection(
      newStrikeSelection: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStrikeSelection(address)"(
      newStrikeSelection: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareBalances(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shareBalances(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shares(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shares(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startAuction(overrides?: Overrides): Promise<PopulatedTransaction>;

    "startAuction()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    strikeSelection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strikeSelection()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPending(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalPending()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vaultParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vaultParams()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vaultState()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawInstantly(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawInstantly(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
