/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CurveLiquidityPoolInterface extends ethers.utils.Interface {
  functions: {
    "A()": FunctionFragment;
    "A_precise()": FunctionFragment;
    "balances(uint256)": FunctionFragment;
    "get_virtual_price()": FunctionFragment;
    "calc_token_amount(uint256[2],bool)": FunctionFragment;
    "add_liquidity(uint256[2],uint256)": FunctionFragment;
    "get_dy(int128,int128,uint256)": FunctionFragment;
    "exchange(int128,int128,uint256,uint256)": FunctionFragment;
    "remove_liquidity(uint256,uint256[2])": FunctionFragment;
    "remove_liquidity_imbalance(uint256[2],uint256)": FunctionFragment;
    "calc_withdraw_one_coin(uint256,int128)": FunctionFragment;
    "remove_liquidity_one_coin(uint256,int128,uint256)": FunctionFragment;
    "ramp_A(uint256,uint256)": FunctionFragment;
    "stop_ramp_A()": FunctionFragment;
    "commit_new_fee(uint256,uint256)": FunctionFragment;
    "apply_new_fee()": FunctionFragment;
    "revert_new_parameters()": FunctionFragment;
    "commit_transfer_ownership(address)": FunctionFragment;
    "apply_transfer_ownership()": FunctionFragment;
    "revert_transfer_ownership()": FunctionFragment;
    "withdraw_admin_fees()": FunctionFragment;
    "donate_admin_fees()": FunctionFragment;
    "kill_me()": FunctionFragment;
    "unkill_me()": FunctionFragment;
    "coins(uint256)": FunctionFragment;
    "admin_balances(uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "admin_fee()": FunctionFragment;
    "owner()": FunctionFragment;
    "lp_token()": FunctionFragment;
    "initial_A()": FunctionFragment;
    "future_A()": FunctionFragment;
    "initial_A_time()": FunctionFragment;
    "future_A_time()": FunctionFragment;
    "admin_actions_deadline()": FunctionFragment;
    "transfer_ownership_deadline()": FunctionFragment;
    "future_fee()": FunctionFragment;
    "future_admin_fee()": FunctionFragment;
    "future_owner()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "A", values?: undefined): string;
  encodeFunctionData(functionFragment: "A_precise", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_virtual_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calc_token_amount",
    values: [[BigNumberish, BigNumberish], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "add_liquidity",
    values: [[BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_dy",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_imbalance",
    values: [[BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calc_withdraw_one_coin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ramp_A",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stop_ramp_A",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commit_new_fee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "apply_new_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revert_new_parameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commit_transfer_ownership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "apply_transfer_ownership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revert_transfer_ownership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_admin_fees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donate_admin_fees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kill_me", values?: undefined): string;
  encodeFunctionData(functionFragment: "unkill_me", values?: undefined): string;
  encodeFunctionData(functionFragment: "coins", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "admin_balances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin_fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "lp_token", values?: undefined): string;
  encodeFunctionData(functionFragment: "initial_A", values?: undefined): string;
  encodeFunctionData(functionFragment: "future_A", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initial_A_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_A_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "admin_actions_deadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer_ownership_deadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_admin_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_owner",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "A", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "A_precise", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_virtual_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calc_token_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_dy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_imbalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calc_withdraw_one_coin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ramp_A", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stop_ramp_A",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_new_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apply_new_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revert_new_parameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apply_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revert_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_admin_fees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donate_admin_fees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kill_me", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unkill_me", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "admin_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin_fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lp_token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initial_A", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "future_A", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initial_A_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_A_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "admin_actions_deadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfer_ownership_deadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "future_fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_admin_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_owner",
    data: BytesLike
  ): Result;

  events: {
    "TokenExchange(address,int128,uint256,int128,uint256)": EventFragment;
    "TokenExchangeUnderlying(address,int128,uint256,int128,uint256)": EventFragment;
    "AddLiquidity(address,uint256[2],uint256[2],uint256,uint256)": EventFragment;
    "RemoveLiquidity(address,uint256[2],uint256[2],uint256)": EventFragment;
    "RemoveLiquidityOne(address,uint256,uint256)": EventFragment;
    "RemoveLiquidityImbalance(address,uint256[2],uint256[2],uint256,uint256)": EventFragment;
    "CommitNewAdmin(uint256,address)": EventFragment;
    "NewAdmin(address)": EventFragment;
    "CommitNewFee(uint256,uint256,uint256)": EventFragment;
    "NewFee(uint256,uint256)": EventFragment;
    "RampA(uint256,uint256,uint256,uint256)": EventFragment;
    "StopRampA(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenExchange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenExchangeUnderlying"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityOne"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityImbalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitNewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitNewFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RampA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StopRampA"): EventFragment;
}

export class CurveLiquidityPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CurveLiquidityPoolInterface;

  functions: {
    A(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "A()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    A_precise(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "A_precise()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    balances(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balances(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    get_virtual_price(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "get_virtual_price()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    calc_token_amount(
      amounts: [BigNumberish, BigNumberish],
      is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calc_token_amount(uint256[2],bool)"(
      amounts: [BigNumberish, BigNumberish],
      is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    add_liquidity(
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "add_liquidity(uint256[2],uint256)"(
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    get_dy(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "get_dy(int128,int128,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    exchange(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "exchange(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    remove_liquidity(
      _amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove_liquidity(uint256,uint256[2])"(
      _amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    remove_liquidity_imbalance(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calc_withdraw_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calc_withdraw_one_coin(uint256,int128)"(
      _token_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    remove_liquidity_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ramp_A(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ramp_A(uint256,uint256)"(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stop_ramp_A(overrides?: Overrides): Promise<ContractTransaction>;

    "stop_ramp_A()"(overrides?: Overrides): Promise<ContractTransaction>;

    commit_new_fee(
      new_fee: BigNumberish,
      new_admin_fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commit_new_fee(uint256,uint256)"(
      new_fee: BigNumberish,
      new_admin_fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    apply_new_fee(overrides?: Overrides): Promise<ContractTransaction>;

    "apply_new_fee()"(overrides?: Overrides): Promise<ContractTransaction>;

    revert_new_parameters(overrides?: Overrides): Promise<ContractTransaction>;

    "revert_new_parameters()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      _owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commit_transfer_ownership(address)"(
      _owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "apply_transfer_ownership()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revert_transfer_ownership(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revert_transfer_ownership()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw_admin_fees(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw_admin_fees()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    donate_admin_fees(overrides?: Overrides): Promise<ContractTransaction>;

    "donate_admin_fees()"(overrides?: Overrides): Promise<ContractTransaction>;

    kill_me(overrides?: Overrides): Promise<ContractTransaction>;

    "kill_me()"(overrides?: Overrides): Promise<ContractTransaction>;

    unkill_me(overrides?: Overrides): Promise<ContractTransaction>;

    "unkill_me()"(overrides?: Overrides): Promise<ContractTransaction>;

    coins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "coins(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    admin_balances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "admin_balances(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    fee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "fee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    admin_fee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "admin_fee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    lp_token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "lp_token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    initial_A(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "initial_A()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    future_A(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "future_A()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    initial_A_time(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "initial_A_time()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    future_A_time(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "future_A_time()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    admin_actions_deadline(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "admin_actions_deadline()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer_ownership_deadline(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "transfer_ownership_deadline()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    future_fee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "future_fee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    future_admin_fee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "future_admin_fee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    future_owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "future_owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  A(overrides?: CallOverrides): Promise<BigNumber>;

  "A()"(overrides?: CallOverrides): Promise<BigNumber>;

  A_precise(overrides?: CallOverrides): Promise<BigNumber>;

  "A_precise()"(overrides?: CallOverrides): Promise<BigNumber>;

  balances(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(uint256)"(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

  "get_virtual_price()"(overrides?: CallOverrides): Promise<BigNumber>;

  calc_token_amount(
    amounts: [BigNumberish, BigNumberish],
    is_deposit: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calc_token_amount(uint256[2],bool)"(
    amounts: [BigNumberish, BigNumberish],
    is_deposit: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  add_liquidity(
    amounts: [BigNumberish, BigNumberish],
    min_mint_amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "add_liquidity(uint256[2],uint256)"(
    amounts: [BigNumberish, BigNumberish],
    min_mint_amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  get_dy(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "get_dy(int128,int128,uint256)"(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exchange(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    min_dy: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "exchange(int128,int128,uint256,uint256)"(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    min_dy: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  remove_liquidity(
    _amount: BigNumberish,
    _min_amounts: [BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "remove_liquidity(uint256,uint256[2])"(
    _amount: BigNumberish,
    _min_amounts: [BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  remove_liquidity_imbalance(
    _amounts: [BigNumberish, BigNumberish],
    _max_burn_amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "remove_liquidity_imbalance(uint256[2],uint256)"(
    _amounts: [BigNumberish, BigNumberish],
    _max_burn_amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calc_withdraw_one_coin(
    _token_amount: BigNumberish,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calc_withdraw_one_coin(uint256,int128)"(
    _token_amount: BigNumberish,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  remove_liquidity_one_coin(
    _token_amount: BigNumberish,
    i: BigNumberish,
    _min_amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "remove_liquidity_one_coin(uint256,int128,uint256)"(
    _token_amount: BigNumberish,
    i: BigNumberish,
    _min_amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ramp_A(
    _future_A: BigNumberish,
    _future_time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ramp_A(uint256,uint256)"(
    _future_A: BigNumberish,
    _future_time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stop_ramp_A(overrides?: Overrides): Promise<ContractTransaction>;

  "stop_ramp_A()"(overrides?: Overrides): Promise<ContractTransaction>;

  commit_new_fee(
    new_fee: BigNumberish,
    new_admin_fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commit_new_fee(uint256,uint256)"(
    new_fee: BigNumberish,
    new_admin_fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  apply_new_fee(overrides?: Overrides): Promise<ContractTransaction>;

  "apply_new_fee()"(overrides?: Overrides): Promise<ContractTransaction>;

  revert_new_parameters(overrides?: Overrides): Promise<ContractTransaction>;

  "revert_new_parameters()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    _owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commit_transfer_ownership(address)"(
    _owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  apply_transfer_ownership(overrides?: Overrides): Promise<ContractTransaction>;

  "apply_transfer_ownership()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revert_transfer_ownership(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revert_transfer_ownership()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw_admin_fees(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw_admin_fees()"(overrides?: Overrides): Promise<ContractTransaction>;

  donate_admin_fees(overrides?: Overrides): Promise<ContractTransaction>;

  "donate_admin_fees()"(overrides?: Overrides): Promise<ContractTransaction>;

  kill_me(overrides?: Overrides): Promise<ContractTransaction>;

  "kill_me()"(overrides?: Overrides): Promise<ContractTransaction>;

  unkill_me(overrides?: Overrides): Promise<ContractTransaction>;

  "unkill_me()"(overrides?: Overrides): Promise<ContractTransaction>;

  coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "coins(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  admin_balances(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "admin_balances(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

  "admin_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  lp_token(overrides?: CallOverrides): Promise<string>;

  "lp_token()"(overrides?: CallOverrides): Promise<string>;

  initial_A(overrides?: CallOverrides): Promise<BigNumber>;

  "initial_A()"(overrides?: CallOverrides): Promise<BigNumber>;

  future_A(overrides?: CallOverrides): Promise<BigNumber>;

  "future_A()"(overrides?: CallOverrides): Promise<BigNumber>;

  initial_A_time(overrides?: CallOverrides): Promise<BigNumber>;

  "initial_A_time()"(overrides?: CallOverrides): Promise<BigNumber>;

  future_A_time(overrides?: CallOverrides): Promise<BigNumber>;

  "future_A_time()"(overrides?: CallOverrides): Promise<BigNumber>;

  admin_actions_deadline(overrides?: CallOverrides): Promise<BigNumber>;

  "admin_actions_deadline()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer_ownership_deadline(overrides?: CallOverrides): Promise<BigNumber>;

  "transfer_ownership_deadline()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  future_fee(overrides?: CallOverrides): Promise<BigNumber>;

  "future_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  future_admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

  "future_admin_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  future_owner(overrides?: CallOverrides): Promise<string>;

  "future_owner()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    A(overrides?: CallOverrides): Promise<BigNumber>;

    "A()"(overrides?: CallOverrides): Promise<BigNumber>;

    A_precise(overrides?: CallOverrides): Promise<BigNumber>;

    "A_precise()"(overrides?: CallOverrides): Promise<BigNumber>;

    balances(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    "get_virtual_price()"(overrides?: CallOverrides): Promise<BigNumber>;

    calc_token_amount(
      amounts: [BigNumberish, BigNumberish],
      is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calc_token_amount(uint256[2],bool)"(
      amounts: [BigNumberish, BigNumberish],
      is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    add_liquidity(
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "add_liquidity(uint256[2],uint256)"(
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_dy(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get_dy(int128,int128,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchange(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchange(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove_liquidity(
      _amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "remove_liquidity(uint256,uint256[2])"(
      _amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    remove_liquidity_imbalance(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calc_withdraw_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calc_withdraw_one_coin(uint256,int128)"(
      _token_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove_liquidity_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ramp_A(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "ramp_A(uint256,uint256)"(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop_ramp_A(overrides?: CallOverrides): Promise<void>;

    "stop_ramp_A()"(overrides?: CallOverrides): Promise<void>;

    commit_new_fee(
      new_fee: BigNumberish,
      new_admin_fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "commit_new_fee(uint256,uint256)"(
      new_fee: BigNumberish,
      new_admin_fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    apply_new_fee(overrides?: CallOverrides): Promise<void>;

    "apply_new_fee()"(overrides?: CallOverrides): Promise<void>;

    revert_new_parameters(overrides?: CallOverrides): Promise<void>;

    "revert_new_parameters()"(overrides?: CallOverrides): Promise<void>;

    commit_transfer_ownership(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "commit_transfer_ownership(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    apply_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    "apply_transfer_ownership()"(overrides?: CallOverrides): Promise<void>;

    revert_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    "revert_transfer_ownership()"(overrides?: CallOverrides): Promise<void>;

    withdraw_admin_fees(overrides?: CallOverrides): Promise<void>;

    "withdraw_admin_fees()"(overrides?: CallOverrides): Promise<void>;

    donate_admin_fees(overrides?: CallOverrides): Promise<void>;

    "donate_admin_fees()"(overrides?: CallOverrides): Promise<void>;

    kill_me(overrides?: CallOverrides): Promise<void>;

    "kill_me()"(overrides?: CallOverrides): Promise<void>;

    unkill_me(overrides?: CallOverrides): Promise<void>;

    "unkill_me()"(overrides?: CallOverrides): Promise<void>;

    coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "coins(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    admin_balances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "admin_balances(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    "admin_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    lp_token(overrides?: CallOverrides): Promise<string>;

    "lp_token()"(overrides?: CallOverrides): Promise<string>;

    initial_A(overrides?: CallOverrides): Promise<BigNumber>;

    "initial_A()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_A(overrides?: CallOverrides): Promise<BigNumber>;

    "future_A()"(overrides?: CallOverrides): Promise<BigNumber>;

    initial_A_time(overrides?: CallOverrides): Promise<BigNumber>;

    "initial_A_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_A_time(overrides?: CallOverrides): Promise<BigNumber>;

    "future_A_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    admin_actions_deadline(overrides?: CallOverrides): Promise<BigNumber>;

    "admin_actions_deadline()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer_ownership_deadline(overrides?: CallOverrides): Promise<BigNumber>;

    "transfer_ownership_deadline()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    future_fee(overrides?: CallOverrides): Promise<BigNumber>;

    "future_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    "future_admin_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_owner(overrides?: CallOverrides): Promise<string>;

    "future_owner()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    TokenExchange(
      buyer: string | null,
      sold_id: null,
      tokens_sold: null,
      bought_id: null,
      tokens_bought: null
    ): EventFilter;

    TokenExchangeUnderlying(
      buyer: string | null,
      sold_id: null,
      tokens_sold: null,
      bought_id: null,
      tokens_bought: null
    ): EventFilter;

    AddLiquidity(
      provider: string | null,
      token_amounts: null,
      fees: null,
      invariant: null,
      token_supply: null
    ): EventFilter;

    RemoveLiquidity(
      provider: string | null,
      token_amounts: null,
      fees: null,
      token_supply: null
    ): EventFilter;

    RemoveLiquidityOne(
      provider: string | null,
      token_amount: null,
      coin_amount: null
    ): EventFilter;

    RemoveLiquidityImbalance(
      provider: string | null,
      token_amounts: null,
      fees: null,
      invariant: null,
      token_supply: null
    ): EventFilter;

    CommitNewAdmin(
      deadline: BigNumberish | null,
      admin: string | null
    ): EventFilter;

    NewAdmin(admin: string | null): EventFilter;

    CommitNewFee(
      deadline: BigNumberish | null,
      fee: null,
      admin_fee: null
    ): EventFilter;

    NewFee(fee: null, admin_fee: null): EventFilter;

    RampA(
      old_A: null,
      new_A: null,
      initial_time: null,
      future_time: null
    ): EventFilter;

    StopRampA(A: null, t: null): EventFilter;
  };

  estimateGas: {
    A(overrides?: CallOverrides): Promise<BigNumber>;

    "A()"(overrides?: CallOverrides): Promise<BigNumber>;

    A_precise(overrides?: CallOverrides): Promise<BigNumber>;

    "A_precise()"(overrides?: CallOverrides): Promise<BigNumber>;

    balances(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    "get_virtual_price()"(overrides?: CallOverrides): Promise<BigNumber>;

    calc_token_amount(
      amounts: [BigNumberish, BigNumberish],
      is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calc_token_amount(uint256[2],bool)"(
      amounts: [BigNumberish, BigNumberish],
      is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    add_liquidity(
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "add_liquidity(uint256[2],uint256)"(
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    get_dy(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get_dy(int128,int128,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchange(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "exchange(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    remove_liquidity(
      _amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "remove_liquidity(uint256,uint256[2])"(
      _amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    remove_liquidity_imbalance(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    calc_withdraw_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calc_withdraw_one_coin(uint256,int128)"(
      _token_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove_liquidity_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ramp_A(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ramp_A(uint256,uint256)"(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stop_ramp_A(overrides?: Overrides): Promise<BigNumber>;

    "stop_ramp_A()"(overrides?: Overrides): Promise<BigNumber>;

    commit_new_fee(
      new_fee: BigNumberish,
      new_admin_fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commit_new_fee(uint256,uint256)"(
      new_fee: BigNumberish,
      new_admin_fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    apply_new_fee(overrides?: Overrides): Promise<BigNumber>;

    "apply_new_fee()"(overrides?: Overrides): Promise<BigNumber>;

    revert_new_parameters(overrides?: Overrides): Promise<BigNumber>;

    "revert_new_parameters()"(overrides?: Overrides): Promise<BigNumber>;

    commit_transfer_ownership(
      _owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commit_transfer_ownership(address)"(
      _owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    apply_transfer_ownership(overrides?: Overrides): Promise<BigNumber>;

    "apply_transfer_ownership()"(overrides?: Overrides): Promise<BigNumber>;

    revert_transfer_ownership(overrides?: Overrides): Promise<BigNumber>;

    "revert_transfer_ownership()"(overrides?: Overrides): Promise<BigNumber>;

    withdraw_admin_fees(overrides?: Overrides): Promise<BigNumber>;

    "withdraw_admin_fees()"(overrides?: Overrides): Promise<BigNumber>;

    donate_admin_fees(overrides?: Overrides): Promise<BigNumber>;

    "donate_admin_fees()"(overrides?: Overrides): Promise<BigNumber>;

    kill_me(overrides?: Overrides): Promise<BigNumber>;

    "kill_me()"(overrides?: Overrides): Promise<BigNumber>;

    unkill_me(overrides?: Overrides): Promise<BigNumber>;

    "unkill_me()"(overrides?: Overrides): Promise<BigNumber>;

    coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "coins(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin_balances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "admin_balances(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    "admin_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    lp_token(overrides?: CallOverrides): Promise<BigNumber>;

    "lp_token()"(overrides?: CallOverrides): Promise<BigNumber>;

    initial_A(overrides?: CallOverrides): Promise<BigNumber>;

    "initial_A()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_A(overrides?: CallOverrides): Promise<BigNumber>;

    "future_A()"(overrides?: CallOverrides): Promise<BigNumber>;

    initial_A_time(overrides?: CallOverrides): Promise<BigNumber>;

    "initial_A_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_A_time(overrides?: CallOverrides): Promise<BigNumber>;

    "future_A_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    admin_actions_deadline(overrides?: CallOverrides): Promise<BigNumber>;

    "admin_actions_deadline()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer_ownership_deadline(overrides?: CallOverrides): Promise<BigNumber>;

    "transfer_ownership_deadline()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    future_fee(overrides?: CallOverrides): Promise<BigNumber>;

    "future_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    "future_admin_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_owner(overrides?: CallOverrides): Promise<BigNumber>;

    "future_owner()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "A()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    A_precise(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "A_precise()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balances(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_virtual_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "get_virtual_price()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calc_token_amount(
      amounts: [BigNumberish, BigNumberish],
      is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calc_token_amount(uint256[2],bool)"(
      amounts: [BigNumberish, BigNumberish],
      is_deposit: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add_liquidity(
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "add_liquidity(uint256[2],uint256)"(
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    get_dy(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get_dy(int128,int128,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchange(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "exchange(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    remove_liquidity(
      _amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove_liquidity(uint256,uint256[2])"(
      _amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    remove_liquidity_imbalance(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calc_withdraw_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calc_withdraw_one_coin(uint256,int128)"(
      _token_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove_liquidity_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ramp_A(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ramp_A(uint256,uint256)"(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stop_ramp_A(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop_ramp_A()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    commit_new_fee(
      new_fee: BigNumberish,
      new_admin_fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commit_new_fee(uint256,uint256)"(
      new_fee: BigNumberish,
      new_admin_fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    apply_new_fee(overrides?: Overrides): Promise<PopulatedTransaction>;

    "apply_new_fee()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    revert_new_parameters(overrides?: Overrides): Promise<PopulatedTransaction>;

    "revert_new_parameters()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      _owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commit_transfer_ownership(address)"(
      _owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "apply_transfer_ownership()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revert_transfer_ownership(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revert_transfer_ownership()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw_admin_fees(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw_admin_fees()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    donate_admin_fees(overrides?: Overrides): Promise<PopulatedTransaction>;

    "donate_admin_fees()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    kill_me(overrides?: Overrides): Promise<PopulatedTransaction>;

    "kill_me()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    unkill_me(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unkill_me()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    coins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "coins(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin_balances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "admin_balances(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin_fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lp_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lp_token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initial_A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initial_A()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "future_A()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initial_A_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initial_A_time()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    future_A_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "future_A_time()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin_actions_deadline(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "admin_actions_deadline()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer_ownership_deadline(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transfer_ownership_deadline()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    future_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "future_fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "future_admin_fee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    future_owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "future_owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
