/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StrikeSelectionInterface extends utils.Interface {
  contractName: "StrikeSelection";
  functions: {
    "delta()": FunctionFragment;
    "getStrikePrice(uint256,bool)": FunctionFragment;
    "optionsPremiumPricer()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDelta(uint256)": FunctionFragment;
    "setStep(uint256)": FunctionFragment;
    "step()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "volatilityOracle()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "delta", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStrikePrice",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "optionsPremiumPricer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDelta",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "step", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "volatilityOracle",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "delta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStrikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionsPremiumPricer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDelta", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "volatilityOracle",
    data: BytesLike
  ): Result;

  events: {
    "DeltaSet(uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StepSet(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeltaSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StepSet"): EventFragment;
}

export type DeltaSetEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { oldDelta: BigNumber; newDelta: BigNumber; owner: string }
>;

export type DeltaSetEventFilter = TypedEventFilter<DeltaSetEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type StepSetEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { oldStep: BigNumber; newStep: BigNumber; owner: string }
>;

export type StepSetEventFilter = TypedEventFilter<StepSetEvent>;

export interface StrikeSelection extends BaseContract {
  contractName: "StrikeSelection";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StrikeSelectionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    delta(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStrikePrice(
      expiryTimestamp: BigNumberish,
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newStrikePrice: BigNumber;
        newDelta: BigNumber;
      }
    >;

    optionsPremiumPricer(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDelta(
      newDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStep(
      newStep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    step(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    volatilityOracle(overrides?: CallOverrides): Promise<[string]>;
  };

  delta(overrides?: CallOverrides): Promise<BigNumber>;

  getStrikePrice(
    expiryTimestamp: BigNumberish,
    isPut: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { newStrikePrice: BigNumber; newDelta: BigNumber }
  >;

  optionsPremiumPricer(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDelta(
    newDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStep(
    newStep: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  step(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  volatilityOracle(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    delta(overrides?: CallOverrides): Promise<BigNumber>;

    getStrikePrice(
      expiryTimestamp: BigNumberish,
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newStrikePrice: BigNumber;
        newDelta: BigNumber;
      }
    >;

    optionsPremiumPricer(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDelta(newDelta: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setStep(newStep: BigNumberish, overrides?: CallOverrides): Promise<void>;

    step(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    volatilityOracle(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DeltaSet(uint256,uint256,address)"(
      oldDelta?: null,
      newDelta?: null,
      owner?: string | null
    ): DeltaSetEventFilter;
    DeltaSet(
      oldDelta?: null,
      newDelta?: null,
      owner?: string | null
    ): DeltaSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StepSet(uint256,uint256,address)"(
      oldStep?: null,
      newStep?: null,
      owner?: string | null
    ): StepSetEventFilter;
    StepSet(
      oldStep?: null,
      newStep?: null,
      owner?: string | null
    ): StepSetEventFilter;
  };

  estimateGas: {
    delta(overrides?: CallOverrides): Promise<BigNumber>;

    getStrikePrice(
      expiryTimestamp: BigNumberish,
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionsPremiumPricer(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDelta(
      newDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStep(
      newStep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    step(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    volatilityOracle(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    delta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStrikePrice(
      expiryTimestamp: BigNumberish,
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionsPremiumPricer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDelta(
      newDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStep(
      newStep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    step(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    volatilityOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
