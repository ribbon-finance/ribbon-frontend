/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LiquidityTokenMinterInterface extends ethers.utils.Interface {
  functions: {
    "update_mining_parameters()": FunctionFragment;
    "start_epoch_time_write()": FunctionFragment;
    "future_epoch_time_write()": FunctionFragment;
    "mint(address)": FunctionFragment;
    "mint_many(address[8])": FunctionFragment;
    "mint_for(address,address)": FunctionFragment;
    "toggle_approve_mint(address)": FunctionFragment;
    "recover_balance(address)": FunctionFragment;
    "commit_next_emission(uint256)": FunctionFragment;
    "commit_transfer_emergency_return(address)": FunctionFragment;
    "apply_transfer_emergency_return()": FunctionFragment;
    "commit_transfer_ownership(address)": FunctionFragment;
    "apply_transfer_ownership()": FunctionFragment;
    "mining_epoch()": FunctionFragment;
    "start_epoch_time()": FunctionFragment;
    "rate()": FunctionFragment;
    "committed_rate()": FunctionFragment;
    "is_start()": FunctionFragment;
    "token()": FunctionFragment;
    "controller()": FunctionFragment;
    "minted(address,address)": FunctionFragment;
    "allowed_to_mint_for(address,address)": FunctionFragment;
    "future_emergency_return()": FunctionFragment;
    "emergency_return()": FunctionFragment;
    "admin()": FunctionFragment;
    "future_admin()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "update_mining_parameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "start_epoch_time_write",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_epoch_time_write",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mint_many",
    values: [[string, string, string, string, string, string, string, string]]
  ): string;
  encodeFunctionData(
    functionFragment: "mint_for",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "toggle_approve_mint",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recover_balance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "commit_next_emission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commit_transfer_emergency_return",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "apply_transfer_emergency_return",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commit_transfer_ownership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "apply_transfer_ownership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mining_epoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "start_epoch_time",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "committed_rate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "is_start", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minted",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowed_to_mint_for",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "future_emergency_return",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergency_return",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "future_admin",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "update_mining_parameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "start_epoch_time_write",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_epoch_time_write",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint_many", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint_for", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggle_approve_mint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recover_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_next_emission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_transfer_emergency_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apply_transfer_emergency_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apply_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mining_epoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "start_epoch_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "committed_rate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "is_start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowed_to_mint_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_emergency_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergency_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_admin",
    data: BytesLike
  ): Result;

  events: {
    "Minted(address,address,uint256)": EventFragment;
    "UpdateMiningParameters(uint256,uint256)": EventFragment;
    "CommitNextEmission(uint256)": EventFragment;
    "CommitEmergencyReturn(address)": EventFragment;
    "ApplyEmergencyReturn(address)": EventFragment;
    "CommitOwnership(address)": EventFragment;
    "ApplyOwnership(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMiningParameters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitNextEmission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitEmergencyReturn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplyEmergencyReturn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplyOwnership"): EventFragment;
}

export class LiquidityTokenMinter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LiquidityTokenMinterInterface;

  functions: {
    update_mining_parameters(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "update_mining_parameters()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    start_epoch_time_write(overrides?: Overrides): Promise<ContractTransaction>;

    "start_epoch_time_write()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    future_epoch_time_write(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "future_epoch_time_write()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint(
      gauge_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address)"(
      gauge_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint_many(
      gauge_addrs: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint_many(address[8])"(
      gauge_addrs: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint_for(
      gauge_addr: string,
      _for: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint_for(address,address)"(
      gauge_addr: string,
      _for: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    toggle_approve_mint(
      minting_user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "toggle_approve_mint(address)"(
      minting_user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    recover_balance(
      _coin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recover_balance(address)"(
      _coin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commit_next_emission(
      _rate_per_week: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commit_next_emission(uint256)"(
      _rate_per_week: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commit_transfer_emergency_return(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commit_transfer_emergency_return(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    apply_transfer_emergency_return(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "apply_transfer_emergency_return()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commit_transfer_ownership(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "apply_transfer_ownership()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mining_epoch(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "mining_epoch()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    start_epoch_time(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "start_epoch_time()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    rate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "rate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    committed_rate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "committed_rate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    is_start(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "is_start()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    controller(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "controller()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    minted(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minted(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    allowed_to_mint_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "allowed_to_mint_for(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    future_emergency_return(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "future_emergency_return()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    emergency_return(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "emergency_return()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    admin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "admin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    future_admin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "future_admin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  update_mining_parameters(overrides?: Overrides): Promise<ContractTransaction>;

  "update_mining_parameters()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  start_epoch_time_write(overrides?: Overrides): Promise<ContractTransaction>;

  "start_epoch_time_write()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  future_epoch_time_write(overrides?: Overrides): Promise<ContractTransaction>;

  "future_epoch_time_write()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint(gauge_addr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "mint(address)"(
    gauge_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint_many(
    gauge_addrs: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint_many(address[8])"(
    gauge_addrs: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint_for(
    gauge_addr: string,
    _for: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint_for(address,address)"(
    gauge_addr: string,
    _for: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  toggle_approve_mint(
    minting_user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "toggle_approve_mint(address)"(
    minting_user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  recover_balance(
    _coin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recover_balance(address)"(
    _coin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commit_next_emission(
    _rate_per_week: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commit_next_emission(uint256)"(
    _rate_per_week: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commit_transfer_emergency_return(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commit_transfer_emergency_return(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  apply_transfer_emergency_return(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "apply_transfer_emergency_return()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commit_transfer_ownership(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  apply_transfer_ownership(overrides?: Overrides): Promise<ContractTransaction>;

  "apply_transfer_ownership()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mining_epoch(overrides?: CallOverrides): Promise<BigNumber>;

  "mining_epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  start_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

  "start_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  "rate()"(overrides?: CallOverrides): Promise<BigNumber>;

  committed_rate(overrides?: CallOverrides): Promise<BigNumber>;

  "committed_rate()"(overrides?: CallOverrides): Promise<BigNumber>;

  is_start(overrides?: CallOverrides): Promise<boolean>;

  "is_start()"(overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  minted(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "minted(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowed_to_mint_for(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "allowed_to_mint_for(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  future_emergency_return(overrides?: CallOverrides): Promise<string>;

  "future_emergency_return()"(overrides?: CallOverrides): Promise<string>;

  emergency_return(overrides?: CallOverrides): Promise<string>;

  "emergency_return()"(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  "future_admin()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    update_mining_parameters(overrides?: CallOverrides): Promise<void>;

    "update_mining_parameters()"(overrides?: CallOverrides): Promise<void>;

    start_epoch_time_write(overrides?: CallOverrides): Promise<BigNumber>;

    "start_epoch_time_write()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_time_write(overrides?: CallOverrides): Promise<BigNumber>;

    "future_epoch_time_write()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(gauge_addr: string, overrides?: CallOverrides): Promise<void>;

    "mint(address)"(
      gauge_addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mint_many(
      gauge_addrs: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "mint_many(address[8])"(
      gauge_addrs: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    mint_for(
      gauge_addr: string,
      _for: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint_for(address,address)"(
      gauge_addr: string,
      _for: string,
      overrides?: CallOverrides
    ): Promise<void>;

    toggle_approve_mint(
      minting_user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "toggle_approve_mint(address)"(
      minting_user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recover_balance(_coin: string, overrides?: CallOverrides): Promise<boolean>;

    "recover_balance(address)"(
      _coin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    commit_next_emission(
      _rate_per_week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "commit_next_emission(uint256)"(
      _rate_per_week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commit_transfer_emergency_return(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "commit_transfer_emergency_return(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    apply_transfer_emergency_return(overrides?: CallOverrides): Promise<void>;

    "apply_transfer_emergency_return()"(
      overrides?: CallOverrides
    ): Promise<void>;

    commit_transfer_ownership(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "commit_transfer_ownership(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    apply_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    "apply_transfer_ownership()"(overrides?: CallOverrides): Promise<void>;

    mining_epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "mining_epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    start_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    "start_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    "rate()"(overrides?: CallOverrides): Promise<BigNumber>;

    committed_rate(overrides?: CallOverrides): Promise<BigNumber>;

    "committed_rate()"(overrides?: CallOverrides): Promise<BigNumber>;

    is_start(overrides?: CallOverrides): Promise<boolean>;

    "is_start()"(overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    minted(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minted(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowed_to_mint_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowed_to_mint_for(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    future_emergency_return(overrides?: CallOverrides): Promise<string>;

    "future_emergency_return()"(overrides?: CallOverrides): Promise<string>;

    emergency_return(overrides?: CallOverrides): Promise<string>;

    "emergency_return()"(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    future_admin(overrides?: CallOverrides): Promise<string>;

    "future_admin()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Minted(recipient: string | null, gauge: null, minted: null): EventFilter;

    UpdateMiningParameters(time: null, rate: null): EventFilter;

    CommitNextEmission(rate: null): EventFilter;

    CommitEmergencyReturn(admin: null): EventFilter;

    ApplyEmergencyReturn(admin: null): EventFilter;

    CommitOwnership(admin: null): EventFilter;

    ApplyOwnership(admin: null): EventFilter;
  };

  estimateGas: {
    update_mining_parameters(overrides?: Overrides): Promise<BigNumber>;

    "update_mining_parameters()"(overrides?: Overrides): Promise<BigNumber>;

    start_epoch_time_write(overrides?: Overrides): Promise<BigNumber>;

    "start_epoch_time_write()"(overrides?: Overrides): Promise<BigNumber>;

    future_epoch_time_write(overrides?: Overrides): Promise<BigNumber>;

    "future_epoch_time_write()"(overrides?: Overrides): Promise<BigNumber>;

    mint(gauge_addr: string, overrides?: Overrides): Promise<BigNumber>;

    "mint(address)"(
      gauge_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mint_many(
      gauge_addrs: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint_many(address[8])"(
      gauge_addrs: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    mint_for(
      gauge_addr: string,
      _for: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint_for(address,address)"(
      gauge_addr: string,
      _for: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    toggle_approve_mint(
      minting_user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "toggle_approve_mint(address)"(
      minting_user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    recover_balance(_coin: string, overrides?: Overrides): Promise<BigNumber>;

    "recover_balance(address)"(
      _coin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commit_next_emission(
      _rate_per_week: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commit_next_emission(uint256)"(
      _rate_per_week: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commit_transfer_emergency_return(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commit_transfer_emergency_return(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    apply_transfer_emergency_return(overrides?: Overrides): Promise<BigNumber>;

    "apply_transfer_emergency_return()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commit_transfer_ownership(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    apply_transfer_ownership(overrides?: Overrides): Promise<BigNumber>;

    "apply_transfer_ownership()"(overrides?: Overrides): Promise<BigNumber>;

    mining_epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "mining_epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    start_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    "start_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    "rate()"(overrides?: CallOverrides): Promise<BigNumber>;

    committed_rate(overrides?: CallOverrides): Promise<BigNumber>;

    "committed_rate()"(overrides?: CallOverrides): Promise<BigNumber>;

    is_start(overrides?: CallOverrides): Promise<BigNumber>;

    "is_start()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    minted(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minted(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowed_to_mint_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowed_to_mint_for(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    future_emergency_return(overrides?: CallOverrides): Promise<BigNumber>;

    "future_emergency_return()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergency_return(overrides?: CallOverrides): Promise<BigNumber>;

    "emergency_return()"(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;

    "future_admin()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    update_mining_parameters(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "update_mining_parameters()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    start_epoch_time_write(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "start_epoch_time_write()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    future_epoch_time_write(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "future_epoch_time_write()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint(
      gauge_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address)"(
      gauge_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint_many(
      gauge_addrs: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint_many(address[8])"(
      gauge_addrs: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint_for(
      gauge_addr: string,
      _for: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint_for(address,address)"(
      gauge_addr: string,
      _for: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    toggle_approve_mint(
      minting_user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "toggle_approve_mint(address)"(
      minting_user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    recover_balance(
      _coin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recover_balance(address)"(
      _coin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commit_next_emission(
      _rate_per_week: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commit_next_emission(uint256)"(
      _rate_per_week: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commit_transfer_emergency_return(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commit_transfer_emergency_return(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    apply_transfer_emergency_return(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "apply_transfer_emergency_return()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commit_transfer_ownership(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "apply_transfer_ownership()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mining_epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mining_epoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start_epoch_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "start_epoch_time()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    committed_rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "committed_rate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    is_start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "is_start()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minted(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minted(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowed_to_mint_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowed_to_mint_for(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    future_emergency_return(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "future_emergency_return()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergency_return(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emergency_return()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "future_admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
