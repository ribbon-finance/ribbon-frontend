/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PoolFactoryInterface extends utils.Interface {
  contractName: "PoolFactory";
  functions: {
    "auction()": FunctionFragment;
    "burnStake()": FunctionFragment;
    "closePool()": FunctionFragment;
    "createPool(address,address)": FunctionFragment;
    "createPoolInitial(address,address,bytes32,string)": FunctionFragment;
    "currencyAllowed(address)": FunctionFragment;
    "flashGovernor()": FunctionFragment;
    "getPoolSymbol(address,address)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "insuranceFactor()": FunctionFragment;
    "interestRateModel()": FunctionFragment;
    "isPool(address)": FunctionFragment;
    "keeper()": FunctionFragment;
    "managerInfo(address)": FunctionFragment;
    "maxInactivePeriod()": FunctionFragment;
    "owner()": FunctionFragment;
    "periodToStartAuction()": FunctionFragment;
    "poolBeacon()": FunctionFragment;
    "provisionalDefaultUtilization()": FunctionFragment;
    "rbn()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveFactor()": FunctionFragment;
    "setCurrency(address,bool)": FunctionFragment;
    "setInsuranceFactor(uint256)": FunctionFragment;
    "setInterestRateModel(address)": FunctionFragment;
    "setKeeper(address)": FunctionFragment;
    "setManagerInfo(address,bytes32)": FunctionFragment;
    "setMaxInactivePeriod(uint256)": FunctionFragment;
    "setPeriodToStartAuction(uint256)": FunctionFragment;
    "setPoolBeacon(address)": FunctionFragment;
    "setPoolRewardPerSecond(address,uint256)": FunctionFragment;
    "setProvisionalDefaultUtilization(uint256)": FunctionFragment;
    "setReserveFactor(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setWarningGracePeriod(uint256)": FunctionFragment;
    "setWarningUtilization(uint256)": FunctionFragment;
    "staking()": FunctionFragment;
    "sweep(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferPool(address,address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "usedManagerSymbols(string)": FunctionFragment;
    "warningGracePeriod()": FunctionFragment;
    "warningUtilization()": FunctionFragment;
    "withdrawReward(address[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "auction", values?: undefined): string;
  encodeFunctionData(functionFragment: "burnStake", values?: undefined): string;
  encodeFunctionData(functionFragment: "closePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPoolInitial",
    values: [string, string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "flashGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolSymbol",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateModel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPool", values: [string]): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(functionFragment: "managerInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maxInactivePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodToStartAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolBeacon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "provisionalDefaultUtilization",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rbn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrency",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setInsuranceFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateModel",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setKeeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setManagerInfo",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxInactivePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeriodToStartAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolBeacon",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolRewardPerSecond",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProvisionalDefaultUtilization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWarningGracePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWarningUtilization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPool",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usedManagerSymbols",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "warningGracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "warningUtilization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values: [string[]]
  ): string;

  decodeFunctionResult(functionFragment: "auction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPoolInitial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insuranceFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxInactivePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodToStartAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolBeacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provisionalDefaultUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rbn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInsuranceFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManagerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxInactivePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPeriodToStartAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolBeacon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolRewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProvisionalDefaultUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWarningGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWarningUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usedManagerSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "warningGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "warningUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;

  events: {
    "CurrencySet(address,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "InsuranceFactorSet(uint256)": EventFragment;
    "InterestRateModelSet(address)": EventFragment;
    "KeeperSet(address)": EventFragment;
    "ManagerInfoSet(address,bytes32)": EventFragment;
    "MaxInactivePeriodSet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PeriodToStartAuctionSet(uint256)": EventFragment;
    "PoolBeaconSet(address)": EventFragment;
    "PoolClosed(address,address)": EventFragment;
    "PoolCreated(address,address,address)": EventFragment;
    "PoolRewardPerSecondSet(address,uint256)": EventFragment;
    "PoolTransferred(address,address,address)": EventFragment;
    "ProvisionalDefaultUtilizationSet(uint256)": EventFragment;
    "ReserveFactorSet(uint256)": EventFragment;
    "TreasurySet(address)": EventFragment;
    "WarningGracePeriodSet(uint256)": EventFragment;
    "WarningUtilizationSet(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CurrencySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsuranceFactorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestRateModelSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerInfoSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxInactivePeriodSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodToStartAuctionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolBeaconSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolRewardPerSecondSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProvisionalDefaultUtilizationSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveFactorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasurySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarningGracePeriodSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarningUtilizationSet"): EventFragment;
}

export type CurrencySetEvent = TypedEvent<
  [string, boolean],
  { currency: string; allowed: boolean }
>;

export type CurrencySetEventFilter = TypedEventFilter<CurrencySetEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type InsuranceFactorSetEvent = TypedEvent<
  [BigNumber],
  { factor: BigNumber }
>;

export type InsuranceFactorSetEventFilter =
  TypedEventFilter<InsuranceFactorSetEvent>;

export type InterestRateModelSetEvent = TypedEvent<
  [string],
  { newModel: string }
>;

export type InterestRateModelSetEventFilter =
  TypedEventFilter<InterestRateModelSetEvent>;

export type KeeperSetEvent = TypedEvent<[string], { newKeeper: string }>;

export type KeeperSetEventFilter = TypedEventFilter<KeeperSetEvent>;

export type ManagerInfoSetEvent = TypedEvent<
  [string, string],
  { manager: string; ipfsHash: string }
>;

export type ManagerInfoSetEventFilter = TypedEventFilter<ManagerInfoSetEvent>;

export type MaxInactivePeriodSetEvent = TypedEvent<
  [BigNumber],
  { period: BigNumber }
>;

export type MaxInactivePeriodSetEventFilter =
  TypedEventFilter<MaxInactivePeriodSetEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PeriodToStartAuctionSetEvent = TypedEvent<
  [BigNumber],
  { period: BigNumber }
>;

export type PeriodToStartAuctionSetEventFilter =
  TypedEventFilter<PeriodToStartAuctionSetEvent>;

export type PoolBeaconSetEvent = TypedEvent<
  [string],
  { newPoolBeacon: string }
>;

export type PoolBeaconSetEventFilter = TypedEventFilter<PoolBeaconSetEvent>;

export type PoolClosedEvent = TypedEvent<
  [string, string],
  { pool: string; manager: string }
>;

export type PoolClosedEventFilter = TypedEventFilter<PoolClosedEvent>;

export type PoolCreatedEvent = TypedEvent<
  [string, string, string],
  { pool: string; manager: string; currency: string }
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export type PoolRewardPerSecondSetEvent = TypedEvent<
  [string, BigNumber],
  { pool: string; rewardPerSecond: BigNumber }
>;

export type PoolRewardPerSecondSetEventFilter =
  TypedEventFilter<PoolRewardPerSecondSetEvent>;

export type PoolTransferredEvent = TypedEvent<
  [string, string, string],
  { pool: string; oldManager: string; newManager: string }
>;

export type PoolTransferredEventFilter = TypedEventFilter<PoolTransferredEvent>;

export type ProvisionalDefaultUtilizationSetEvent = TypedEvent<
  [BigNumber],
  { utilization: BigNumber }
>;

export type ProvisionalDefaultUtilizationSetEventFilter =
  TypedEventFilter<ProvisionalDefaultUtilizationSetEvent>;

export type ReserveFactorSetEvent = TypedEvent<
  [BigNumber],
  { factor: BigNumber }
>;

export type ReserveFactorSetEventFilter =
  TypedEventFilter<ReserveFactorSetEvent>;

export type TreasurySetEvent = TypedEvent<[string], { newTreasury: string }>;

export type TreasurySetEventFilter = TypedEventFilter<TreasurySetEvent>;

export type WarningGracePeriodSetEvent = TypedEvent<
  [BigNumber],
  { period: BigNumber }
>;

export type WarningGracePeriodSetEventFilter =
  TypedEventFilter<WarningGracePeriodSetEvent>;

export type WarningUtilizationSetEvent = TypedEvent<
  [BigNumber],
  { utilization: BigNumber }
>;

export type WarningUtilizationSetEventFilter =
  TypedEventFilter<WarningUtilizationSetEvent>;

export interface PoolFactory extends BaseContract {
  contractName: "PoolFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auction(overrides?: CallOverrides): Promise<[string]>;

    burnStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPool(
      manager: string,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPoolInitial(
      manager: string,
      currency: string,
      ipfsHash: BytesLike,
      managerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currencyAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    flashGovernor(overrides?: CallOverrides): Promise<[string]>;

    getPoolSymbol(
      currency: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      rbn_: string,
      staking_: string,
      poolBeacon_: string,
      interestRateModel_: string,
      auction_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insuranceFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    interestRateModel(overrides?: CallOverrides): Promise<[string]>;

    isPool(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    managerInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, BigNumber, string, string] & {
        currency: string;
        pool: string;
        staker: string;
        proposalId: number;
        stakedAmount: BigNumber;
        ipfsHash: string;
        managerSymbol: string;
      }
    >;

    maxInactivePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    periodToStartAuction(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolBeacon(overrides?: CallOverrides): Promise<[string]>;

    provisionalDefaultUtilization(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rbn(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCurrency(
      currency: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInsuranceFactor(
      insuranceFactor_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInterestRateModel(
      interestRateModel_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      keeper_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManagerInfo(
      manager: string,
      ipfsHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxInactivePeriod(
      maxInactivePeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPeriodToStartAuction(
      periodToStartAuction_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolBeacon(
      poolBeacon_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolRewardPerSecond(
      pool: string,
      rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProvisionalDefaultUtilization(
      provisionalDefaultUtilization_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveFactor(
      reserveFactor_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWarningGracePeriod(
      warningGracePeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWarningUtilization(
      warningUtilization_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staking(overrides?: CallOverrides): Promise<[string]>;

    sweep(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferPool(
      oldManager: string,
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    usedManagerSymbols(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    warningGracePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    warningUtilization(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawReward(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  auction(overrides?: CallOverrides): Promise<string>;

  burnStake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPool(
    manager: string,
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPoolInitial(
    manager: string,
    currency: string,
    ipfsHash: BytesLike,
    managerSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currencyAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  flashGovernor(overrides?: CallOverrides): Promise<string>;

  getPoolSymbol(
    currency: string,
    manager: string,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    rbn_: string,
    staking_: string,
    poolBeacon_: string,
    interestRateModel_: string,
    auction_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insuranceFactor(overrides?: CallOverrides): Promise<BigNumber>;

  interestRateModel(overrides?: CallOverrides): Promise<string>;

  isPool(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  keeper(overrides?: CallOverrides): Promise<string>;

  managerInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, BigNumber, string, string] & {
      currency: string;
      pool: string;
      staker: string;
      proposalId: number;
      stakedAmount: BigNumber;
      ipfsHash: string;
      managerSymbol: string;
    }
  >;

  maxInactivePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  periodToStartAuction(overrides?: CallOverrides): Promise<BigNumber>;

  poolBeacon(overrides?: CallOverrides): Promise<string>;

  provisionalDefaultUtilization(overrides?: CallOverrides): Promise<BigNumber>;

  rbn(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

  setCurrency(
    currency: string,
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInsuranceFactor(
    insuranceFactor_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInterestRateModel(
    interestRateModel_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    keeper_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManagerInfo(
    manager: string,
    ipfsHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxInactivePeriod(
    maxInactivePeriod_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPeriodToStartAuction(
    periodToStartAuction_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolBeacon(
    poolBeacon_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolRewardPerSecond(
    pool: string,
    rewardPerSecond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProvisionalDefaultUtilization(
    provisionalDefaultUtilization_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveFactor(
    reserveFactor_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    treasury_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWarningGracePeriod(
    warningGracePeriod_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWarningUtilization(
    warningUtilization_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staking(overrides?: CallOverrides): Promise<string>;

  sweep(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferPool(
    oldManager: string,
    newManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  usedManagerSymbols(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  warningGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  warningUtilization(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawReward(
    pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auction(overrides?: CallOverrides): Promise<string>;

    burnStake(overrides?: CallOverrides): Promise<void>;

    closePool(overrides?: CallOverrides): Promise<void>;

    createPool(
      manager: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createPoolInitial(
      manager: string,
      currency: string,
      ipfsHash: BytesLike,
      managerSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    currencyAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    flashGovernor(overrides?: CallOverrides): Promise<string>;

    getPoolSymbol(
      currency: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      rbn_: string,
      staking_: string,
      poolBeacon_: string,
      interestRateModel_: string,
      auction_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    insuranceFactor(overrides?: CallOverrides): Promise<BigNumber>;

    interestRateModel(overrides?: CallOverrides): Promise<string>;

    isPool(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    keeper(overrides?: CallOverrides): Promise<string>;

    managerInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, BigNumber, string, string] & {
        currency: string;
        pool: string;
        staker: string;
        proposalId: number;
        stakedAmount: BigNumber;
        ipfsHash: string;
        managerSymbol: string;
      }
    >;

    maxInactivePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    periodToStartAuction(overrides?: CallOverrides): Promise<BigNumber>;

    poolBeacon(overrides?: CallOverrides): Promise<string>;

    provisionalDefaultUtilization(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rbn(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    setCurrency(
      currency: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setInsuranceFactor(
      insuranceFactor_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestRateModel(
      interestRateModel_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(keeper_: string, overrides?: CallOverrides): Promise<void>;

    setManagerInfo(
      manager: string,
      ipfsHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxInactivePeriod(
      maxInactivePeriod_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPeriodToStartAuction(
      periodToStartAuction_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolBeacon(
      poolBeacon_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolRewardPerSecond(
      pool: string,
      rewardPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProvisionalDefaultUtilization(
      provisionalDefaultUtilization_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveFactor(
      reserveFactor_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(treasury_: string, overrides?: CallOverrides): Promise<void>;

    setWarningGracePeriod(
      warningGracePeriod_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWarningUtilization(
      warningUtilization_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    staking(overrides?: CallOverrides): Promise<string>;

    sweep(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPool(
      oldManager: string,
      newManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    usedManagerSymbols(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    warningGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    warningUtilization(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawReward(pools: string[], overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CurrencySet(address,bool)"(
      currency?: null,
      allowed?: null
    ): CurrencySetEventFilter;
    CurrencySet(currency?: null, allowed?: null): CurrencySetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InsuranceFactorSet(uint256)"(factor?: null): InsuranceFactorSetEventFilter;
    InsuranceFactorSet(factor?: null): InsuranceFactorSetEventFilter;

    "InterestRateModelSet(address)"(
      newModel?: null
    ): InterestRateModelSetEventFilter;
    InterestRateModelSet(newModel?: null): InterestRateModelSetEventFilter;

    "KeeperSet(address)"(newKeeper?: null): KeeperSetEventFilter;
    KeeperSet(newKeeper?: null): KeeperSetEventFilter;

    "ManagerInfoSet(address,bytes32)"(
      manager?: null,
      ipfsHash?: null
    ): ManagerInfoSetEventFilter;
    ManagerInfoSet(manager?: null, ipfsHash?: null): ManagerInfoSetEventFilter;

    "MaxInactivePeriodSet(uint256)"(
      period?: null
    ): MaxInactivePeriodSetEventFilter;
    MaxInactivePeriodSet(period?: null): MaxInactivePeriodSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PeriodToStartAuctionSet(uint256)"(
      period?: null
    ): PeriodToStartAuctionSetEventFilter;
    PeriodToStartAuctionSet(period?: null): PeriodToStartAuctionSetEventFilter;

    "PoolBeaconSet(address)"(newPoolBeacon?: null): PoolBeaconSetEventFilter;
    PoolBeaconSet(newPoolBeacon?: null): PoolBeaconSetEventFilter;

    "PoolClosed(address,address)"(
      pool?: string | null,
      manager?: string | null
    ): PoolClosedEventFilter;
    PoolClosed(
      pool?: string | null,
      manager?: string | null
    ): PoolClosedEventFilter;

    "PoolCreated(address,address,address)"(
      pool?: string | null,
      manager?: string | null,
      currency?: string | null
    ): PoolCreatedEventFilter;
    PoolCreated(
      pool?: string | null,
      manager?: string | null,
      currency?: string | null
    ): PoolCreatedEventFilter;

    "PoolRewardPerSecondSet(address,uint256)"(
      pool?: string | null,
      rewardPerSecond?: null
    ): PoolRewardPerSecondSetEventFilter;
    PoolRewardPerSecondSet(
      pool?: string | null,
      rewardPerSecond?: null
    ): PoolRewardPerSecondSetEventFilter;

    "PoolTransferred(address,address,address)"(
      pool?: string | null,
      oldManager?: string | null,
      newManager?: string | null
    ): PoolTransferredEventFilter;
    PoolTransferred(
      pool?: string | null,
      oldManager?: string | null,
      newManager?: string | null
    ): PoolTransferredEventFilter;

    "ProvisionalDefaultUtilizationSet(uint256)"(
      utilization?: null
    ): ProvisionalDefaultUtilizationSetEventFilter;
    ProvisionalDefaultUtilizationSet(
      utilization?: null
    ): ProvisionalDefaultUtilizationSetEventFilter;

    "ReserveFactorSet(uint256)"(factor?: null): ReserveFactorSetEventFilter;
    ReserveFactorSet(factor?: null): ReserveFactorSetEventFilter;

    "TreasurySet(address)"(newTreasury?: null): TreasurySetEventFilter;
    TreasurySet(newTreasury?: null): TreasurySetEventFilter;

    "WarningGracePeriodSet(uint256)"(
      period?: null
    ): WarningGracePeriodSetEventFilter;
    WarningGracePeriodSet(period?: null): WarningGracePeriodSetEventFilter;

    "WarningUtilizationSet(uint256)"(
      utilization?: null
    ): WarningUtilizationSetEventFilter;
    WarningUtilizationSet(utilization?: null): WarningUtilizationSetEventFilter;
  };

  estimateGas: {
    auction(overrides?: CallOverrides): Promise<BigNumber>;

    burnStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPool(
      manager: string,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPoolInitial(
      manager: string,
      currency: string,
      ipfsHash: BytesLike,
      managerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currencyAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolSymbol(
      currency: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      rbn_: string,
      staking_: string,
      poolBeacon_: string,
      interestRateModel_: string,
      auction_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insuranceFactor(overrides?: CallOverrides): Promise<BigNumber>;

    interestRateModel(overrides?: CallOverrides): Promise<BigNumber>;

    isPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    managerInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxInactivePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    periodToStartAuction(overrides?: CallOverrides): Promise<BigNumber>;

    poolBeacon(overrides?: CallOverrides): Promise<BigNumber>;

    provisionalDefaultUtilization(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rbn(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    setCurrency(
      currency: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInsuranceFactor(
      insuranceFactor_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInterestRateModel(
      interestRateModel_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      keeper_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManagerInfo(
      manager: string,
      ipfsHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxInactivePeriod(
      maxInactivePeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPeriodToStartAuction(
      periodToStartAuction_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolBeacon(
      poolBeacon_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolRewardPerSecond(
      pool: string,
      rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProvisionalDefaultUtilization(
      provisionalDefaultUtilization_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveFactor(
      reserveFactor_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWarningGracePeriod(
      warningGracePeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWarningUtilization(
      warningUtilization_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferPool(
      oldManager: string,
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    usedManagerSymbols(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    warningGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    warningUtilization(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawReward(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPool(
      manager: string,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPoolInitial(
      manager: string,
      currency: string,
      ipfsHash: BytesLike,
      managerSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currencyAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolSymbol(
      currency: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      rbn_: string,
      staking_: string,
      poolBeacon_: string,
      interestRateModel_: string,
      auction_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insuranceFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxInactivePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodToStartAuction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolBeacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provisionalDefaultUtilization(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rbn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCurrency(
      currency: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInsuranceFactor(
      insuranceFactor_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInterestRateModel(
      interestRateModel_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      keeper_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManagerInfo(
      manager: string,
      ipfsHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxInactivePeriod(
      maxInactivePeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPeriodToStartAuction(
      periodToStartAuction_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolBeacon(
      poolBeacon_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolRewardPerSecond(
      pool: string,
      rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProvisionalDefaultUtilization(
      provisionalDefaultUtilization_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveFactor(
      reserveFactor_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWarningGracePeriod(
      warningGracePeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWarningUtilization(
      warningUtilization_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweep(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferPool(
      oldManager: string,
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usedManagerSymbols(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warningGracePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warningUtilization(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
