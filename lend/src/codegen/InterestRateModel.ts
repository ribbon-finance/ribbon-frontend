/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface InterestRateModelInterface extends utils.Interface {
  contractName: "InterestRateModel";
  functions: {
    "MAX_RATE()": FunctionFragment;
    "SECONDS_PER_YEAR()": FunctionFragment;
    "TYPE()": FunctionFragment;
    "configure(uint256,uint256,uint256,uint256)": FunctionFragment;
    "fullRate()": FunctionFragment;
    "getBorrowRate(uint256,uint256,uint256)": FunctionFragment;
    "getSupplyRate(uint256,uint256,uint256,uint256)": FunctionFragment;
    "kink()": FunctionFragment;
    "kinkRate()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "utilizationRate(uint256,uint256,uint256)": FunctionFragment;
    "zeroRate()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MAX_RATE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TYPE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "configure",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fullRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBorrowRate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyRate",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "kink", values?: undefined): string;
  encodeFunctionData(functionFragment: "kinkRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "utilizationRate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "zeroRate", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_RATE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TYPE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configure", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fullRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kinkRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "utilizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeroRate", data: BytesLike): Result;

  events: {
    "Configured(uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Configured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ConfiguredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    zeroRate: BigNumber;
    fullRate: BigNumber;
    kink: BigNumber;
    kinkRate: BigNumber;
  }
>;

export type ConfiguredEventFilter = TypedEventFilter<ConfiguredEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface InterestRateModel extends BaseContract {
  contractName: "InterestRateModel";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InterestRateModelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    TYPE(overrides?: CallOverrides): Promise<[string]>;

    configure(
      zeroRate_: BigNumberish,
      fullRate_: BigNumberish,
      kink_: BigNumberish,
      kinkRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fullRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBorrowRate(
      balance: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSupplyRate(
      balance: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    kink(overrides?: CallOverrides): Promise<[BigNumber]>;

    kinkRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    utilizationRate(
      balance: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    zeroRate(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MAX_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  TYPE(overrides?: CallOverrides): Promise<string>;

  configure(
    zeroRate_: BigNumberish,
    fullRate_: BigNumberish,
    kink_: BigNumberish,
    kinkRate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fullRate(overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowRate(
    balance: BigNumberish,
    borrows: BigNumberish,
    reserves: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSupplyRate(
    balance: BigNumberish,
    borrows: BigNumberish,
    reserves: BigNumberish,
    reserveFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  kink(overrides?: CallOverrides): Promise<BigNumber>;

  kinkRate(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  utilizationRate(
    balance: BigNumberish,
    borrows: BigNumberish,
    reserves: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  zeroRate(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MAX_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    TYPE(overrides?: CallOverrides): Promise<string>;

    configure(
      zeroRate_: BigNumberish,
      fullRate_: BigNumberish,
      kink_: BigNumberish,
      kinkRate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fullRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowRate(
      balance: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyRate(
      balance: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kink(overrides?: CallOverrides): Promise<BigNumber>;

    kinkRate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    utilizationRate(
      balance: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zeroRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Configured(uint256,uint256,uint256,uint256)"(
      zeroRate?: null,
      fullRate?: null,
      kink?: null,
      kinkRate?: null
    ): ConfiguredEventFilter;
    Configured(
      zeroRate?: null,
      fullRate?: null,
      kink?: null,
      kinkRate?: null
    ): ConfiguredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    MAX_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    configure(
      zeroRate_: BigNumberish,
      fullRate_: BigNumberish,
      kink_: BigNumberish,
      kinkRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fullRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowRate(
      balance: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyRate(
      balance: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kink(overrides?: CallOverrides): Promise<BigNumber>;

    kinkRate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    utilizationRate(
      balance: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zeroRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    configure(
      zeroRate_: BigNumberish,
      fullRate_: BigNumberish,
      kink_: BigNumberish,
      kinkRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fullRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowRate(
      balance: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplyRate(
      balance: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kink(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kinkRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    utilizationRate(
      balance: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zeroRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
