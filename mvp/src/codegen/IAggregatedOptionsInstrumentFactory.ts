/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer } from "ethers";
import { Provider } from "@ethersproject/providers";

import type { IAggregatedOptionsInstrument } from "./IAggregatedOptionsInstrument";

export class IAggregatedOptionsInstrumentFactory {
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAggregatedOptionsInstrument {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IAggregatedOptionsInstrument;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "purchaseAmount",
        type: "uint256",
      },
    ],
    name: "getBestTrade",
    outputs: [
      {
        internalType: "string[]",
        name: "venues",
        type: "string[]",
      },
      {
        internalType: "uint8[]",
        name: "optionTypes",
        type: "uint8[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "premiums",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "venues",
        type: "string[]",
      },
      {
        internalType: "enum OptionType[]",
        name: "optionTypes",
        type: "uint8[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "buyInstrument",
    outputs: [
      {
        internalType: "uint256",
        name: "positionID",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "positionID",
        type: "uint256",
      },
    ],
    name: "exercise",
    outputs: [
      {
        internalType: "uint256",
        name: "profit",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];
