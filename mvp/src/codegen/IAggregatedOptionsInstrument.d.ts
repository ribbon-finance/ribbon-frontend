/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAggregatedOptionsInstrumentInterface extends ethers.utils.Interface {
  functions: {
    "getBestTrade(uint256)": FunctionFragment;
    "buyInstrument(string[],uint8[],uint256[])": FunctionFragment;
    "exercise(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBestTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyInstrument",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exercise",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBestTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyInstrument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exercise", data: BytesLike): Result;

  events: {};
}

export class IAggregatedOptionsInstrument extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAggregatedOptionsInstrumentInterface;

  functions: {
    getBestTrade(
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      venues: string[];
      optionTypes: number[];
      amounts: BigNumber[];
      premiums: BigNumber[];
      0: string[];
      1: number[];
      2: BigNumber[];
      3: BigNumber[];
    }>;

    "getBestTrade(uint256)"(
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      venues: string[];
      optionTypes: number[];
      amounts: BigNumber[];
      premiums: BigNumber[];
      0: string[];
      1: number[];
      2: BigNumber[];
      3: BigNumber[];
    }>;

    buyInstrument(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buyInstrument(string[],uint8[],uint256[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    exercise(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exercise(uint256)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getBestTrade(
    purchaseAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    venues: string[];
    optionTypes: number[];
    amounts: BigNumber[];
    premiums: BigNumber[];
    0: string[];
    1: number[];
    2: BigNumber[];
    3: BigNumber[];
  }>;

  "getBestTrade(uint256)"(
    purchaseAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    venues: string[];
    optionTypes: number[];
    amounts: BigNumber[];
    premiums: BigNumber[];
    0: string[];
    1: number[];
    2: BigNumber[];
    3: BigNumber[];
  }>;

  buyInstrument(
    venues: string[],
    optionTypes: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buyInstrument(string[],uint8[],uint256[])"(
    venues: string[],
    optionTypes: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  exercise(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exercise(uint256)"(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getBestTrade(
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      venues: string[];
      optionTypes: number[];
      amounts: BigNumber[];
      premiums: BigNumber[];
      0: string[];
      1: number[];
      2: BigNumber[];
      3: BigNumber[];
    }>;

    "getBestTrade(uint256)"(
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      venues: string[];
      optionTypes: number[];
      amounts: BigNumber[];
      premiums: BigNumber[];
      0: string[];
      1: number[];
      2: BigNumber[];
      3: BigNumber[];
    }>;

    buyInstrument(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyInstrument(string[],uint8[],uint256[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exercise(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exercise(uint256)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getBestTrade(
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBestTrade(uint256)"(
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyInstrument(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buyInstrument(string[],uint8[],uint256[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    exercise(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exercise(uint256)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBestTrade(
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBestTrade(uint256)"(
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyInstrument(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buyInstrument(string[],uint8[],uint256[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    exercise(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exercise(uint256)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
