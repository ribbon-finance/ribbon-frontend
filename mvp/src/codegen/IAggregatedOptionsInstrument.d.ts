/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAggregatedOptionsInstrumentInterface extends ethers.utils.Interface {
  functions: {
    "cost(string[],uint8[],uint256[],uint256[])": FunctionFragment;
    "exerciseProfit(address,uint256)": FunctionFragment;
    "canExercise(address,uint256)": FunctionFragment;
    "buyInstrument(string[],uint8[],uint256,uint256[],bytes[])": FunctionFragment;
    "exercisePosition(uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
    "strikeAsset()": FunctionFragment;
    "collateralAsset()": FunctionFragment;
    "expiry()": FunctionFragment;
    "getInstrumentPositions(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cost",
    values: [string[], BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exerciseProfit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canExercise",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyInstrument",
    values: [
      string[],
      BigNumberish[],
      BigNumberish,
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exercisePosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strikeAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "expiry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInstrumentPositions",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "cost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exerciseProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canExercise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyInstrument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exercisePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strikeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInstrumentPositions",
    data: BytesLike
  ): Result;

  events: {};
}

export class IAggregatedOptionsInstrument extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAggregatedOptionsInstrumentInterface;

  functions: {
    cost(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "cost(string[],uint8[],uint256[],uint256[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    exerciseProfit(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "exerciseProfit(address,uint256)"(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    canExercise(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "canExercise(address,uint256)"(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    buyInstrument(
      venues: string[],
      optionTypes: BigNumberish[],
      amount: BigNumberish,
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buyInstrument(string[],uint8[],uint256,uint256[],bytes[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amount: BigNumberish,
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    exercisePosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exercisePosition(uint256)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    underlying(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "underlying()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    strikeAsset(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "strikeAsset()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    collateralAsset(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "collateralAsset()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    expiry(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "expiry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getInstrumentPositions(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      positions: {
        exercised: boolean;
        callVenue: number;
        putVenue: number;
        callOptionID: number;
        putOptionID: number;
        amount: BigNumber;
        callStrikePrice: BigNumber;
        putStrikePrice: BigNumber;
        0: boolean;
        1: number;
        2: number;
        3: number;
        4: number;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      }[];
      0: {
        exercised: boolean;
        callVenue: number;
        putVenue: number;
        callOptionID: number;
        putOptionID: number;
        amount: BigNumber;
        callStrikePrice: BigNumber;
        putStrikePrice: BigNumber;
        0: boolean;
        1: number;
        2: number;
        3: number;
        4: number;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      }[];
    }>;

    "getInstrumentPositions(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      positions: {
        exercised: boolean;
        callVenue: number;
        putVenue: number;
        callOptionID: number;
        putOptionID: number;
        amount: BigNumber;
        callStrikePrice: BigNumber;
        putStrikePrice: BigNumber;
        0: boolean;
        1: number;
        2: number;
        3: number;
        4: number;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      }[];
      0: {
        exercised: boolean;
        callVenue: number;
        putVenue: number;
        callOptionID: number;
        putOptionID: number;
        amount: BigNumber;
        callStrikePrice: BigNumber;
        putStrikePrice: BigNumber;
        0: boolean;
        1: number;
        2: number;
        3: number;
        4: number;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      }[];
    }>;
  };

  cost(
    venues: string[],
    optionTypes: BigNumberish[],
    amounts: BigNumberish[],
    strikePrices: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "cost(string[],uint8[],uint256[],uint256[])"(
    venues: string[],
    optionTypes: BigNumberish[],
    amounts: BigNumberish[],
    strikePrices: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exerciseProfit(
    account: string,
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "exerciseProfit(address,uint256)"(
    account: string,
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canExercise(
    account: string,
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canExercise(address,uint256)"(
    account: string,
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  buyInstrument(
    venues: string[],
    optionTypes: BigNumberish[],
    amount: BigNumberish,
    strikePrices: BigNumberish[],
    buyData: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buyInstrument(string[],uint8[],uint256,uint256[],bytes[])"(
    venues: string[],
    optionTypes: BigNumberish[],
    amount: BigNumberish,
    strikePrices: BigNumberish[],
    buyData: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  exercisePosition(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exercisePosition(uint256)"(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  "underlying()"(overrides?: CallOverrides): Promise<string>;

  strikeAsset(overrides?: CallOverrides): Promise<string>;

  "strikeAsset()"(overrides?: CallOverrides): Promise<string>;

  collateralAsset(overrides?: CallOverrides): Promise<string>;

  "collateralAsset()"(overrides?: CallOverrides): Promise<string>;

  expiry(overrides?: CallOverrides): Promise<BigNumber>;

  "expiry()"(overrides?: CallOverrides): Promise<BigNumber>;

  getInstrumentPositions(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    {
      exercised: boolean;
      callVenue: number;
      putVenue: number;
      callOptionID: number;
      putOptionID: number;
      amount: BigNumber;
      callStrikePrice: BigNumber;
      putStrikePrice: BigNumber;
      0: boolean;
      1: number;
      2: number;
      3: number;
      4: number;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }[]
  >;

  "getInstrumentPositions(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    {
      exercised: boolean;
      callVenue: number;
      putVenue: number;
      callOptionID: number;
      putOptionID: number;
      amount: BigNumber;
      callStrikePrice: BigNumber;
      putStrikePrice: BigNumber;
      0: boolean;
      1: number;
      2: number;
      3: number;
      4: number;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }[]
  >;

  callStatic: {
    cost(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cost(string[],uint8[],uint256[],uint256[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exerciseProfit(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exerciseProfit(address,uint256)"(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canExercise(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canExercise(address,uint256)"(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buyInstrument(
      venues: string[],
      optionTypes: BigNumberish[],
      amount: BigNumberish,
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyInstrument(string[],uint8[],uint256,uint256[],bytes[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amount: BigNumberish,
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exercisePosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exercisePosition(uint256)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;

    strikeAsset(overrides?: CallOverrides): Promise<string>;

    "strikeAsset()"(overrides?: CallOverrides): Promise<string>;

    collateralAsset(overrides?: CallOverrides): Promise<string>;

    "collateralAsset()"(overrides?: CallOverrides): Promise<string>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    "expiry()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInstrumentPositions(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      {
        exercised: boolean;
        callVenue: number;
        putVenue: number;
        callOptionID: number;
        putOptionID: number;
        amount: BigNumber;
        callStrikePrice: BigNumber;
        putStrikePrice: BigNumber;
        0: boolean;
        1: number;
        2: number;
        3: number;
        4: number;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      }[]
    >;

    "getInstrumentPositions(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      {
        exercised: boolean;
        callVenue: number;
        putVenue: number;
        callOptionID: number;
        putOptionID: number;
        amount: BigNumber;
        callStrikePrice: BigNumber;
        putStrikePrice: BigNumber;
        0: boolean;
        1: number;
        2: number;
        3: number;
        4: number;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      }[]
    >;
  };

  filters: {};

  estimateGas: {
    cost(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cost(string[],uint8[],uint256[],uint256[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exerciseProfit(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exerciseProfit(address,uint256)"(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canExercise(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canExercise(address,uint256)"(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyInstrument(
      venues: string[],
      optionTypes: BigNumberish[],
      amount: BigNumberish,
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buyInstrument(string[],uint8[],uint256,uint256[],bytes[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amount: BigNumberish,
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    exercisePosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exercisePosition(uint256)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    "underlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    strikeAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "strikeAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    "expiry()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInstrumentPositions(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInstrumentPositions(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cost(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cost(string[],uint8[],uint256[],uint256[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exerciseProfit(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exerciseProfit(address,uint256)"(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canExercise(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canExercise(address,uint256)"(
      account: string,
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyInstrument(
      venues: string[],
      optionTypes: BigNumberish[],
      amount: BigNumberish,
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buyInstrument(string[],uint8[],uint256,uint256[],bytes[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amount: BigNumberish,
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    exercisePosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exercisePosition(uint256)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strikeAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strikeAsset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "expiry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInstrumentPositions(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInstrumentPositions(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
