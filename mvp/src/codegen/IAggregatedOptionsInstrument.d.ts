/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAggregatedOptionsInstrumentInterface extends ethers.utils.Interface {
  functions: {
    "cost(string[],uint8[],uint256[],uint256[])": FunctionFragment;
    "buyInstrument(string[],uint8[],uint256[],uint256[],bytes[])": FunctionFragment;
    "exercisePosition(uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
    "strikeAsset()": FunctionFragment;
    "collateralAsset()": FunctionFragment;
    "expiry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cost",
    values: [string[], BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buyInstrument",
    values: [
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exercisePosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strikeAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "expiry", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyInstrument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exercisePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strikeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiry", data: BytesLike): Result;

  events: {};
}

export class IAggregatedOptionsInstrument extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAggregatedOptionsInstrumentInterface;

  functions: {
    cost(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "cost(string[],uint8[],uint256[],uint256[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    buyInstrument(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buyInstrument(string[],uint8[],uint256[],uint256[],bytes[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    exercisePosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exercisePosition(uint256)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    underlying(overrides?: Overrides): Promise<ContractTransaction>;

    "underlying()"(overrides?: Overrides): Promise<ContractTransaction>;

    strikeAsset(overrides?: Overrides): Promise<ContractTransaction>;

    "strikeAsset()"(overrides?: Overrides): Promise<ContractTransaction>;

    collateralAsset(overrides?: Overrides): Promise<ContractTransaction>;

    "collateralAsset()"(overrides?: Overrides): Promise<ContractTransaction>;

    expiry(overrides?: Overrides): Promise<ContractTransaction>;

    "expiry()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  cost(
    venues: string[],
    optionTypes: BigNumberish[],
    amounts: BigNumberish[],
    strikePrices: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "cost(string[],uint8[],uint256[],uint256[])"(
    venues: string[],
    optionTypes: BigNumberish[],
    amounts: BigNumberish[],
    strikePrices: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyInstrument(
    venues: string[],
    optionTypes: BigNumberish[],
    amounts: BigNumberish[],
    strikePrices: BigNumberish[],
    buyData: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buyInstrument(string[],uint8[],uint256[],uint256[],bytes[])"(
    venues: string[],
    optionTypes: BigNumberish[],
    amounts: BigNumberish[],
    strikePrices: BigNumberish[],
    buyData: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  exercisePosition(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exercisePosition(uint256)"(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  underlying(overrides?: Overrides): Promise<ContractTransaction>;

  "underlying()"(overrides?: Overrides): Promise<ContractTransaction>;

  strikeAsset(overrides?: Overrides): Promise<ContractTransaction>;

  "strikeAsset()"(overrides?: Overrides): Promise<ContractTransaction>;

  collateralAsset(overrides?: Overrides): Promise<ContractTransaction>;

  "collateralAsset()"(overrides?: Overrides): Promise<ContractTransaction>;

  expiry(overrides?: Overrides): Promise<ContractTransaction>;

  "expiry()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    cost(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cost(string[],uint8[],uint256[],uint256[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyInstrument(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyInstrument(string[],uint8[],uint256[],uint256[],bytes[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exercisePosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exercisePosition(uint256)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;

    strikeAsset(overrides?: CallOverrides): Promise<string>;

    "strikeAsset()"(overrides?: CallOverrides): Promise<string>;

    collateralAsset(overrides?: CallOverrides): Promise<string>;

    "collateralAsset()"(overrides?: CallOverrides): Promise<string>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    "expiry()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    cost(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cost(string[],uint8[],uint256[],uint256[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyInstrument(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buyInstrument(string[],uint8[],uint256[],uint256[],bytes[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    exercisePosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exercisePosition(uint256)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    underlying(overrides?: Overrides): Promise<BigNumber>;

    "underlying()"(overrides?: Overrides): Promise<BigNumber>;

    strikeAsset(overrides?: Overrides): Promise<BigNumber>;

    "strikeAsset()"(overrides?: Overrides): Promise<BigNumber>;

    collateralAsset(overrides?: Overrides): Promise<BigNumber>;

    "collateralAsset()"(overrides?: Overrides): Promise<BigNumber>;

    expiry(overrides?: Overrides): Promise<BigNumber>;

    "expiry()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cost(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cost(string[],uint8[],uint256[],uint256[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyInstrument(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buyInstrument(string[],uint8[],uint256[],uint256[],bytes[])"(
      venues: string[],
      optionTypes: BigNumberish[],
      amounts: BigNumberish[],
      strikePrices: BigNumberish[],
      buyData: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    exercisePosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exercisePosition(uint256)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: Overrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    strikeAsset(overrides?: Overrides): Promise<PopulatedTransaction>;

    "strikeAsset()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    collateralAsset(overrides?: Overrides): Promise<PopulatedTransaction>;

    "collateralAsset()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    expiry(overrides?: Overrides): Promise<PopulatedTransaction>;

    "expiry()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
