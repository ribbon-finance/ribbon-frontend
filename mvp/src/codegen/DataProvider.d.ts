/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DataProviderInterface extends ethers.utils.Interface {
  functions: {
    "chainlinkRegistry(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "weth()": FunctionFragment;
    "addChainlinkFeed(address,address)": FunctionFragment;
    "getChainlinkFeed(address)": FunctionFragment;
    "getPrice(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "chainlinkRegistry",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addChainlinkFeed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkFeed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "chainlinkRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addChainlinkFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class DataProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DataProviderInterface;

  functions: {
    chainlinkRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "chainlinkRegistry(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    weth(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "weth()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Adds Chainlink feed to chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    addChainlinkFeed(
      _asset: string,
      _feed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Adds Chainlink feed to chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    "addChainlinkFeed(address,address)"(
      _asset: string,
      _feed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Gets Chainlink feed from chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    getChainlinkFeed(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<{
      _feed: string;
      0: string;
    }>;

    /**
     * Gets Chainlink feed from chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    "getChainlinkFeed(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<{
      _feed: string;
      0: string;
    }>;

    /**
     * Gets the latest price of an asset.
     */
    getPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets the latest price of an asset.
     */
    "getPrice(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  chainlinkRegistry(arg0: string, overrides?: CallOverrides): Promise<string>;

  "chainlinkRegistry(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Adds Chainlink feed to chainlinkRegistry
   * @param _asset is the address of the asset contract
   */
  addChainlinkFeed(
    _asset: string,
    _feed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Adds Chainlink feed to chainlinkRegistry
   * @param _asset is the address of the asset contract
   */
  "addChainlinkFeed(address,address)"(
    _asset: string,
    _feed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Gets Chainlink feed from chainlinkRegistry
   * @param _asset is the address of the asset contract
   */
  getChainlinkFeed(_asset: string, overrides?: CallOverrides): Promise<string>;

  /**
   * Gets Chainlink feed from chainlinkRegistry
   * @param _asset is the address of the asset contract
   */
  "getChainlinkFeed(address)"(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Gets the latest price of an asset.
   */
  getPrice(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the latest price of an asset.
   */
  "getPrice(address)"(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    chainlinkRegistry(arg0: string, overrides?: CallOverrides): Promise<string>;

    "chainlinkRegistry(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Adds Chainlink feed to chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    addChainlinkFeed(
      _asset: string,
      _feed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Adds Chainlink feed to chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    "addChainlinkFeed(address,address)"(
      _asset: string,
      _feed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Gets Chainlink feed from chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    getChainlinkFeed(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Gets Chainlink feed from chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    "getChainlinkFeed(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Gets the latest price of an asset.
     */
    getPrice(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the latest price of an asset.
     */
    "getPrice(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    chainlinkRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "chainlinkRegistry(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Adds Chainlink feed to chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    addChainlinkFeed(
      _asset: string,
      _feed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Adds Chainlink feed to chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    "addChainlinkFeed(address,address)"(
      _asset: string,
      _feed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Gets Chainlink feed from chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    getChainlinkFeed(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets Chainlink feed from chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    "getChainlinkFeed(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the latest price of an asset.
     */
    getPrice(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the latest price of an asset.
     */
    "getPrice(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chainlinkRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "chainlinkRegistry(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Adds Chainlink feed to chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    addChainlinkFeed(
      _asset: string,
      _feed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Adds Chainlink feed to chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    "addChainlinkFeed(address,address)"(
      _asset: string,
      _feed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets Chainlink feed from chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    getChainlinkFeed(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets Chainlink feed from chainlinkRegistry
     * @param _asset is the address of the asset contract
     */
    "getChainlinkFeed(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the latest price of an asset.
     */
    getPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the latest price of an asset.
     */
    "getPrice(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
