/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TwinYieldInterface extends ethers.utils.Interface {
  functions: {
    "balancerDToken()": FunctionFragment;
    "balancerFactory()": FunctionFragment;
    "balancerPaymentToken()": FunctionFragment;
    "balancerPool()": FunctionFragment;
    "collateralAsset()": FunctionFragment;
    "collateralizationRatio()": FunctionFragment;
    "dToken()": FunctionFragment;
    "dataProvider()": FunctionFragment;
    "expired()": FunctionFragment;
    "expiry()": FunctionFragment;
    "finalizePool(uint256,uint256)": FunctionFragment;
    "getColPrice()": FunctionFragment;
    "getTargetPrice()": FunctionFragment;
    "getVault(address)": FunctionFragment;
    "liquidatorProxy()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentToken()": FunctionFragment;
    "sellToPool(uint256,uint256)": FunctionFragment;
    "settlePrice()": FunctionFragment;
    "strikePrice()": FunctionFragment;
    "symbol()": FunctionFragment;
    "targetAsset()": FunctionFragment;
    "vaults(address)": FunctionFragment;
    "initialize(address,address,string,string,uint256,uint256,uint256,address,address,address,address,address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "depositAndMint(uint256,uint256)": FunctionFragment;
    "depositMintAndSell(uint256,uint256,uint256)": FunctionFragment;
    "repayDebt(address,uint256)": FunctionFragment;
    "settle()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "withdrawAfterExpiry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balancerDToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balancerFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balancerPaymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balancerPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizationRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dataProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "expired", values?: undefined): string;
  encodeFunctionData(functionFragment: "expiry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizePool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getColPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidatorProxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellToPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strikePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetAsset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vaults", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "depositAndMint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositMintAndSell",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "settle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAfterExpiry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "balancerDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancerFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancerPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expired", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getColPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatorProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellToPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settlePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMintAndSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAfterExpiry",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(address,uint256)": EventFragment;
    "Liquidated(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Minted(address,uint256)": EventFragment;
    "Redeemed(address,uint256,uint256)": EventFragment;
    "Repaid(address,address,uint256)": EventFragment;
    "Settled(uint256,uint256)": EventFragment;
    "SoldToBalancerPool(address,address,address,address,uint256,uint256)": EventFragment;
    "Withdrew(address,uint256)": EventFragment;
    "WithdrewExpired(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoldToBalancerPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrew"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrewExpired"): EventFragment;
}

export class TwinYield extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TwinYieldInterface;

  functions: {
    /**
     * Returns the stored dToken
     */
    balancerDToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the stored dToken
     */
    "balancerDToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    balancerFactory(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "balancerFactory()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the payment token
     */
    balancerPaymentToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the payment token
     */
    "balancerPaymentToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the created balancer pool
     */
    balancerPool(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the created balancer pool
     */
    "balancerPool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    collateralAsset(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "collateralAsset()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    collateralizationRatio(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "collateralizationRatio()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Returns the dToken of the instrument
     */
    dToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the dToken of the instrument
     */
    "dToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    dataProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "dataProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    expired(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "expired()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    expiry(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "expiry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    finalizePool(
      _initDTokenAmount: BigNumberish,
      _initPaymentTokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizePool(uint256,uint256)"(
      _initDTokenAmount: BigNumberish,
      _initPaymentTokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Gets the price of collateral asset
     */
    getColPrice(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets the price of collateral asset
     */
    "getColPrice()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets the price of target asset
     */
    getTargetPrice(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets the price of target asset
     */
    "getTargetPrice()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets the collateral and debt of a vault
     * @param _user user's address
     */
    getVault(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      _collateral: BigNumber;
      _dTokenDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    /**
     * Gets the collateral and debt of a vault
     * @param _user user's address
     */
    "getVault(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      _collateral: BigNumber;
      _dTokenDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    liquidatorProxy(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "liquidatorProxy()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the name of the contract
     */
    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the name of the contract
     */
    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    paymentToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "paymentToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Sell _sellAmount worth of dTokens to the Balancer pool and get tokenAmountOut worth of paymentTokens in return
     * @param _sellAmount is the amount of dTokens to sell. All of the tokens will be sold.
     */
    sellToPool(
      _sellAmount: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Sell _sellAmount worth of dTokens to the Balancer pool and get tokenAmountOut worth of paymentTokens in return
     * @param _sellAmount is the amount of dTokens to sell. All of the tokens will be sold.
     */
    "sellToPool(uint256,uint256)"(
      _sellAmount: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settlePrice(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "settlePrice()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    strikePrice(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "strikePrice()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Returns the symbol of the instrument
     */
    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the symbol of the instrument
     */
    "symbol()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    targetAsset(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "targetAsset()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      collateral: BigNumber;
      dTokenDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "vaults(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      collateral: BigNumber;
      dTokenDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "initialize(address,address,string,string,uint256,uint256,uint256,address,address,address,address,address)"(
      _owner: string,
      _dataProvider: string,
      name: string,
      symbol: string,
      _expiry: BigNumberish,
      _strikePrice: BigNumberish,
      _collateralizationRatio: BigNumberish,
      _collateralAsset: string,
      _targetAsset: string,
      _paymentToken: string,
      _liquidatorProxy: string,
      _balancerFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Initializes the contract with params and creates a new pool, with address(this) as the pool's controller.
     * @param bFactory is the address of the Balancer Core Factory
     * @param dToken is the address of the instrument dToken
     * @param paymentToken is the address of the paymentToken (the token sellers get when selling dToken)
     */
    "initialize(address,address,address,address)"(
      owner: string,
      bFactory: string,
      dToken: string,
      paymentToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Deposits collateral into the system. Calls the `depositInteral` function
     * @param _amount is amount of collateral to deposit
     */
    deposit(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Deposits collateral into the system. Calls the `depositInteral` function
     * @param _amount is amount of collateral to deposit
     */
    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Mints dTokens. Calls the `mintInternal` function
     * @param _amount is amount of dToken to mint
     */
    mint(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Mints dTokens. Calls the `mintInternal` function
     * @param _amount is amount of dToken to mint
     */
    "mint(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Deposits collateral and mints dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     */
    depositAndMint(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Deposits collateral and mints dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     */
    "depositAndMint(uint256,uint256)"(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Deposits collateral, mints dToken, sells dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     * @param _maxSlippage is max % amount of slippage in WAD
     */
    depositMintAndSell(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Deposits collateral, mints dToken, sells dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     * @param _maxSlippage is max % amount of slippage in WAD
     */
    "depositMintAndSell(uint256,uint256,uint256)"(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Repays dToken debt in a vault
     * @param _account is the address which debt is being repaid
     * @param _amount is amount of dToken to repay
     */
    repayDebt(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Repays dToken debt in a vault
     * @param _account is the address which debt is being repaid
     * @param _amount is amount of dToken to repay
     */
    "repayDebt(address,uint256)"(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Changes `expired` to True if timestamp is greater than expiry It calculates the `settlePrice` with the current prices of target and collateral assets, then sets them in stone.
     */
    settle(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Changes `expired` to True if timestamp is greater than expiry It calculates the `settlePrice` with the current prices of target and collateral assets, then sets them in stone.
     */
    "settle()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Redeems dToken for collateral after expiry
     * @param _dTokenAmount is amount of dTokens to redeem
     */
    redeem(
      _dTokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Redeems dToken for collateral after expiry
     * @param _dTokenAmount is amount of dTokens to redeem
     */
    "redeem(uint256)"(
      _dTokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Withdraws collateral after instrument is expired
     */
    withdrawAfterExpiry(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Withdraws collateral after instrument is expired
     */
    "withdrawAfterExpiry()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns the stored dToken
   */
  balancerDToken(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the stored dToken
   */
  "balancerDToken()"(overrides?: CallOverrides): Promise<string>;

  balancerFactory(overrides?: CallOverrides): Promise<string>;

  "balancerFactory()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the payment token
   */
  balancerPaymentToken(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the payment token
   */
  "balancerPaymentToken()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the created balancer pool
   */
  balancerPool(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the created balancer pool
   */
  "balancerPool()"(overrides?: CallOverrides): Promise<string>;

  collateralAsset(overrides?: CallOverrides): Promise<string>;

  "collateralAsset()"(overrides?: CallOverrides): Promise<string>;

  collateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralizationRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the dToken of the instrument
   */
  dToken(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the dToken of the instrument
   */
  "dToken()"(overrides?: CallOverrides): Promise<string>;

  dataProvider(overrides?: CallOverrides): Promise<string>;

  "dataProvider()"(overrides?: CallOverrides): Promise<string>;

  expired(overrides?: CallOverrides): Promise<boolean>;

  "expired()"(overrides?: CallOverrides): Promise<boolean>;

  expiry(overrides?: CallOverrides): Promise<BigNumber>;

  "expiry()"(overrides?: CallOverrides): Promise<BigNumber>;

  finalizePool(
    _initDTokenAmount: BigNumberish,
    _initPaymentTokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizePool(uint256,uint256)"(
    _initDTokenAmount: BigNumberish,
    _initPaymentTokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Gets the price of collateral asset
   */
  getColPrice(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the price of collateral asset
   */
  "getColPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the price of target asset
   */
  getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the price of target asset
   */
  "getTargetPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the collateral and debt of a vault
   * @param _user user's address
   */
  getVault(
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    _collateral: BigNumber;
    _dTokenDebt: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  /**
   * Gets the collateral and debt of a vault
   * @param _user user's address
   */
  "getVault(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    _collateral: BigNumber;
    _dTokenDebt: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  liquidatorProxy(overrides?: CallOverrides): Promise<string>;

  "liquidatorProxy()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the name of the contract
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the name of the contract
   */
  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paymentToken(overrides?: CallOverrides): Promise<string>;

  "paymentToken()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Sell _sellAmount worth of dTokens to the Balancer pool and get tokenAmountOut worth of paymentTokens in return
   * @param _sellAmount is the amount of dTokens to sell. All of the tokens will be sold.
   */
  sellToPool(
    _sellAmount: BigNumberish,
    _maxSlippage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Sell _sellAmount worth of dTokens to the Balancer pool and get tokenAmountOut worth of paymentTokens in return
   * @param _sellAmount is the amount of dTokens to sell. All of the tokens will be sold.
   */
  "sellToPool(uint256,uint256)"(
    _sellAmount: BigNumberish,
    _maxSlippage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settlePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "settlePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  strikePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "strikePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the symbol of the instrument
   */
  symbol(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the symbol of the instrument
   */
  "symbol()"(overrides?: CallOverrides): Promise<string>;

  targetAsset(overrides?: CallOverrides): Promise<string>;

  "targetAsset()"(overrides?: CallOverrides): Promise<string>;

  vaults(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    collateral: BigNumber;
    dTokenDebt: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "vaults(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    collateral: BigNumber;
    dTokenDebt: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "initialize(address,address,string,string,uint256,uint256,uint256,address,address,address,address,address)"(
    _owner: string,
    _dataProvider: string,
    name: string,
    symbol: string,
    _expiry: BigNumberish,
    _strikePrice: BigNumberish,
    _collateralizationRatio: BigNumberish,
    _collateralAsset: string,
    _targetAsset: string,
    _paymentToken: string,
    _liquidatorProxy: string,
    _balancerFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Initializes the contract with params and creates a new pool, with address(this) as the pool's controller.
   * @param bFactory is the address of the Balancer Core Factory
   * @param dToken is the address of the instrument dToken
   * @param paymentToken is the address of the paymentToken (the token sellers get when selling dToken)
   */
  "initialize(address,address,address,address)"(
    owner: string,
    bFactory: string,
    dToken: string,
    paymentToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Deposits collateral into the system. Calls the `depositInteral` function
   * @param _amount is amount of collateral to deposit
   */
  deposit(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Deposits collateral into the system. Calls the `depositInteral` function
   * @param _amount is amount of collateral to deposit
   */
  "deposit(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Mints dTokens. Calls the `mintInternal` function
   * @param _amount is amount of dToken to mint
   */
  mint(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Mints dTokens. Calls the `mintInternal` function
   * @param _amount is amount of dToken to mint
   */
  "mint(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Deposits collateral and mints dToken atomically
   * @param _collateral is amount of collateral to deposit
   * @param _dToken is amount of dTokens to mint
   */
  depositAndMint(
    _collateral: BigNumberish,
    _dToken: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Deposits collateral and mints dToken atomically
   * @param _collateral is amount of collateral to deposit
   * @param _dToken is amount of dTokens to mint
   */
  "depositAndMint(uint256,uint256)"(
    _collateral: BigNumberish,
    _dToken: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Deposits collateral, mints dToken, sells dToken atomically
   * @param _collateral is amount of collateral to deposit
   * @param _dToken is amount of dTokens to mint
   * @param _maxSlippage is max % amount of slippage in WAD
   */
  depositMintAndSell(
    _collateral: BigNumberish,
    _dToken: BigNumberish,
    _maxSlippage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Deposits collateral, mints dToken, sells dToken atomically
   * @param _collateral is amount of collateral to deposit
   * @param _dToken is amount of dTokens to mint
   * @param _maxSlippage is max % amount of slippage in WAD
   */
  "depositMintAndSell(uint256,uint256,uint256)"(
    _collateral: BigNumberish,
    _dToken: BigNumberish,
    _maxSlippage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Repays dToken debt in a vault
   * @param _account is the address which debt is being repaid
   * @param _amount is amount of dToken to repay
   */
  repayDebt(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Repays dToken debt in a vault
   * @param _account is the address which debt is being repaid
   * @param _amount is amount of dToken to repay
   */
  "repayDebt(address,uint256)"(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Changes `expired` to True if timestamp is greater than expiry It calculates the `settlePrice` with the current prices of target and collateral assets, then sets them in stone.
   */
  settle(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Changes `expired` to True if timestamp is greater than expiry It calculates the `settlePrice` with the current prices of target and collateral assets, then sets them in stone.
   */
  "settle()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Redeems dToken for collateral after expiry
   * @param _dTokenAmount is amount of dTokens to redeem
   */
  redeem(
    _dTokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Redeems dToken for collateral after expiry
   * @param _dTokenAmount is amount of dTokens to redeem
   */
  "redeem(uint256)"(
    _dTokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Withdraws collateral after instrument is expired
   */
  withdrawAfterExpiry(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Withdraws collateral after instrument is expired
   */
  "withdrawAfterExpiry()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Returns the stored dToken
     */
    balancerDToken(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the stored dToken
     */
    "balancerDToken()"(overrides?: CallOverrides): Promise<string>;

    balancerFactory(overrides?: CallOverrides): Promise<string>;

    "balancerFactory()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the payment token
     */
    balancerPaymentToken(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the payment token
     */
    "balancerPaymentToken()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the created balancer pool
     */
    balancerPool(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the created balancer pool
     */
    "balancerPool()"(overrides?: CallOverrides): Promise<string>;

    collateralAsset(overrides?: CallOverrides): Promise<string>;

    "collateralAsset()"(overrides?: CallOverrides): Promise<string>;

    collateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralizationRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the dToken of the instrument
     */
    dToken(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the dToken of the instrument
     */
    "dToken()"(overrides?: CallOverrides): Promise<string>;

    dataProvider(overrides?: CallOverrides): Promise<string>;

    "dataProvider()"(overrides?: CallOverrides): Promise<string>;

    expired(overrides?: CallOverrides): Promise<boolean>;

    "expired()"(overrides?: CallOverrides): Promise<boolean>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    "expiry()"(overrides?: CallOverrides): Promise<BigNumber>;

    finalizePool(
      _initDTokenAmount: BigNumberish,
      _initPaymentTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizePool(uint256,uint256)"(
      _initDTokenAmount: BigNumberish,
      _initPaymentTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Gets the price of collateral asset
     */
    getColPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the price of collateral asset
     */
    "getColPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the price of target asset
     */
    getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the price of target asset
     */
    "getTargetPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the collateral and debt of a vault
     * @param _user user's address
     */
    getVault(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      _collateral: BigNumber;
      _dTokenDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    /**
     * Gets the collateral and debt of a vault
     * @param _user user's address
     */
    "getVault(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      _collateral: BigNumber;
      _dTokenDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    liquidatorProxy(overrides?: CallOverrides): Promise<string>;

    "liquidatorProxy()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the name of the contract
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the name of the contract
     */
    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paymentToken(overrides?: CallOverrides): Promise<string>;

    "paymentToken()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Sell _sellAmount worth of dTokens to the Balancer pool and get tokenAmountOut worth of paymentTokens in return
     * @param _sellAmount is the amount of dTokens to sell. All of the tokens will be sold.
     */
    sellToPool(
      _sellAmount: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAmountOut: BigNumber;
      spotPriceAfter: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    /**
     * Sell _sellAmount worth of dTokens to the Balancer pool and get tokenAmountOut worth of paymentTokens in return
     * @param _sellAmount is the amount of dTokens to sell. All of the tokens will be sold.
     */
    "sellToPool(uint256,uint256)"(
      _sellAmount: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAmountOut: BigNumber;
      spotPriceAfter: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    settlePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "settlePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    strikePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "strikePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the symbol of the instrument
     */
    symbol(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the symbol of the instrument
     */
    "symbol()"(overrides?: CallOverrides): Promise<string>;

    targetAsset(overrides?: CallOverrides): Promise<string>;

    "targetAsset()"(overrides?: CallOverrides): Promise<string>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      collateral: BigNumber;
      dTokenDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "vaults(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      collateral: BigNumber;
      dTokenDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "initialize(address,address,string,string,uint256,uint256,uint256,address,address,address,address,address)"(
      _owner: string,
      _dataProvider: string,
      name: string,
      symbol: string,
      _expiry: BigNumberish,
      _strikePrice: BigNumberish,
      _collateralizationRatio: BigNumberish,
      _collateralAsset: string,
      _targetAsset: string,
      _paymentToken: string,
      _liquidatorProxy: string,
      _balancerFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Initializes the contract with params and creates a new pool, with address(this) as the pool's controller.
     * @param bFactory is the address of the Balancer Core Factory
     * @param dToken is the address of the instrument dToken
     * @param paymentToken is the address of the paymentToken (the token sellers get when selling dToken)
     */
    "initialize(address,address,address,address)"(
      owner: string,
      bFactory: string,
      dToken: string,
      paymentToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Deposits collateral into the system. Calls the `depositInteral` function
     * @param _amount is amount of collateral to deposit
     */
    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * Deposits collateral into the system. Calls the `depositInteral` function
     * @param _amount is amount of collateral to deposit
     */
    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Mints dTokens. Calls the `mintInternal` function
     * @param _amount is amount of dToken to mint
     */
    mint(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * Mints dTokens. Calls the `mintInternal` function
     * @param _amount is amount of dToken to mint
     */
    "mint(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Deposits collateral and mints dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     */
    depositAndMint(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Deposits collateral and mints dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     */
    "depositAndMint(uint256,uint256)"(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Deposits collateral, mints dToken, sells dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     * @param _maxSlippage is max % amount of slippage in WAD
     */
    depositMintAndSell(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Deposits collateral, mints dToken, sells dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     * @param _maxSlippage is max % amount of slippage in WAD
     */
    "depositMintAndSell(uint256,uint256,uint256)"(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Repays dToken debt in a vault
     * @param _account is the address which debt is being repaid
     * @param _amount is amount of dToken to repay
     */
    repayDebt(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Repays dToken debt in a vault
     * @param _account is the address which debt is being repaid
     * @param _amount is amount of dToken to repay
     */
    "repayDebt(address,uint256)"(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Changes `expired` to True if timestamp is greater than expiry It calculates the `settlePrice` with the current prices of target and collateral assets, then sets them in stone.
     */
    settle(overrides?: CallOverrides): Promise<void>;

    /**
     * Changes `expired` to True if timestamp is greater than expiry It calculates the `settlePrice` with the current prices of target and collateral assets, then sets them in stone.
     */
    "settle()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Redeems dToken for collateral after expiry
     * @param _dTokenAmount is amount of dTokens to redeem
     */
    redeem(
      _dTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Redeems dToken for collateral after expiry
     * @param _dTokenAmount is amount of dTokens to redeem
     */
    "redeem(uint256)"(
      _dTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws collateral after instrument is expired
     */
    withdrawAfterExpiry(overrides?: CallOverrides): Promise<void>;

    /**
     * Withdraws collateral after instrument is expired
     */
    "withdrawAfterExpiry()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Deposited(account: string | null, amount: null): EventFilter;

    Liquidated(
      liquidator: string | null,
      liquidated: string | null,
      liquidateAmount: null,
      collateralLiquidated: null,
      newLiquidatorCollateral: null,
      newLiquidatorDebt: null
    ): EventFilter;

    Minted(account: string | null, amount: null): EventFilter;

    Redeemed(
      account: string | null,
      dTokenAmount: null,
      collateralAmount: null
    ): EventFilter;

    Repaid(
      repayer: string | null,
      vault: string | null,
      amount: null
    ): EventFilter;

    Settled(timestamp: BigNumberish | null, settlePrice: null): EventFilter;

    SoldToBalancerPool(
      seller: string | null,
      balancerPool: string | null,
      tokenIn: null,
      tokenOut: null,
      sellAmount: null,
      maxSlippage: null
    ): EventFilter;

    Withdrew(account: string | null, amount: null): EventFilter;

    WithdrewExpired(account: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    /**
     * Returns the stored dToken
     */
    balancerDToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the stored dToken
     */
    "balancerDToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    balancerFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "balancerFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the payment token
     */
    balancerPaymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the payment token
     */
    "balancerPaymentToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the created balancer pool
     */
    balancerPool(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the created balancer pool
     */
    "balancerPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralizationRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the dToken of the instrument
     */
    dToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the dToken of the instrument
     */
    "dToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    dataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "dataProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    expired(overrides?: CallOverrides): Promise<BigNumber>;

    "expired()"(overrides?: CallOverrides): Promise<BigNumber>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    "expiry()"(overrides?: CallOverrides): Promise<BigNumber>;

    finalizePool(
      _initDTokenAmount: BigNumberish,
      _initPaymentTokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizePool(uint256,uint256)"(
      _initDTokenAmount: BigNumberish,
      _initPaymentTokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Gets the price of collateral asset
     */
    getColPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the price of collateral asset
     */
    "getColPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the price of target asset
     */
    getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the price of target asset
     */
    "getTargetPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the collateral and debt of a vault
     * @param _user user's address
     */
    getVault(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the collateral and debt of a vault
     * @param _user user's address
     */
    "getVault(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatorProxy(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidatorProxy()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the name of the contract
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the name of the contract
     */
    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    "paymentToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Sell _sellAmount worth of dTokens to the Balancer pool and get tokenAmountOut worth of paymentTokens in return
     * @param _sellAmount is the amount of dTokens to sell. All of the tokens will be sold.
     */
    sellToPool(
      _sellAmount: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Sell _sellAmount worth of dTokens to the Balancer pool and get tokenAmountOut worth of paymentTokens in return
     * @param _sellAmount is the amount of dTokens to sell. All of the tokens will be sold.
     */
    "sellToPool(uint256,uint256)"(
      _sellAmount: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settlePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "settlePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    strikePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "strikePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the symbol of the instrument
     */
    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the symbol of the instrument
     */
    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    targetAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "targetAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "vaults(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialize(address,address,string,string,uint256,uint256,uint256,address,address,address,address,address)"(
      _owner: string,
      _dataProvider: string,
      name: string,
      symbol: string,
      _expiry: BigNumberish,
      _strikePrice: BigNumberish,
      _collateralizationRatio: BigNumberish,
      _collateralAsset: string,
      _targetAsset: string,
      _paymentToken: string,
      _liquidatorProxy: string,
      _balancerFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Initializes the contract with params and creates a new pool, with address(this) as the pool's controller.
     * @param bFactory is the address of the Balancer Core Factory
     * @param dToken is the address of the instrument dToken
     * @param paymentToken is the address of the paymentToken (the token sellers get when selling dToken)
     */
    "initialize(address,address,address,address)"(
      owner: string,
      bFactory: string,
      dToken: string,
      paymentToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Deposits collateral into the system. Calls the `depositInteral` function
     * @param _amount is amount of collateral to deposit
     */
    deposit(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Deposits collateral into the system. Calls the `depositInteral` function
     * @param _amount is amount of collateral to deposit
     */
    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Mints dTokens. Calls the `mintInternal` function
     * @param _amount is amount of dToken to mint
     */
    mint(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Mints dTokens. Calls the `mintInternal` function
     * @param _amount is amount of dToken to mint
     */
    "mint(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Deposits collateral and mints dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     */
    depositAndMint(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Deposits collateral and mints dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     */
    "depositAndMint(uint256,uint256)"(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Deposits collateral, mints dToken, sells dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     * @param _maxSlippage is max % amount of slippage in WAD
     */
    depositMintAndSell(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Deposits collateral, mints dToken, sells dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     * @param _maxSlippage is max % amount of slippage in WAD
     */
    "depositMintAndSell(uint256,uint256,uint256)"(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Repays dToken debt in a vault
     * @param _account is the address which debt is being repaid
     * @param _amount is amount of dToken to repay
     */
    repayDebt(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Repays dToken debt in a vault
     * @param _account is the address which debt is being repaid
     * @param _amount is amount of dToken to repay
     */
    "repayDebt(address,uint256)"(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Changes `expired` to True if timestamp is greater than expiry It calculates the `settlePrice` with the current prices of target and collateral assets, then sets them in stone.
     */
    settle(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Changes `expired` to True if timestamp is greater than expiry It calculates the `settlePrice` with the current prices of target and collateral assets, then sets them in stone.
     */
    "settle()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Redeems dToken for collateral after expiry
     * @param _dTokenAmount is amount of dTokens to redeem
     */
    redeem(
      _dTokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Redeems dToken for collateral after expiry
     * @param _dTokenAmount is amount of dTokens to redeem
     */
    "redeem(uint256)"(
      _dTokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Withdraws collateral after instrument is expired
     */
    withdrawAfterExpiry(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Withdraws collateral after instrument is expired
     */
    "withdrawAfterExpiry()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the stored dToken
     */
    balancerDToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the stored dToken
     */
    "balancerDToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balancerFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balancerFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the payment token
     */
    balancerPaymentToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the payment token
     */
    "balancerPaymentToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the created balancer pool
     */
    balancerPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the created balancer pool
     */
    "balancerPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralizationRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralizationRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the dToken of the instrument
     */
    dToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the dToken of the instrument
     */
    "dToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dataProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dataProvider()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "expired()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "expiry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizePool(
      _initDTokenAmount: BigNumberish,
      _initPaymentTokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizePool(uint256,uint256)"(
      _initDTokenAmount: BigNumberish,
      _initPaymentTokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the price of collateral asset
     */
    getColPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the price of collateral asset
     */
    "getColPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the price of target asset
     */
    getTargetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the price of target asset
     */
    "getTargetPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the collateral and debt of a vault
     * @param _user user's address
     */
    getVault(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the collateral and debt of a vault
     * @param _user user's address
     */
    "getVault(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatorProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidatorProxy()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the name of the contract
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the name of the contract
     */
    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paymentToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Sell _sellAmount worth of dTokens to the Balancer pool and get tokenAmountOut worth of paymentTokens in return
     * @param _sellAmount is the amount of dTokens to sell. All of the tokens will be sold.
     */
    sellToPool(
      _sellAmount: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Sell _sellAmount worth of dTokens to the Balancer pool and get tokenAmountOut worth of paymentTokens in return
     * @param _sellAmount is the amount of dTokens to sell. All of the tokens will be sold.
     */
    "sellToPool(uint256,uint256)"(
      _sellAmount: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settlePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "settlePrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strikePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strikePrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the symbol of the instrument
     */
    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the symbol of the instrument
     */
    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "targetAsset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vaults(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,string,string,uint256,uint256,uint256,address,address,address,address,address)"(
      _owner: string,
      _dataProvider: string,
      name: string,
      symbol: string,
      _expiry: BigNumberish,
      _strikePrice: BigNumberish,
      _collateralizationRatio: BigNumberish,
      _collateralAsset: string,
      _targetAsset: string,
      _paymentToken: string,
      _liquidatorProxy: string,
      _balancerFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Initializes the contract with params and creates a new pool, with address(this) as the pool's controller.
     * @param bFactory is the address of the Balancer Core Factory
     * @param dToken is the address of the instrument dToken
     * @param paymentToken is the address of the paymentToken (the token sellers get when selling dToken)
     */
    "initialize(address,address,address,address)"(
      owner: string,
      bFactory: string,
      dToken: string,
      paymentToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Deposits collateral into the system. Calls the `depositInteral` function
     * @param _amount is amount of collateral to deposit
     */
    deposit(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Deposits collateral into the system. Calls the `depositInteral` function
     * @param _amount is amount of collateral to deposit
     */
    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Mints dTokens. Calls the `mintInternal` function
     * @param _amount is amount of dToken to mint
     */
    mint(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Mints dTokens. Calls the `mintInternal` function
     * @param _amount is amount of dToken to mint
     */
    "mint(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Deposits collateral and mints dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     */
    depositAndMint(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Deposits collateral and mints dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     */
    "depositAndMint(uint256,uint256)"(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Deposits collateral, mints dToken, sells dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     * @param _maxSlippage is max % amount of slippage in WAD
     */
    depositMintAndSell(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Deposits collateral, mints dToken, sells dToken atomically
     * @param _collateral is amount of collateral to deposit
     * @param _dToken is amount of dTokens to mint
     * @param _maxSlippage is max % amount of slippage in WAD
     */
    "depositMintAndSell(uint256,uint256,uint256)"(
      _collateral: BigNumberish,
      _dToken: BigNumberish,
      _maxSlippage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Repays dToken debt in a vault
     * @param _account is the address which debt is being repaid
     * @param _amount is amount of dToken to repay
     */
    repayDebt(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Repays dToken debt in a vault
     * @param _account is the address which debt is being repaid
     * @param _amount is amount of dToken to repay
     */
    "repayDebt(address,uint256)"(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Changes `expired` to True if timestamp is greater than expiry It calculates the `settlePrice` with the current prices of target and collateral assets, then sets them in stone.
     */
    settle(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Changes `expired` to True if timestamp is greater than expiry It calculates the `settlePrice` with the current prices of target and collateral assets, then sets them in stone.
     */
    "settle()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Redeems dToken for collateral after expiry
     * @param _dTokenAmount is amount of dTokens to redeem
     */
    redeem(
      _dTokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Redeems dToken for collateral after expiry
     * @param _dTokenAmount is amount of dTokens to redeem
     */
    "redeem(uint256)"(
      _dTokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws collateral after instrument is expired
     */
    withdrawAfterExpiry(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Withdraws collateral after instrument is expired
     */
    "withdrawAfterExpiry()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
