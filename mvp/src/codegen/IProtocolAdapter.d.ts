/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IProtocolAdapterInterface extends ethers.utils.Interface {
  functions: {
    "protocolName()": FunctionFragment;
    "nonFungible()": FunctionFragment;
    "purchaseMethod()": FunctionFragment;
    "isEuropean()": FunctionFragment;
    "optionsExist(tuple)": FunctionFragment;
    "getOptionsAddress(tuple)": FunctionFragment;
    "premium(tuple,uint256)": FunctionFragment;
    "exerciseProfit(address,uint256,uint256)": FunctionFragment;
    "purchase(tuple,uint256)": FunctionFragment;
    "exercise(address,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "protocolName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonFungible",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseMethod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEuropean",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionsExist",
    values: [
      {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionsAddress",
    values: [
      {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "premium",
    values: [
      {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exerciseProfit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [
      {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exercise",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "protocolName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonFungible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEuropean", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optionsExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "premium", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exerciseProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exercise", data: BytesLike): Result;

  events: {
    "Exercised(address,address,uint256,uint256,uint256)": EventFragment;
    "Purchased(address,string,address,address,uint256,uint256,uint8,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Exercised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchased"): EventFragment;
}

export class IProtocolAdapter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IProtocolAdapterInterface;

  functions: {
    /**
     * Name of the adapter. E.g. "HEGIC", "OPYN_V1". Used as index key for adapter addresses
     */
    protocolName(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Name of the adapter. E.g. "HEGIC", "OPYN_V1". Used as index key for adapter addresses
     */
    "protocolName()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Boolean flag to indicate whether to use option IDs or not. Fungible protocols normally use tokens to represent option contracts.
     */
    nonFungible(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Boolean flag to indicate whether to use option IDs or not. Fungible protocols normally use tokens to represent option contracts.
     */
    "nonFungible()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Returns the purchase method used to purchase options
     */
    purchaseMethod(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    /**
     * Returns the purchase method used to purchase options
     */
    "purchaseMethod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    /**
     * Returns true if the options protocol is European style options, ie only exercising after expiry
     */
    isEuropean(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Returns true if the options protocol is European style options, ie only exercising after expiry
     */
    "isEuropean()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    optionsExist(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "optionsExist(tuple)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getOptionsAddress(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getOptionsAddress(tuple)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    premium(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      cost: BigNumber;
      0: BigNumber;
    }>;

    "premium(tuple,uint256)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      cost: BigNumber;
      0: BigNumber;
    }>;

    /**
     * Amount of profit made from exercising an option contract (current price - strike price). 0 if exercising out-the-money.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     */
    exerciseProfit(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      profit: BigNumber;
      0: BigNumber;
    }>;

    /**
     * Amount of profit made from exercising an option contract (current price - strike price). 0 if exercising out-the-money.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     */
    "exerciseProfit(address,uint256,uint256)"(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      profit: BigNumber;
      0: BigNumber;
    }>;

    purchase(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "purchase(tuple,uint256)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Exercises the options contract.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.
     */
    exercise(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Exercises the options contract.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.
     */
    "exercise(address,uint256,uint256,address)"(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Name of the adapter. E.g. "HEGIC", "OPYN_V1". Used as index key for adapter addresses
   */
  protocolName(overrides?: CallOverrides): Promise<string>;

  /**
   * Name of the adapter. E.g. "HEGIC", "OPYN_V1". Used as index key for adapter addresses
   */
  "protocolName()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Boolean flag to indicate whether to use option IDs or not. Fungible protocols normally use tokens to represent option contracts.
   */
  nonFungible(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Boolean flag to indicate whether to use option IDs or not. Fungible protocols normally use tokens to represent option contracts.
   */
  "nonFungible()"(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns the purchase method used to purchase options
   */
  purchaseMethod(overrides?: CallOverrides): Promise<number>;

  /**
   * Returns the purchase method used to purchase options
   */
  "purchaseMethod()"(overrides?: CallOverrides): Promise<number>;

  /**
   * Returns true if the options protocol is European style options, ie only exercising after expiry
   */
  isEuropean(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns true if the options protocol is European style options, ie only exercising after expiry
   */
  "isEuropean()"(overrides?: CallOverrides): Promise<boolean>;

  optionsExist(
    optionTerms: {
      underlying: string;
      strikeAsset: string;
      collateralAsset: string;
      expiry: BigNumberish;
      strikePrice: BigNumberish;
      optionType: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  "optionsExist(tuple)"(
    optionTerms: {
      underlying: string;
      strikeAsset: string;
      collateralAsset: string;
      expiry: BigNumberish;
      strikePrice: BigNumberish;
      optionType: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  getOptionsAddress(
    optionTerms: {
      underlying: string;
      strikeAsset: string;
      collateralAsset: string;
      expiry: BigNumberish;
      strikePrice: BigNumberish;
      optionType: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "getOptionsAddress(tuple)"(
    optionTerms: {
      underlying: string;
      strikeAsset: string;
      collateralAsset: string;
      expiry: BigNumberish;
      strikePrice: BigNumberish;
      optionType: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  premium(
    optionTerms: {
      underlying: string;
      strikeAsset: string;
      collateralAsset: string;
      expiry: BigNumberish;
      strikePrice: BigNumberish;
      optionType: BigNumberish;
    },
    purchaseAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "premium(tuple,uint256)"(
    optionTerms: {
      underlying: string;
      strikeAsset: string;
      collateralAsset: string;
      expiry: BigNumberish;
      strikePrice: BigNumberish;
      optionType: BigNumberish;
    },
    purchaseAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Amount of profit made from exercising an option contract (current price - strike price). 0 if exercising out-the-money.
   * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
   * @param optionID is the ID of the option position in non fungible protocols like Hegic.
   * @param options is the address of the options contract
   */
  exerciseProfit(
    options: string,
    optionID: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Amount of profit made from exercising an option contract (current price - strike price). 0 if exercising out-the-money.
   * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
   * @param optionID is the ID of the option position in non fungible protocols like Hegic.
   * @param options is the address of the options contract
   */
  "exerciseProfit(address,uint256,uint256)"(
    options: string,
    optionID: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  purchase(
    optionTerms: {
      underlying: string;
      strikeAsset: string;
      collateralAsset: string;
      expiry: BigNumberish;
      strikePrice: BigNumberish;
      optionType: BigNumberish;
    },
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "purchase(tuple,uint256)"(
    optionTerms: {
      underlying: string;
      strikeAsset: string;
      collateralAsset: string;
      expiry: BigNumberish;
      strikePrice: BigNumberish;
      optionType: BigNumberish;
    },
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Exercises the options contract.
   * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
   * @param optionID is the ID of the option position in non fungible protocols like Hegic.
   * @param options is the address of the options contract
   * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.
   */
  exercise(
    options: string,
    optionID: BigNumberish,
    amount: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Exercises the options contract.
   * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
   * @param optionID is the ID of the option position in non fungible protocols like Hegic.
   * @param options is the address of the options contract
   * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.
   */
  "exercise(address,uint256,uint256,address)"(
    options: string,
    optionID: BigNumberish,
    amount: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Name of the adapter. E.g. "HEGIC", "OPYN_V1". Used as index key for adapter addresses
     */
    protocolName(overrides?: CallOverrides): Promise<string>;

    /**
     * Name of the adapter. E.g. "HEGIC", "OPYN_V1". Used as index key for adapter addresses
     */
    "protocolName()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Boolean flag to indicate whether to use option IDs or not. Fungible protocols normally use tokens to represent option contracts.
     */
    nonFungible(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Boolean flag to indicate whether to use option IDs or not. Fungible protocols normally use tokens to represent option contracts.
     */
    "nonFungible()"(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns the purchase method used to purchase options
     */
    purchaseMethod(overrides?: CallOverrides): Promise<number>;

    /**
     * Returns the purchase method used to purchase options
     */
    "purchaseMethod()"(overrides?: CallOverrides): Promise<number>;

    /**
     * Returns true if the options protocol is European style options, ie only exercising after expiry
     */
    isEuropean(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns true if the options protocol is European style options, ie only exercising after expiry
     */
    "isEuropean()"(overrides?: CallOverrides): Promise<boolean>;

    optionsExist(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "optionsExist(tuple)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    getOptionsAddress(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "getOptionsAddress(tuple)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    premium(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "premium(tuple,uint256)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Amount of profit made from exercising an option contract (current price - strike price). 0 if exercising out-the-money.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     */
    exerciseProfit(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Amount of profit made from exercising an option contract (current price - strike price). 0 if exercising out-the-money.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     */
    "exerciseProfit(address,uint256,uint256)"(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "purchase(tuple,uint256)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Exercises the options contract.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.
     */
    exercise(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Exercises the options contract.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.
     */
    "exercise(address,uint256,uint256,address)"(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Exercised(
      caller: string | null,
      options: string | null,
      optionID: BigNumberish | null,
      amount: null,
      exerciseProfit: null
    ): EventFilter;

    Purchased(
      caller: string | null,
      protocolName: string | null,
      underlying: string | null,
      strikeAsset: null,
      expiry: null,
      strikePrice: null,
      optionType: null,
      amount: null,
      premium: null,
      optionID: null
    ): EventFilter;
  };

  estimateGas: {
    /**
     * Name of the adapter. E.g. "HEGIC", "OPYN_V1". Used as index key for adapter addresses
     */
    protocolName(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Name of the adapter. E.g. "HEGIC", "OPYN_V1". Used as index key for adapter addresses
     */
    "protocolName()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Boolean flag to indicate whether to use option IDs or not. Fungible protocols normally use tokens to represent option contracts.
     */
    nonFungible(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Boolean flag to indicate whether to use option IDs or not. Fungible protocols normally use tokens to represent option contracts.
     */
    "nonFungible()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the purchase method used to purchase options
     */
    purchaseMethod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the purchase method used to purchase options
     */
    "purchaseMethod()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns true if the options protocol is European style options, ie only exercising after expiry
     */
    isEuropean(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns true if the options protocol is European style options, ie only exercising after expiry
     */
    "isEuropean()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionsExist(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "optionsExist(tuple)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOptionsAddress(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOptionsAddress(tuple)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    premium(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "premium(tuple,uint256)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Amount of profit made from exercising an option contract (current price - strike price). 0 if exercising out-the-money.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     */
    exerciseProfit(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Amount of profit made from exercising an option contract (current price - strike price). 0 if exercising out-the-money.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     */
    "exerciseProfit(address,uint256,uint256)"(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "purchase(tuple,uint256)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Exercises the options contract.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.
     */
    exercise(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Exercises the options contract.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.
     */
    "exercise(address,uint256,uint256,address)"(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Name of the adapter. E.g. "HEGIC", "OPYN_V1". Used as index key for adapter addresses
     */
    protocolName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Name of the adapter. E.g. "HEGIC", "OPYN_V1". Used as index key for adapter addresses
     */
    "protocolName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Boolean flag to indicate whether to use option IDs or not. Fungible protocols normally use tokens to represent option contracts.
     */
    nonFungible(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Boolean flag to indicate whether to use option IDs or not. Fungible protocols normally use tokens to represent option contracts.
     */
    "nonFungible()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the purchase method used to purchase options
     */
    purchaseMethod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the purchase method used to purchase options
     */
    "purchaseMethod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if the options protocol is European style options, ie only exercising after expiry
     */
    isEuropean(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns true if the options protocol is European style options, ie only exercising after expiry
     */
    "isEuropean()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionsExist(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "optionsExist(tuple)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOptionsAddress(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOptionsAddress(tuple)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    premium(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "premium(tuple,uint256)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      purchaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Amount of profit made from exercising an option contract (current price - strike price). 0 if exercising out-the-money.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     */
    exerciseProfit(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Amount of profit made from exercising an option contract (current price - strike price). 0 if exercising out-the-money.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     */
    "exerciseProfit(address,uint256,uint256)"(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchase(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "purchase(tuple,uint256)"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
      },
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Exercises the options contract.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.
     */
    exercise(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Exercises the options contract.
     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn
     * @param optionID is the ID of the option position in non fungible protocols like Hegic.
     * @param options is the address of the options contract
     * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.
     */
    "exercise(address,uint256,uint256,address)"(
      options: string,
      optionID: BigNumberish,
      amount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
